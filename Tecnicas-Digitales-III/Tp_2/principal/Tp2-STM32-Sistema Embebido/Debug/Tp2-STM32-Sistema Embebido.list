
Tp2-STM32-Sistema Embebido.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ae4  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08007bf4  08007bf4  00008bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cb8  08007cb8  00009018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007cb8  08007cb8  00008cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cc0  08007cc0  00009018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cc0  08007cc0  00008cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007cc4  08007cc4  00008cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08007cc8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001170  20000018  08007ce0  00009018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001188  08007ce0  00009188  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014d74  00000000  00000000  00009041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003218  00000000  00000000  0001ddb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a8  00000000  00000000  00020fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001019  00000000  00000000  00022478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a1c0  00000000  00000000  00023491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016b3f  00000000  00000000  0003d651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099735  00000000  00000000  00054190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ed8c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057b4  00000000  00000000  000ed908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000f30bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000018 	.word	0x20000018
 800012c:	00000000 	.word	0x00000000
 8000130:	08007bdc 	.word	0x08007bdc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000001c 	.word	0x2000001c
 800014c:	08007bdc 	.word	0x08007bdc

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	@ 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	3a01      	subs	r2, #1
 800020a:	bf28      	it	cs
 800020c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000210:	d2ed      	bcs.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_fmul>:
 800036c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000374:	bf1e      	ittt	ne
 8000376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800037a:	ea92 0f0c 	teqne	r2, ip
 800037e:	ea93 0f0c 	teqne	r3, ip
 8000382:	d06f      	beq.n	8000464 <__aeabi_fmul+0xf8>
 8000384:	441a      	add	r2, r3
 8000386:	ea80 0c01 	eor.w	ip, r0, r1
 800038a:	0240      	lsls	r0, r0, #9
 800038c:	bf18      	it	ne
 800038e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000392:	d01e      	beq.n	80003d2 <__aeabi_fmul+0x66>
 8000394:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800039c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003a0:	fba0 3101 	umull	r3, r1, r0, r1
 80003a4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003ac:	bf3e      	ittt	cc
 80003ae:	0049      	lslcc	r1, r1, #1
 80003b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b4:	005b      	lslcc	r3, r3, #1
 80003b6:	ea40 0001 	orr.w	r0, r0, r1
 80003ba:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003be:	2afd      	cmp	r2, #253	@ 0xfd
 80003c0:	d81d      	bhi.n	80003fe <__aeabi_fmul+0x92>
 80003c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ca:	bf08      	it	eq
 80003cc:	f020 0001 	biceq.w	r0, r0, #1
 80003d0:	4770      	bx	lr
 80003d2:	f090 0f00 	teq	r0, #0
 80003d6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003da:	bf08      	it	eq
 80003dc:	0249      	lsleq	r1, r1, #9
 80003de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e6:	3a7f      	subs	r2, #127	@ 0x7f
 80003e8:	bfc2      	ittt	gt
 80003ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003f2:	4770      	bxgt	lr
 80003f4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f8:	f04f 0300 	mov.w	r3, #0
 80003fc:	3a01      	subs	r2, #1
 80003fe:	dc5d      	bgt.n	80004bc <__aeabi_fmul+0x150>
 8000400:	f112 0f19 	cmn.w	r2, #25
 8000404:	bfdc      	itt	le
 8000406:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800040a:	4770      	bxle	lr
 800040c:	f1c2 0200 	rsb	r2, r2, #0
 8000410:	0041      	lsls	r1, r0, #1
 8000412:	fa21 f102 	lsr.w	r1, r1, r2
 8000416:	f1c2 0220 	rsb	r2, r2, #32
 800041a:	fa00 fc02 	lsl.w	ip, r0, r2
 800041e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000422:	f140 0000 	adc.w	r0, r0, #0
 8000426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800042a:	bf08      	it	eq
 800042c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000430:	4770      	bx	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800043a:	bf02      	ittt	eq
 800043c:	0040      	lsleq	r0, r0, #1
 800043e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000442:	3a01      	subeq	r2, #1
 8000444:	d0f9      	beq.n	800043a <__aeabi_fmul+0xce>
 8000446:	ea40 000c 	orr.w	r0, r0, ip
 800044a:	f093 0f00 	teq	r3, #0
 800044e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000452:	bf02      	ittt	eq
 8000454:	0049      	lsleq	r1, r1, #1
 8000456:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800045a:	3b01      	subeq	r3, #1
 800045c:	d0f9      	beq.n	8000452 <__aeabi_fmul+0xe6>
 800045e:	ea41 010c 	orr.w	r1, r1, ip
 8000462:	e78f      	b.n	8000384 <__aeabi_fmul+0x18>
 8000464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000468:	ea92 0f0c 	teq	r2, ip
 800046c:	bf18      	it	ne
 800046e:	ea93 0f0c 	teqne	r3, ip
 8000472:	d00a      	beq.n	800048a <__aeabi_fmul+0x11e>
 8000474:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000478:	bf18      	it	ne
 800047a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047e:	d1d8      	bne.n	8000432 <__aeabi_fmul+0xc6>
 8000480:	ea80 0001 	eor.w	r0, r0, r1
 8000484:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000488:	4770      	bx	lr
 800048a:	f090 0f00 	teq	r0, #0
 800048e:	bf17      	itett	ne
 8000490:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000494:	4608      	moveq	r0, r1
 8000496:	f091 0f00 	teqne	r1, #0
 800049a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049e:	d014      	beq.n	80004ca <__aeabi_fmul+0x15e>
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	d101      	bne.n	80004aa <__aeabi_fmul+0x13e>
 80004a6:	0242      	lsls	r2, r0, #9
 80004a8:	d10f      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004aa:	ea93 0f0c 	teq	r3, ip
 80004ae:	d103      	bne.n	80004b8 <__aeabi_fmul+0x14c>
 80004b0:	024b      	lsls	r3, r1, #9
 80004b2:	bf18      	it	ne
 80004b4:	4608      	movne	r0, r1
 80004b6:	d108      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004c0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c8:	4770      	bx	lr
 80004ca:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ce:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_fdiv>:
 80004d4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004dc:	bf1e      	ittt	ne
 80004de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004e2:	ea92 0f0c 	teqne	r2, ip
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d069      	beq.n	80005c0 <__aeabi_fdiv+0xec>
 80004ec:	eba2 0203 	sub.w	r2, r2, r3
 80004f0:	ea80 0c01 	eor.w	ip, r0, r1
 80004f4:	0249      	lsls	r1, r1, #9
 80004f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004fa:	d037      	beq.n	800056c <__aeabi_fdiv+0x98>
 80004fc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000508:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800050c:	428b      	cmp	r3, r1
 800050e:	bf38      	it	cc
 8000510:	005b      	lslcc	r3, r3, #1
 8000512:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000516:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800051a:	428b      	cmp	r3, r1
 800051c:	bf24      	itt	cs
 800051e:	1a5b      	subcs	r3, r3, r1
 8000520:	ea40 000c 	orrcs.w	r0, r0, ip
 8000524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000528:	bf24      	itt	cs
 800052a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000536:	bf24      	itt	cs
 8000538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800053c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000544:	bf24      	itt	cs
 8000546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800054a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	bf18      	it	ne
 8000552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000556:	d1e0      	bne.n	800051a <__aeabi_fdiv+0x46>
 8000558:	2afd      	cmp	r2, #253	@ 0xfd
 800055a:	f63f af50 	bhi.w	80003fe <__aeabi_fmul+0x92>
 800055e:	428b      	cmp	r3, r1
 8000560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000564:	bf08      	it	eq
 8000566:	f020 0001 	biceq.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000574:	327f      	adds	r2, #127	@ 0x7f
 8000576:	bfc2      	ittt	gt
 8000578:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800057c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000580:	4770      	bxgt	lr
 8000582:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	3a01      	subs	r2, #1
 800058c:	e737      	b.n	80003fe <__aeabi_fmul+0x92>
 800058e:	f092 0f00 	teq	r2, #0
 8000592:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000596:	bf02      	ittt	eq
 8000598:	0040      	lsleq	r0, r0, #1
 800059a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059e:	3a01      	subeq	r2, #1
 80005a0:	d0f9      	beq.n	8000596 <__aeabi_fdiv+0xc2>
 80005a2:	ea40 000c 	orr.w	r0, r0, ip
 80005a6:	f093 0f00 	teq	r3, #0
 80005aa:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ae:	bf02      	ittt	eq
 80005b0:	0049      	lsleq	r1, r1, #1
 80005b2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b6:	3b01      	subeq	r3, #1
 80005b8:	d0f9      	beq.n	80005ae <__aeabi_fdiv+0xda>
 80005ba:	ea41 010c 	orr.w	r1, r1, ip
 80005be:	e795      	b.n	80004ec <__aeabi_fdiv+0x18>
 80005c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c4:	ea92 0f0c 	teq	r2, ip
 80005c8:	d108      	bne.n	80005dc <__aeabi_fdiv+0x108>
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	f47f af7d 	bne.w	80004ca <__aeabi_fmul+0x15e>
 80005d0:	ea93 0f0c 	teq	r3, ip
 80005d4:	f47f af70 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e776      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	d104      	bne.n	80005ec <__aeabi_fdiv+0x118>
 80005e2:	024b      	lsls	r3, r1, #9
 80005e4:	f43f af4c 	beq.w	8000480 <__aeabi_fmul+0x114>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e76e      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005ec:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005f0:	bf18      	it	ne
 80005f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f6:	d1ca      	bne.n	800058e <__aeabi_fdiv+0xba>
 80005f8:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005fc:	f47f af5c 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 8000600:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000604:	f47f af3c 	bne.w	8000480 <__aeabi_fmul+0x114>
 8000608:	e75f      	b.n	80004ca <__aeabi_fmul+0x15e>
 800060a:	bf00      	nop

0800060c <__aeabi_f2uiz>:
 800060c:	0042      	lsls	r2, r0, #1
 800060e:	d20e      	bcs.n	800062e <__aeabi_f2uiz+0x22>
 8000610:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000614:	d30b      	bcc.n	800062e <__aeabi_f2uiz+0x22>
 8000616:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800061a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061e:	d409      	bmi.n	8000634 <__aeabi_f2uiz+0x28>
 8000620:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000624:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	4770      	bx	lr
 800062e:	f04f 0000 	mov.w	r0, #0
 8000632:	4770      	bx	lr
 8000634:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000638:	d101      	bne.n	800063e <__aeabi_f2uiz+0x32>
 800063a:	0242      	lsls	r2, r0, #9
 800063c:	d102      	bne.n	8000644 <__aeabi_f2uiz+0x38>
 800063e:	f04f 30ff 	mov.w	r0, #4294967295
 8000642:	4770      	bx	lr
 8000644:	f04f 0000 	mov.w	r0, #0
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop

0800064c <__aeabi_ldivmod>:
 800064c:	b97b      	cbnz	r3, 800066e <__aeabi_ldivmod+0x22>
 800064e:	b972      	cbnz	r2, 800066e <__aeabi_ldivmod+0x22>
 8000650:	2900      	cmp	r1, #0
 8000652:	bfbe      	ittt	lt
 8000654:	2000      	movlt	r0, #0
 8000656:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800065a:	e006      	blt.n	800066a <__aeabi_ldivmod+0x1e>
 800065c:	bf08      	it	eq
 800065e:	2800      	cmpeq	r0, #0
 8000660:	bf1c      	itt	ne
 8000662:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000666:	f04f 30ff 	movne.w	r0, #4294967295
 800066a:	f000 b9bf 	b.w	80009ec <__aeabi_idiv0>
 800066e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000672:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000676:	2900      	cmp	r1, #0
 8000678:	db09      	blt.n	800068e <__aeabi_ldivmod+0x42>
 800067a:	2b00      	cmp	r3, #0
 800067c:	db1a      	blt.n	80006b4 <__aeabi_ldivmod+0x68>
 800067e:	f000 f835 	bl	80006ec <__udivmoddi4>
 8000682:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000686:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800068a:	b004      	add	sp, #16
 800068c:	4770      	bx	lr
 800068e:	4240      	negs	r0, r0
 8000690:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000694:	2b00      	cmp	r3, #0
 8000696:	db1b      	blt.n	80006d0 <__aeabi_ldivmod+0x84>
 8000698:	f000 f828 	bl	80006ec <__udivmoddi4>
 800069c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006a4:	b004      	add	sp, #16
 80006a6:	4240      	negs	r0, r0
 80006a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006ac:	4252      	negs	r2, r2
 80006ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006b2:	4770      	bx	lr
 80006b4:	4252      	negs	r2, r2
 80006b6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006ba:	f000 f817 	bl	80006ec <__udivmoddi4>
 80006be:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006c6:	b004      	add	sp, #16
 80006c8:	4240      	negs	r0, r0
 80006ca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006ce:	4770      	bx	lr
 80006d0:	4252      	negs	r2, r2
 80006d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006d6:	f000 f809 	bl	80006ec <__udivmoddi4>
 80006da:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006e2:	b004      	add	sp, #16
 80006e4:	4252      	negs	r2, r2
 80006e6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006ea:	4770      	bx	lr

080006ec <__udivmoddi4>:
 80006ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006f0:	9d08      	ldr	r5, [sp, #32]
 80006f2:	468e      	mov	lr, r1
 80006f4:	4604      	mov	r4, r0
 80006f6:	4688      	mov	r8, r1
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d14a      	bne.n	8000792 <__udivmoddi4+0xa6>
 80006fc:	428a      	cmp	r2, r1
 80006fe:	4617      	mov	r7, r2
 8000700:	d962      	bls.n	80007c8 <__udivmoddi4+0xdc>
 8000702:	fab2 f682 	clz	r6, r2
 8000706:	b14e      	cbz	r6, 800071c <__udivmoddi4+0x30>
 8000708:	f1c6 0320 	rsb	r3, r6, #32
 800070c:	fa01 f806 	lsl.w	r8, r1, r6
 8000710:	fa20 f303 	lsr.w	r3, r0, r3
 8000714:	40b7      	lsls	r7, r6
 8000716:	ea43 0808 	orr.w	r8, r3, r8
 800071a:	40b4      	lsls	r4, r6
 800071c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000720:	fbb8 f1fe 	udiv	r1, r8, lr
 8000724:	fa1f fc87 	uxth.w	ip, r7
 8000728:	fb0e 8811 	mls	r8, lr, r1, r8
 800072c:	fb01 f20c 	mul.w	r2, r1, ip
 8000730:	0c23      	lsrs	r3, r4, #16
 8000732:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000736:	429a      	cmp	r2, r3
 8000738:	d909      	bls.n	800074e <__udivmoddi4+0x62>
 800073a:	18fb      	adds	r3, r7, r3
 800073c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000740:	f080 80eb 	bcs.w	800091a <__udivmoddi4+0x22e>
 8000744:	429a      	cmp	r2, r3
 8000746:	f240 80e8 	bls.w	800091a <__udivmoddi4+0x22e>
 800074a:	3902      	subs	r1, #2
 800074c:	443b      	add	r3, r7
 800074e:	1a9a      	subs	r2, r3, r2
 8000750:	fbb2 f0fe 	udiv	r0, r2, lr
 8000754:	fb0e 2210 	mls	r2, lr, r0, r2
 8000758:	fb00 fc0c 	mul.w	ip, r0, ip
 800075c:	b2a3      	uxth	r3, r4
 800075e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000762:	459c      	cmp	ip, r3
 8000764:	d909      	bls.n	800077a <__udivmoddi4+0x8e>
 8000766:	18fb      	adds	r3, r7, r3
 8000768:	f100 32ff 	add.w	r2, r0, #4294967295
 800076c:	f080 80d7 	bcs.w	800091e <__udivmoddi4+0x232>
 8000770:	459c      	cmp	ip, r3
 8000772:	f240 80d4 	bls.w	800091e <__udivmoddi4+0x232>
 8000776:	443b      	add	r3, r7
 8000778:	3802      	subs	r0, #2
 800077a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800077e:	2100      	movs	r1, #0
 8000780:	eba3 030c 	sub.w	r3, r3, ip
 8000784:	b11d      	cbz	r5, 800078e <__udivmoddi4+0xa2>
 8000786:	2200      	movs	r2, #0
 8000788:	40f3      	lsrs	r3, r6
 800078a:	e9c5 3200 	strd	r3, r2, [r5]
 800078e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000792:	428b      	cmp	r3, r1
 8000794:	d905      	bls.n	80007a2 <__udivmoddi4+0xb6>
 8000796:	b10d      	cbz	r5, 800079c <__udivmoddi4+0xb0>
 8000798:	e9c5 0100 	strd	r0, r1, [r5]
 800079c:	2100      	movs	r1, #0
 800079e:	4608      	mov	r0, r1
 80007a0:	e7f5      	b.n	800078e <__udivmoddi4+0xa2>
 80007a2:	fab3 f183 	clz	r1, r3
 80007a6:	2900      	cmp	r1, #0
 80007a8:	d146      	bne.n	8000838 <__udivmoddi4+0x14c>
 80007aa:	4573      	cmp	r3, lr
 80007ac:	d302      	bcc.n	80007b4 <__udivmoddi4+0xc8>
 80007ae:	4282      	cmp	r2, r0
 80007b0:	f200 8108 	bhi.w	80009c4 <__udivmoddi4+0x2d8>
 80007b4:	1a84      	subs	r4, r0, r2
 80007b6:	eb6e 0203 	sbc.w	r2, lr, r3
 80007ba:	2001      	movs	r0, #1
 80007bc:	4690      	mov	r8, r2
 80007be:	2d00      	cmp	r5, #0
 80007c0:	d0e5      	beq.n	800078e <__udivmoddi4+0xa2>
 80007c2:	e9c5 4800 	strd	r4, r8, [r5]
 80007c6:	e7e2      	b.n	800078e <__udivmoddi4+0xa2>
 80007c8:	2a00      	cmp	r2, #0
 80007ca:	f000 8091 	beq.w	80008f0 <__udivmoddi4+0x204>
 80007ce:	fab2 f682 	clz	r6, r2
 80007d2:	2e00      	cmp	r6, #0
 80007d4:	f040 80a5 	bne.w	8000922 <__udivmoddi4+0x236>
 80007d8:	1a8a      	subs	r2, r1, r2
 80007da:	2101      	movs	r1, #1
 80007dc:	0c03      	lsrs	r3, r0, #16
 80007de:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007e2:	b280      	uxth	r0, r0
 80007e4:	b2bc      	uxth	r4, r7
 80007e6:	fbb2 fcfe 	udiv	ip, r2, lr
 80007ea:	fb0e 221c 	mls	r2, lr, ip, r2
 80007ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80007f2:	fb04 f20c 	mul.w	r2, r4, ip
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d907      	bls.n	800080a <__udivmoddi4+0x11e>
 80007fa:	18fb      	adds	r3, r7, r3
 80007fc:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000800:	d202      	bcs.n	8000808 <__udivmoddi4+0x11c>
 8000802:	429a      	cmp	r2, r3
 8000804:	f200 80e3 	bhi.w	80009ce <__udivmoddi4+0x2e2>
 8000808:	46c4      	mov	ip, r8
 800080a:	1a9b      	subs	r3, r3, r2
 800080c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000810:	fb0e 3312 	mls	r3, lr, r2, r3
 8000814:	fb02 f404 	mul.w	r4, r2, r4
 8000818:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800081c:	429c      	cmp	r4, r3
 800081e:	d907      	bls.n	8000830 <__udivmoddi4+0x144>
 8000820:	18fb      	adds	r3, r7, r3
 8000822:	f102 30ff 	add.w	r0, r2, #4294967295
 8000826:	d202      	bcs.n	800082e <__udivmoddi4+0x142>
 8000828:	429c      	cmp	r4, r3
 800082a:	f200 80cd 	bhi.w	80009c8 <__udivmoddi4+0x2dc>
 800082e:	4602      	mov	r2, r0
 8000830:	1b1b      	subs	r3, r3, r4
 8000832:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000836:	e7a5      	b.n	8000784 <__udivmoddi4+0x98>
 8000838:	f1c1 0620 	rsb	r6, r1, #32
 800083c:	408b      	lsls	r3, r1
 800083e:	fa22 f706 	lsr.w	r7, r2, r6
 8000842:	431f      	orrs	r7, r3
 8000844:	fa2e fa06 	lsr.w	sl, lr, r6
 8000848:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800084c:	fbba f8f9 	udiv	r8, sl, r9
 8000850:	fa0e fe01 	lsl.w	lr, lr, r1
 8000854:	fa20 f306 	lsr.w	r3, r0, r6
 8000858:	fb09 aa18 	mls	sl, r9, r8, sl
 800085c:	fa1f fc87 	uxth.w	ip, r7
 8000860:	ea43 030e 	orr.w	r3, r3, lr
 8000864:	fa00 fe01 	lsl.w	lr, r0, r1
 8000868:	fb08 f00c 	mul.w	r0, r8, ip
 800086c:	0c1c      	lsrs	r4, r3, #16
 800086e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000872:	42a0      	cmp	r0, r4
 8000874:	fa02 f201 	lsl.w	r2, r2, r1
 8000878:	d90a      	bls.n	8000890 <__udivmoddi4+0x1a4>
 800087a:	193c      	adds	r4, r7, r4
 800087c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000880:	f080 809e 	bcs.w	80009c0 <__udivmoddi4+0x2d4>
 8000884:	42a0      	cmp	r0, r4
 8000886:	f240 809b 	bls.w	80009c0 <__udivmoddi4+0x2d4>
 800088a:	f1a8 0802 	sub.w	r8, r8, #2
 800088e:	443c      	add	r4, r7
 8000890:	1a24      	subs	r4, r4, r0
 8000892:	b298      	uxth	r0, r3
 8000894:	fbb4 f3f9 	udiv	r3, r4, r9
 8000898:	fb09 4413 	mls	r4, r9, r3, r4
 800089c:	fb03 fc0c 	mul.w	ip, r3, ip
 80008a0:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80008a4:	45a4      	cmp	ip, r4
 80008a6:	d909      	bls.n	80008bc <__udivmoddi4+0x1d0>
 80008a8:	193c      	adds	r4, r7, r4
 80008aa:	f103 30ff 	add.w	r0, r3, #4294967295
 80008ae:	f080 8085 	bcs.w	80009bc <__udivmoddi4+0x2d0>
 80008b2:	45a4      	cmp	ip, r4
 80008b4:	f240 8082 	bls.w	80009bc <__udivmoddi4+0x2d0>
 80008b8:	3b02      	subs	r3, #2
 80008ba:	443c      	add	r4, r7
 80008bc:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80008c0:	eba4 040c 	sub.w	r4, r4, ip
 80008c4:	fba0 8c02 	umull	r8, ip, r0, r2
 80008c8:	4564      	cmp	r4, ip
 80008ca:	4643      	mov	r3, r8
 80008cc:	46e1      	mov	r9, ip
 80008ce:	d364      	bcc.n	800099a <__udivmoddi4+0x2ae>
 80008d0:	d061      	beq.n	8000996 <__udivmoddi4+0x2aa>
 80008d2:	b15d      	cbz	r5, 80008ec <__udivmoddi4+0x200>
 80008d4:	ebbe 0203 	subs.w	r2, lr, r3
 80008d8:	eb64 0409 	sbc.w	r4, r4, r9
 80008dc:	fa04 f606 	lsl.w	r6, r4, r6
 80008e0:	fa22 f301 	lsr.w	r3, r2, r1
 80008e4:	431e      	orrs	r6, r3
 80008e6:	40cc      	lsrs	r4, r1
 80008e8:	e9c5 6400 	strd	r6, r4, [r5]
 80008ec:	2100      	movs	r1, #0
 80008ee:	e74e      	b.n	800078e <__udivmoddi4+0xa2>
 80008f0:	fbb1 fcf2 	udiv	ip, r1, r2
 80008f4:	0c01      	lsrs	r1, r0, #16
 80008f6:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80008fa:	b280      	uxth	r0, r0
 80008fc:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000900:	463b      	mov	r3, r7
 8000902:	fbb1 f1f7 	udiv	r1, r1, r7
 8000906:	4638      	mov	r0, r7
 8000908:	463c      	mov	r4, r7
 800090a:	46b8      	mov	r8, r7
 800090c:	46be      	mov	lr, r7
 800090e:	2620      	movs	r6, #32
 8000910:	eba2 0208 	sub.w	r2, r2, r8
 8000914:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000918:	e765      	b.n	80007e6 <__udivmoddi4+0xfa>
 800091a:	4601      	mov	r1, r0
 800091c:	e717      	b.n	800074e <__udivmoddi4+0x62>
 800091e:	4610      	mov	r0, r2
 8000920:	e72b      	b.n	800077a <__udivmoddi4+0x8e>
 8000922:	f1c6 0120 	rsb	r1, r6, #32
 8000926:	fa2e fc01 	lsr.w	ip, lr, r1
 800092a:	40b7      	lsls	r7, r6
 800092c:	fa0e fe06 	lsl.w	lr, lr, r6
 8000930:	fa20 f101 	lsr.w	r1, r0, r1
 8000934:	ea41 010e 	orr.w	r1, r1, lr
 8000938:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800093c:	fbbc f8fe 	udiv	r8, ip, lr
 8000940:	b2bc      	uxth	r4, r7
 8000942:	fb0e cc18 	mls	ip, lr, r8, ip
 8000946:	fb08 f904 	mul.w	r9, r8, r4
 800094a:	0c0a      	lsrs	r2, r1, #16
 800094c:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000950:	40b0      	lsls	r0, r6
 8000952:	4591      	cmp	r9, r2
 8000954:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000958:	b280      	uxth	r0, r0
 800095a:	d93e      	bls.n	80009da <__udivmoddi4+0x2ee>
 800095c:	18ba      	adds	r2, r7, r2
 800095e:	f108 3cff 	add.w	ip, r8, #4294967295
 8000962:	d201      	bcs.n	8000968 <__udivmoddi4+0x27c>
 8000964:	4591      	cmp	r9, r2
 8000966:	d81f      	bhi.n	80009a8 <__udivmoddi4+0x2bc>
 8000968:	eba2 0209 	sub.w	r2, r2, r9
 800096c:	fbb2 f9fe 	udiv	r9, r2, lr
 8000970:	fb09 f804 	mul.w	r8, r9, r4
 8000974:	fb0e 2a19 	mls	sl, lr, r9, r2
 8000978:	b28a      	uxth	r2, r1
 800097a:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 800097e:	4542      	cmp	r2, r8
 8000980:	d229      	bcs.n	80009d6 <__udivmoddi4+0x2ea>
 8000982:	18ba      	adds	r2, r7, r2
 8000984:	f109 31ff 	add.w	r1, r9, #4294967295
 8000988:	d2c2      	bcs.n	8000910 <__udivmoddi4+0x224>
 800098a:	4542      	cmp	r2, r8
 800098c:	d2c0      	bcs.n	8000910 <__udivmoddi4+0x224>
 800098e:	f1a9 0102 	sub.w	r1, r9, #2
 8000992:	443a      	add	r2, r7
 8000994:	e7bc      	b.n	8000910 <__udivmoddi4+0x224>
 8000996:	45c6      	cmp	lr, r8
 8000998:	d29b      	bcs.n	80008d2 <__udivmoddi4+0x1e6>
 800099a:	ebb8 0302 	subs.w	r3, r8, r2
 800099e:	eb6c 0c07 	sbc.w	ip, ip, r7
 80009a2:	3801      	subs	r0, #1
 80009a4:	46e1      	mov	r9, ip
 80009a6:	e794      	b.n	80008d2 <__udivmoddi4+0x1e6>
 80009a8:	eba7 0909 	sub.w	r9, r7, r9
 80009ac:	444a      	add	r2, r9
 80009ae:	fbb2 f9fe 	udiv	r9, r2, lr
 80009b2:	f1a8 0c02 	sub.w	ip, r8, #2
 80009b6:	fb09 f804 	mul.w	r8, r9, r4
 80009ba:	e7db      	b.n	8000974 <__udivmoddi4+0x288>
 80009bc:	4603      	mov	r3, r0
 80009be:	e77d      	b.n	80008bc <__udivmoddi4+0x1d0>
 80009c0:	46d0      	mov	r8, sl
 80009c2:	e765      	b.n	8000890 <__udivmoddi4+0x1a4>
 80009c4:	4608      	mov	r0, r1
 80009c6:	e6fa      	b.n	80007be <__udivmoddi4+0xd2>
 80009c8:	443b      	add	r3, r7
 80009ca:	3a02      	subs	r2, #2
 80009cc:	e730      	b.n	8000830 <__udivmoddi4+0x144>
 80009ce:	f1ac 0c02 	sub.w	ip, ip, #2
 80009d2:	443b      	add	r3, r7
 80009d4:	e719      	b.n	800080a <__udivmoddi4+0x11e>
 80009d6:	4649      	mov	r1, r9
 80009d8:	e79a      	b.n	8000910 <__udivmoddi4+0x224>
 80009da:	eba2 0209 	sub.w	r2, r2, r9
 80009de:	fbb2 f9fe 	udiv	r9, r2, lr
 80009e2:	46c4      	mov	ip, r8
 80009e4:	fb09 f804 	mul.w	r8, r9, r4
 80009e8:	e7c4      	b.n	8000974 <__udivmoddi4+0x288>
 80009ea:	bf00      	nop

080009ec <__aeabi_idiv0>:
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <CS_Select>:
static GPIO_TypeDef *bmp_cs_port;
static uint16_t bmp_cs_pin;
static BMP280_CalibData bmp_calib;
static int32_t t_fine;

static void CS_Select(void) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(bmp_cs_port, bmp_cs_pin, GPIO_PIN_RESET);
 80009f4:	4b04      	ldr	r3, [pc, #16]	@ (8000a08 <CS_Select+0x18>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a04      	ldr	r2, [pc, #16]	@ (8000a0c <CS_Select+0x1c>)
 80009fa:	8811      	ldrh	r1, [r2, #0]
 80009fc:	2200      	movs	r2, #0
 80009fe:	4618      	mov	r0, r3
 8000a00:	f002 f99d 	bl	8002d3e <HAL_GPIO_WritePin>
}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000038 	.word	0x20000038
 8000a0c:	2000003c 	.word	0x2000003c

08000a10 <CS_Unselect>:

static void CS_Unselect(void) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(bmp_cs_port, bmp_cs_pin, GPIO_PIN_SET);
 8000a14:	4b04      	ldr	r3, [pc, #16]	@ (8000a28 <CS_Unselect+0x18>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a04      	ldr	r2, [pc, #16]	@ (8000a2c <CS_Unselect+0x1c>)
 8000a1a:	8811      	ldrh	r1, [r2, #0]
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f002 f98d 	bl	8002d3e <HAL_GPIO_WritePin>
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000038 	.word	0x20000038
 8000a2c:	2000003c 	.word	0x2000003c

08000a30 <BMP280_Write8>:

static void BMP280_Write8(uint8_t reg, uint8_t value) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	460a      	mov	r2, r1
 8000a3a:	71fb      	strb	r3, [r7, #7]
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	71bb      	strb	r3, [r7, #6]
    uint8_t data[2] = {reg & 0x7F, value};
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	733b      	strb	r3, [r7, #12]
 8000a4a:	79bb      	ldrb	r3, [r7, #6]
 8000a4c:	737b      	strb	r3, [r7, #13]
    CS_Select();
 8000a4e:	f7ff ffcf 	bl	80009f0 <CS_Select>
    HAL_SPI_Transmit(bmp_spi, data, 2, HAL_MAX_DELAY);
 8000a52:	4b07      	ldr	r3, [pc, #28]	@ (8000a70 <BMP280_Write8+0x40>)
 8000a54:	6818      	ldr	r0, [r3, #0]
 8000a56:	f107 010c 	add.w	r1, r7, #12
 8000a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a5e:	2202      	movs	r2, #2
 8000a60:	f002 fed0 	bl	8003804 <HAL_SPI_Transmit>
    CS_Unselect();
 8000a64:	f7ff ffd4 	bl	8000a10 <CS_Unselect>
}
 8000a68:	bf00      	nop
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000034 	.word	0x20000034

08000a74 <BMP280_ReadBytes>:

static void BMP280_ReadBytes(uint8_t reg, uint8_t *buffer, uint16_t length) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	6039      	str	r1, [r7, #0]
 8000a7e:	71fb      	strb	r3, [r7, #7]
 8000a80:	4613      	mov	r3, r2
 8000a82:	80bb      	strh	r3, [r7, #4]
    reg |= 0x80; // Set read bit
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	71fb      	strb	r3, [r7, #7]
    CS_Select();
 8000a8e:	f7ff ffaf 	bl	80009f0 <CS_Select>
    HAL_SPI_Transmit(bmp_spi, &reg, 1, HAL_MAX_DELAY);
 8000a92:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac0 <BMP280_ReadBytes+0x4c>)
 8000a94:	6818      	ldr	r0, [r3, #0]
 8000a96:	1df9      	adds	r1, r7, #7
 8000a98:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	f002 feb1 	bl	8003804 <HAL_SPI_Transmit>
    HAL_SPI_Receive(bmp_spi, buffer, length, HAL_MAX_DELAY);
 8000aa2:	4b07      	ldr	r3, [pc, #28]	@ (8000ac0 <BMP280_ReadBytes+0x4c>)
 8000aa4:	6818      	ldr	r0, [r3, #0]
 8000aa6:	88ba      	ldrh	r2, [r7, #4]
 8000aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8000aac:	6839      	ldr	r1, [r7, #0]
 8000aae:	f002 ffed 	bl	8003a8c <HAL_SPI_Receive>
    CS_Unselect();
 8000ab2:	f7ff ffad 	bl	8000a10 <CS_Unselect>
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000034 	.word	0x20000034

08000ac4 <BMP280_ReadCalibration>:

static void BMP280_ReadCalibration(void) {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af00      	add	r7, sp, #0
    uint8_t calib[24];
    BMP280_ReadBytes(BMP280_REG_CALIB_START, calib, 24);
 8000aca:	463b      	mov	r3, r7
 8000acc:	2218      	movs	r2, #24
 8000ace:	4619      	mov	r1, r3
 8000ad0:	2088      	movs	r0, #136	@ 0x88
 8000ad2:	f7ff ffcf 	bl	8000a74 <BMP280_ReadBytes>

    bmp_calib.dig_T1 = (uint16_t)(calib[1] << 8 | calib[0]);
 8000ad6:	787b      	ldrb	r3, [r7, #1]
 8000ad8:	b21b      	sxth	r3, r3
 8000ada:	021b      	lsls	r3, r3, #8
 8000adc:	b21a      	sxth	r2, r3
 8000ade:	783b      	ldrb	r3, [r7, #0]
 8000ae0:	b21b      	sxth	r3, r3
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	b21b      	sxth	r3, r3
 8000ae6:	b29a      	uxth	r2, r3
 8000ae8:	4b3a      	ldr	r3, [pc, #232]	@ (8000bd4 <BMP280_ReadCalibration+0x110>)
 8000aea:	801a      	strh	r2, [r3, #0]
    bmp_calib.dig_T2 = (int16_t)(calib[3] << 8 | calib[2]);
 8000aec:	78fb      	ldrb	r3, [r7, #3]
 8000aee:	b21b      	sxth	r3, r3
 8000af0:	021b      	lsls	r3, r3, #8
 8000af2:	b21a      	sxth	r2, r3
 8000af4:	78bb      	ldrb	r3, [r7, #2]
 8000af6:	b21b      	sxth	r3, r3
 8000af8:	4313      	orrs	r3, r2
 8000afa:	b21a      	sxth	r2, r3
 8000afc:	4b35      	ldr	r3, [pc, #212]	@ (8000bd4 <BMP280_ReadCalibration+0x110>)
 8000afe:	805a      	strh	r2, [r3, #2]
    bmp_calib.dig_T3 = (int16_t)(calib[5] << 8 | calib[4]);
 8000b00:	797b      	ldrb	r3, [r7, #5]
 8000b02:	b21b      	sxth	r3, r3
 8000b04:	021b      	lsls	r3, r3, #8
 8000b06:	b21a      	sxth	r2, r3
 8000b08:	793b      	ldrb	r3, [r7, #4]
 8000b0a:	b21b      	sxth	r3, r3
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	b21a      	sxth	r2, r3
 8000b10:	4b30      	ldr	r3, [pc, #192]	@ (8000bd4 <BMP280_ReadCalibration+0x110>)
 8000b12:	809a      	strh	r2, [r3, #4]

    bmp_calib.dig_P1 = (uint16_t)(calib[7] << 8 | calib[6]);
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	b21b      	sxth	r3, r3
 8000b18:	021b      	lsls	r3, r3, #8
 8000b1a:	b21a      	sxth	r2, r3
 8000b1c:	79bb      	ldrb	r3, [r7, #6]
 8000b1e:	b21b      	sxth	r3, r3
 8000b20:	4313      	orrs	r3, r2
 8000b22:	b21b      	sxth	r3, r3
 8000b24:	b29a      	uxth	r2, r3
 8000b26:	4b2b      	ldr	r3, [pc, #172]	@ (8000bd4 <BMP280_ReadCalibration+0x110>)
 8000b28:	80da      	strh	r2, [r3, #6]
    bmp_calib.dig_P2 = (int16_t)(calib[9] << 8 | calib[8]);
 8000b2a:	7a7b      	ldrb	r3, [r7, #9]
 8000b2c:	b21b      	sxth	r3, r3
 8000b2e:	021b      	lsls	r3, r3, #8
 8000b30:	b21a      	sxth	r2, r3
 8000b32:	7a3b      	ldrb	r3, [r7, #8]
 8000b34:	b21b      	sxth	r3, r3
 8000b36:	4313      	orrs	r3, r2
 8000b38:	b21a      	sxth	r2, r3
 8000b3a:	4b26      	ldr	r3, [pc, #152]	@ (8000bd4 <BMP280_ReadCalibration+0x110>)
 8000b3c:	811a      	strh	r2, [r3, #8]
    bmp_calib.dig_P3 = (int16_t)(calib[11] << 8 | calib[10]);
 8000b3e:	7afb      	ldrb	r3, [r7, #11]
 8000b40:	b21b      	sxth	r3, r3
 8000b42:	021b      	lsls	r3, r3, #8
 8000b44:	b21a      	sxth	r2, r3
 8000b46:	7abb      	ldrb	r3, [r7, #10]
 8000b48:	b21b      	sxth	r3, r3
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	b21a      	sxth	r2, r3
 8000b4e:	4b21      	ldr	r3, [pc, #132]	@ (8000bd4 <BMP280_ReadCalibration+0x110>)
 8000b50:	815a      	strh	r2, [r3, #10]
    bmp_calib.dig_P4 = (int16_t)(calib[13] << 8 | calib[12]);
 8000b52:	7b7b      	ldrb	r3, [r7, #13]
 8000b54:	b21b      	sxth	r3, r3
 8000b56:	021b      	lsls	r3, r3, #8
 8000b58:	b21a      	sxth	r2, r3
 8000b5a:	7b3b      	ldrb	r3, [r7, #12]
 8000b5c:	b21b      	sxth	r3, r3
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	b21a      	sxth	r2, r3
 8000b62:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd4 <BMP280_ReadCalibration+0x110>)
 8000b64:	819a      	strh	r2, [r3, #12]
    bmp_calib.dig_P5 = (int16_t)(calib[15] << 8 | calib[14]);
 8000b66:	7bfb      	ldrb	r3, [r7, #15]
 8000b68:	b21b      	sxth	r3, r3
 8000b6a:	021b      	lsls	r3, r3, #8
 8000b6c:	b21a      	sxth	r2, r3
 8000b6e:	7bbb      	ldrb	r3, [r7, #14]
 8000b70:	b21b      	sxth	r3, r3
 8000b72:	4313      	orrs	r3, r2
 8000b74:	b21a      	sxth	r2, r3
 8000b76:	4b17      	ldr	r3, [pc, #92]	@ (8000bd4 <BMP280_ReadCalibration+0x110>)
 8000b78:	81da      	strh	r2, [r3, #14]
    bmp_calib.dig_P6 = (int16_t)(calib[17] << 8 | calib[16]);
 8000b7a:	7c7b      	ldrb	r3, [r7, #17]
 8000b7c:	b21b      	sxth	r3, r3
 8000b7e:	021b      	lsls	r3, r3, #8
 8000b80:	b21a      	sxth	r2, r3
 8000b82:	7c3b      	ldrb	r3, [r7, #16]
 8000b84:	b21b      	sxth	r3, r3
 8000b86:	4313      	orrs	r3, r2
 8000b88:	b21a      	sxth	r2, r3
 8000b8a:	4b12      	ldr	r3, [pc, #72]	@ (8000bd4 <BMP280_ReadCalibration+0x110>)
 8000b8c:	821a      	strh	r2, [r3, #16]
    bmp_calib.dig_P7 = (int16_t)(calib[19] << 8 | calib[18]);
 8000b8e:	7cfb      	ldrb	r3, [r7, #19]
 8000b90:	b21b      	sxth	r3, r3
 8000b92:	021b      	lsls	r3, r3, #8
 8000b94:	b21a      	sxth	r2, r3
 8000b96:	7cbb      	ldrb	r3, [r7, #18]
 8000b98:	b21b      	sxth	r3, r3
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	b21a      	sxth	r2, r3
 8000b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd4 <BMP280_ReadCalibration+0x110>)
 8000ba0:	825a      	strh	r2, [r3, #18]
    bmp_calib.dig_P8 = (int16_t)(calib[21] << 8 | calib[20]);
 8000ba2:	7d7b      	ldrb	r3, [r7, #21]
 8000ba4:	b21b      	sxth	r3, r3
 8000ba6:	021b      	lsls	r3, r3, #8
 8000ba8:	b21a      	sxth	r2, r3
 8000baa:	7d3b      	ldrb	r3, [r7, #20]
 8000bac:	b21b      	sxth	r3, r3
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	b21a      	sxth	r2, r3
 8000bb2:	4b08      	ldr	r3, [pc, #32]	@ (8000bd4 <BMP280_ReadCalibration+0x110>)
 8000bb4:	829a      	strh	r2, [r3, #20]
    bmp_calib.dig_P9 = (int16_t)(calib[23] << 8 | calib[22]);
 8000bb6:	7dfb      	ldrb	r3, [r7, #23]
 8000bb8:	b21b      	sxth	r3, r3
 8000bba:	021b      	lsls	r3, r3, #8
 8000bbc:	b21a      	sxth	r2, r3
 8000bbe:	7dbb      	ldrb	r3, [r7, #22]
 8000bc0:	b21b      	sxth	r3, r3
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	b21a      	sxth	r2, r3
 8000bc6:	4b03      	ldr	r3, [pc, #12]	@ (8000bd4 <BMP280_ReadCalibration+0x110>)
 8000bc8:	82da      	strh	r2, [r3, #22]
}
 8000bca:	bf00      	nop
 8000bcc:	3718      	adds	r7, #24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000040 	.word	0x20000040

08000bd8 <BMP280_SPI_Init>:

void BMP280_SPI_Init(SPI_HandleTypeDef *hspi, GPIO_TypeDef *cs_port, uint16_t cs_pin) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	4613      	mov	r3, r2
 8000be4:	80fb      	strh	r3, [r7, #6]
    bmp_spi = hspi;
 8000be6:	4a18      	ldr	r2, [pc, #96]	@ (8000c48 <BMP280_SPI_Init+0x70>)
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	6013      	str	r3, [r2, #0]
    bmp_cs_port = cs_port;
 8000bec:	4a17      	ldr	r2, [pc, #92]	@ (8000c4c <BMP280_SPI_Init+0x74>)
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	6013      	str	r3, [r2, #0]
    bmp_cs_pin = cs_pin;
 8000bf2:	4a17      	ldr	r2, [pc, #92]	@ (8000c50 <BMP280_SPI_Init+0x78>)
 8000bf4:	88fb      	ldrh	r3, [r7, #6]
 8000bf6:	8013      	strh	r3, [r2, #0]

    CS_Unselect();
 8000bf8:	f7ff ff0a 	bl	8000a10 <CS_Unselect>
    HAL_Delay(100);
 8000bfc:	2064      	movs	r0, #100	@ 0x64
 8000bfe:	f001 f9cf 	bl	8001fa0 <HAL_Delay>

    // Reset sensor
    BMP280_Write8(BMP280_REG_RESET, 0xB6);
 8000c02:	21b6      	movs	r1, #182	@ 0xb6
 8000c04:	20e0      	movs	r0, #224	@ 0xe0
 8000c06:	f7ff ff13 	bl	8000a30 <BMP280_Write8>
    HAL_Delay(100);
 8000c0a:	2064      	movs	r0, #100	@ 0x64
 8000c0c:	f001 f9c8 	bl	8001fa0 <HAL_Delay>

    uint8_t id = 0;
 8000c10:	2300      	movs	r3, #0
 8000c12:	75fb      	strb	r3, [r7, #23]
    BMP280_ReadBytes(BMP280_REG_ID, &id, 1);
 8000c14:	f107 0317 	add.w	r3, r7, #23
 8000c18:	2201      	movs	r2, #1
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	20d0      	movs	r0, #208	@ 0xd0
 8000c1e:	f7ff ff29 	bl	8000a74 <BMP280_ReadBytes>
    if (id != 0x58) {
 8000c22:	7dfb      	ldrb	r3, [r7, #23]
 8000c24:	2b58      	cmp	r3, #88	@ 0x58
 8000c26:	d001      	beq.n	8000c2c <BMP280_SPI_Init+0x54>
        // ID incorrecto, colgarse
        while(1);
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <BMP280_SPI_Init+0x50>
    }

    BMP280_ReadCalibration();
 8000c2c:	f7ff ff4a 	bl	8000ac4 <BMP280_ReadCalibration>

    // Configurar oversampling x1 para temperatura y presion, modo normal
    BMP280_Write8(BMP280_REG_CTRL_MEAS, 0x27);
 8000c30:	2127      	movs	r1, #39	@ 0x27
 8000c32:	20f4      	movs	r0, #244	@ 0xf4
 8000c34:	f7ff fefc 	bl	8000a30 <BMP280_Write8>
    // Configurar tiempo de espera y filtro (tiempo standby 0.5ms, filtro off)
    BMP280_Write8(BMP280_REG_CONFIG, 0x00);
 8000c38:	2100      	movs	r1, #0
 8000c3a:	20f5      	movs	r0, #245	@ 0xf5
 8000c3c:	f7ff fef8 	bl	8000a30 <BMP280_Write8>
}
 8000c40:	bf00      	nop
 8000c42:	3718      	adds	r7, #24
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000034 	.word	0x20000034
 8000c4c:	20000038 	.word	0x20000038
 8000c50:	2000003c 	.word	0x2000003c

08000c54 <BMP280_ReadTemperature>:

float BMP280_ReadTemperature(void) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
    uint8_t data[3];
    BMP280_ReadBytes(BMP280_REG_TEMP_MSB, data, 3);
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	2203      	movs	r2, #3
 8000c5e:	4619      	mov	r1, r3
 8000c60:	20fa      	movs	r0, #250	@ 0xfa
 8000c62:	f7ff ff07 	bl	8000a74 <BMP280_ReadBytes>
    int32_t adc_T = ((int32_t)data[0] << 12) | ((int32_t)data[1] << 4) | (data[2] >> 4);
 8000c66:	793b      	ldrb	r3, [r7, #4]
 8000c68:	031a      	lsls	r2, r3, #12
 8000c6a:	797b      	ldrb	r3, [r7, #5]
 8000c6c:	011b      	lsls	r3, r3, #4
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	79ba      	ldrb	r2, [r7, #6]
 8000c72:	0912      	lsrs	r2, r2, #4
 8000c74:	b2d2      	uxtb	r2, r2
 8000c76:	4313      	orrs	r3, r2
 8000c78:	617b      	str	r3, [r7, #20]

    int32_t var1 = ((((adc_T >> 3) - ((int32_t)bmp_calib.dig_T1 << 1))) * ((int32_t)bmp_calib.dig_T2)) >> 11;
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	10da      	asrs	r2, r3, #3
 8000c7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf0 <BMP280_ReadTemperature+0x9c>)
 8000c80:	881b      	ldrh	r3, [r3, #0]
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	4a1a      	ldr	r2, [pc, #104]	@ (8000cf0 <BMP280_ReadTemperature+0x9c>)
 8000c88:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000c8c:	fb02 f303 	mul.w	r3, r2, r3
 8000c90:	12db      	asrs	r3, r3, #11
 8000c92:	613b      	str	r3, [r7, #16]
    int32_t var2 = (((((adc_T >> 4) - ((int32_t)bmp_calib.dig_T1)) * ((adc_T >> 4) - ((int32_t)bmp_calib.dig_T1))) >> 12) * ((int32_t)bmp_calib.dig_T3)) >> 14;
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	111b      	asrs	r3, r3, #4
 8000c98:	4a15      	ldr	r2, [pc, #84]	@ (8000cf0 <BMP280_ReadTemperature+0x9c>)
 8000c9a:	8812      	ldrh	r2, [r2, #0]
 8000c9c:	1a9b      	subs	r3, r3, r2
 8000c9e:	697a      	ldr	r2, [r7, #20]
 8000ca0:	1112      	asrs	r2, r2, #4
 8000ca2:	4913      	ldr	r1, [pc, #76]	@ (8000cf0 <BMP280_ReadTemperature+0x9c>)
 8000ca4:	8809      	ldrh	r1, [r1, #0]
 8000ca6:	1a52      	subs	r2, r2, r1
 8000ca8:	fb02 f303 	mul.w	r3, r2, r3
 8000cac:	131b      	asrs	r3, r3, #12
 8000cae:	4a10      	ldr	r2, [pc, #64]	@ (8000cf0 <BMP280_ReadTemperature+0x9c>)
 8000cb0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000cb4:	fb02 f303 	mul.w	r3, r2, r3
 8000cb8:	139b      	asrs	r3, r3, #14
 8000cba:	60fb      	str	r3, [r7, #12]

    t_fine = var1 + var2;
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	4a0c      	ldr	r2, [pc, #48]	@ (8000cf4 <BMP280_ReadTemperature+0xa0>)
 8000cc4:	6013      	str	r3, [r2, #0]

    float T = (t_fine * 5 + 128) >> 8;
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf4 <BMP280_ReadTemperature+0xa0>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	4613      	mov	r3, r2
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	4413      	add	r3, r2
 8000cd0:	3380      	adds	r3, #128	@ 0x80
 8000cd2:	121b      	asrs	r3, r3, #8
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff faf5 	bl	80002c4 <__aeabi_i2f>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	60bb      	str	r3, [r7, #8]
    return T / 100.0f;
 8000cde:	4906      	ldr	r1, [pc, #24]	@ (8000cf8 <BMP280_ReadTemperature+0xa4>)
 8000ce0:	68b8      	ldr	r0, [r7, #8]
 8000ce2:	f7ff fbf7 	bl	80004d4 <__aeabi_fdiv>
 8000ce6:	4603      	mov	r3, r0
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3718      	adds	r7, #24
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000040 	.word	0x20000040
 8000cf4:	20000058 	.word	0x20000058
 8000cf8:	42c80000 	.word	0x42c80000

08000cfc <BMP280_ReadPressure>:

float BMP280_ReadPressure(void) {
 8000cfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000d00:	b0cc      	sub	sp, #304	@ 0x130
 8000d02:	af00      	add	r7, sp, #0
    uint8_t data[3];
    BMP280_ReadBytes(BMP280_REG_PRESS_MSB, data, 3);
 8000d04:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000d08:	2203      	movs	r2, #3
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	20f7      	movs	r0, #247	@ 0xf7
 8000d0e:	f7ff feb1 	bl	8000a74 <BMP280_ReadBytes>
    int32_t adc_P = ((int32_t)data[0] << 12) | ((int32_t)data[1] << 4) | (data[2] >> 4);
 8000d12:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 8000d16:	031a      	lsls	r2, r3, #12
 8000d18:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8000d1c:	011b      	lsls	r3, r3, #4
 8000d1e:	431a      	orrs	r2, r3
 8000d20:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8000d24:	091b      	lsrs	r3, r3, #4
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

    int64_t var1 = ((int64_t)t_fine) - 128000;
 8000d2e:	4bac      	ldr	r3, [pc, #688]	@ (8000fe0 <BMP280_ReadPressure+0x2e4>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	17da      	asrs	r2, r3, #31
 8000d34:	469a      	mov	sl, r3
 8000d36:	4693      	mov	fp, r2
 8000d38:	f5ba 33fa 	subs.w	r3, sl, #128000	@ 0x1f400
 8000d3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000d3e:	f14b 33ff 	adc.w	r3, fp, #4294967295
 8000d42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000d44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8000d48:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
    int64_t var2 = var1 * var1 * (int64_t)bmp_calib.dig_P6;
 8000d4c:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000d50:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000d54:	fb03 f102 	mul.w	r1, r3, r2
 8000d58:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000d5c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000d60:	fb02 f303 	mul.w	r3, r2, r3
 8000d64:	18ca      	adds	r2, r1, r3
 8000d66:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000d6a:	fba3 4503 	umull	r4, r5, r3, r3
 8000d6e:	1953      	adds	r3, r2, r5
 8000d70:	461d      	mov	r5, r3
 8000d72:	4b9c      	ldr	r3, [pc, #624]	@ (8000fe4 <BMP280_ReadPressure+0x2e8>)
 8000d74:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000d78:	b21b      	sxth	r3, r3
 8000d7a:	17da      	asrs	r2, r3, #31
 8000d7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8000d80:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8000d84:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8000d88:	4603      	mov	r3, r0
 8000d8a:	fb03 f205 	mul.w	r2, r3, r5
 8000d8e:	460b      	mov	r3, r1
 8000d90:	fb04 f303 	mul.w	r3, r4, r3
 8000d94:	4413      	add	r3, r2
 8000d96:	4602      	mov	r2, r0
 8000d98:	fba4 8902 	umull	r8, r9, r4, r2
 8000d9c:	444b      	add	r3, r9
 8000d9e:	4699      	mov	r9, r3
 8000da0:	e9c7 8946 	strd	r8, r9, [r7, #280]	@ 0x118
 8000da4:	e9c7 8946 	strd	r8, r9, [r7, #280]	@ 0x118
    var2 = var2 + ((var1 * (int64_t)bmp_calib.dig_P5) << 17);
 8000da8:	4b8e      	ldr	r3, [pc, #568]	@ (8000fe4 <BMP280_ReadPressure+0x2e8>)
 8000daa:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000dae:	b21b      	sxth	r3, r3
 8000db0:	17da      	asrs	r2, r3, #31
 8000db2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000db6:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8000dba:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000dbe:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8000dc2:	462a      	mov	r2, r5
 8000dc4:	fb02 f203 	mul.w	r2, r2, r3
 8000dc8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000dcc:	4621      	mov	r1, r4
 8000dce:	fb01 f303 	mul.w	r3, r1, r3
 8000dd2:	441a      	add	r2, r3
 8000dd4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000dd8:	4621      	mov	r1, r4
 8000dda:	fba3 3101 	umull	r3, r1, r3, r1
 8000dde:	f8c7 1104 	str.w	r1, [r7, #260]	@ 0x104
 8000de2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8000de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000dea:	18d3      	adds	r3, r2, r3
 8000dec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000df0:	f04f 0000 	mov.w	r0, #0
 8000df4:	f04f 0100 	mov.w	r1, #0
 8000df8:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8000dfc:	462b      	mov	r3, r5
 8000dfe:	0459      	lsls	r1, r3, #17
 8000e00:	4622      	mov	r2, r4
 8000e02:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8000e06:	4623      	mov	r3, r4
 8000e08:	0458      	lsls	r0, r3, #17
 8000e0a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000e0e:	1814      	adds	r4, r2, r0
 8000e10:	643c      	str	r4, [r7, #64]	@ 0x40
 8000e12:	414b      	adcs	r3, r1
 8000e14:	647b      	str	r3, [r7, #68]	@ 0x44
 8000e16:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8000e1a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
    var2 = var2 + (((int64_t)bmp_calib.dig_P4) << 35);
 8000e1e:	4b71      	ldr	r3, [pc, #452]	@ (8000fe4 <BMP280_ReadPressure+0x2e8>)
 8000e20:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000e24:	b21b      	sxth	r3, r3
 8000e26:	17da      	asrs	r2, r3, #31
 8000e28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000e2c:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8000e30:	f04f 0000 	mov.w	r0, #0
 8000e34:	f04f 0100 	mov.w	r1, #0
 8000e38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000e3c:	00d9      	lsls	r1, r3, #3
 8000e3e:	2000      	movs	r0, #0
 8000e40:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000e44:	1814      	adds	r4, r2, r0
 8000e46:	63bc      	str	r4, [r7, #56]	@ 0x38
 8000e48:	414b      	adcs	r3, r1
 8000e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000e4c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8000e50:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
    var1 = ((var1 * var1 * (int64_t)bmp_calib.dig_P3) >> 8) + ((var1 * (int64_t)bmp_calib.dig_P2) << 12);
 8000e54:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000e58:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000e5c:	fb03 f102 	mul.w	r1, r3, r2
 8000e60:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000e64:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000e68:	fb02 f303 	mul.w	r3, r2, r3
 8000e6c:	18ca      	adds	r2, r1, r3
 8000e6e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000e72:	fba3 3103 	umull	r3, r1, r3, r3
 8000e76:	f8c7 10fc 	str.w	r1, [r7, #252]	@ 0xfc
 8000e7a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000e7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000e82:	18d3      	adds	r3, r2, r3
 8000e84:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000e88:	4b56      	ldr	r3, [pc, #344]	@ (8000fe4 <BMP280_ReadPressure+0x2e8>)
 8000e8a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000e8e:	b21b      	sxth	r3, r3
 8000e90:	17da      	asrs	r2, r3, #31
 8000e92:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000e96:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8000e9a:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	@ 0xf8
 8000e9e:	4622      	mov	r2, r4
 8000ea0:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8000ea4:	4641      	mov	r1, r8
 8000ea6:	fb01 f202 	mul.w	r2, r1, r2
 8000eaa:	464d      	mov	r5, r9
 8000eac:	4618      	mov	r0, r3
 8000eae:	4621      	mov	r1, r4
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	fb03 f305 	mul.w	r3, r3, r5
 8000eb6:	4413      	add	r3, r2
 8000eb8:	4602      	mov	r2, r0
 8000eba:	4641      	mov	r1, r8
 8000ebc:	fba2 2101 	umull	r2, r1, r2, r1
 8000ec0:	f8c7 10f4 	str.w	r1, [r7, #244]	@ 0xf4
 8000ec4:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8000ec8:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000ecc:	4413      	add	r3, r2
 8000ece:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8000ed2:	f04f 0000 	mov.w	r0, #0
 8000ed6:	f04f 0100 	mov.w	r1, #0
 8000eda:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8000ede:	4623      	mov	r3, r4
 8000ee0:	0a18      	lsrs	r0, r3, #8
 8000ee2:	462a      	mov	r2, r5
 8000ee4:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8000ee8:	462b      	mov	r3, r5
 8000eea:	1219      	asrs	r1, r3, #8
 8000eec:	4b3d      	ldr	r3, [pc, #244]	@ (8000fe4 <BMP280_ReadPressure+0x2e8>)
 8000eee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000ef2:	b21b      	sxth	r3, r3
 8000ef4:	17da      	asrs	r2, r3, #31
 8000ef6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000efa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8000efe:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000f02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8000f06:	464a      	mov	r2, r9
 8000f08:	fb02 f203 	mul.w	r2, r2, r3
 8000f0c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000f10:	4644      	mov	r4, r8
 8000f12:	fb04 f303 	mul.w	r3, r4, r3
 8000f16:	441a      	add	r2, r3
 8000f18:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000f1c:	4644      	mov	r4, r8
 8000f1e:	fba3 3404 	umull	r3, r4, r3, r4
 8000f22:	f8c7 40ec 	str.w	r4, [r7, #236]	@ 0xec
 8000f26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8000f2a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000f2e:	18d3      	adds	r3, r2, r3
 8000f30:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000f34:	f04f 0200 	mov.w	r2, #0
 8000f38:	f04f 0300 	mov.w	r3, #0
 8000f3c:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8000f40:	464c      	mov	r4, r9
 8000f42:	0323      	lsls	r3, r4, #12
 8000f44:	46c4      	mov	ip, r8
 8000f46:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 8000f4a:	4644      	mov	r4, r8
 8000f4c:	0322      	lsls	r2, r4, #12
 8000f4e:	1884      	adds	r4, r0, r2
 8000f50:	633c      	str	r4, [r7, #48]	@ 0x30
 8000f52:	eb41 0303 	adc.w	r3, r1, r3
 8000f56:	637b      	str	r3, [r7, #52]	@ 0x34
 8000f58:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8000f5c:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
    var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)bmp_calib.dig_P1) >> 33;
 8000f60:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000f64:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8000f68:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 8000f6c:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8000f70:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe4 <BMP280_ReadPressure+0x2e8>)
 8000f72:	88db      	ldrh	r3, [r3, #6]
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	2200      	movs	r2, #0
 8000f78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000f7c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8000f80:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 8000f84:	4622      	mov	r2, r4
 8000f86:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8000f8a:	4641      	mov	r1, r8
 8000f8c:	fb01 f202 	mul.w	r2, r1, r2
 8000f90:	464d      	mov	r5, r9
 8000f92:	4618      	mov	r0, r3
 8000f94:	4621      	mov	r1, r4
 8000f96:	4603      	mov	r3, r0
 8000f98:	fb03 f305 	mul.w	r3, r3, r5
 8000f9c:	4413      	add	r3, r2
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	4641      	mov	r1, r8
 8000fa2:	fba2 2101 	umull	r2, r1, r2, r1
 8000fa6:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 8000faa:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8000fae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000fb2:	4413      	add	r3, r2
 8000fb4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8000fb8:	f04f 0200 	mov.w	r2, #0
 8000fbc:	f04f 0300 	mov.w	r3, #0
 8000fc0:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8000fc4:	4629      	mov	r1, r5
 8000fc6:	104a      	asrs	r2, r1, #1
 8000fc8:	4629      	mov	r1, r5
 8000fca:	17cb      	asrs	r3, r1, #31
 8000fcc:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

    if (var1 == 0) return 0;
 8000fd0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	d107      	bne.n	8000fe8 <BMP280_ReadPressure+0x2ec>
 8000fd8:	f04f 0300 	mov.w	r3, #0
 8000fdc:	e152      	b.n	8001284 <BMP280_ReadPressure+0x588>
 8000fde:	bf00      	nop
 8000fe0:	20000058 	.word	0x20000058
 8000fe4:	20000040 	.word	0x20000040

    int64_t p = 1048576 - adc_P;
 8000fe8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000fec:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8000ff0:	17da      	asrs	r2, r3, #31
 8000ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ff4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000ff6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8000ffa:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
    p = (((p << 31) - var2) * 3125) / var1;
 8000ffe:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001002:	105b      	asrs	r3, r3, #1
 8001004:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001008:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800100c:	07db      	lsls	r3, r3, #31
 800100e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001012:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001016:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800101a:	4604      	mov	r4, r0
 800101c:	1aa4      	subs	r4, r4, r2
 800101e:	f8c7 4080 	str.w	r4, [r7, #128]	@ 0x80
 8001022:	eb61 0303 	sbc.w	r3, r1, r3
 8001026:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800102a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800102e:	4622      	mov	r2, r4
 8001030:	462b      	mov	r3, r5
 8001032:	1891      	adds	r1, r2, r2
 8001034:	6239      	str	r1, [r7, #32]
 8001036:	415b      	adcs	r3, r3
 8001038:	627b      	str	r3, [r7, #36]	@ 0x24
 800103a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800103e:	4621      	mov	r1, r4
 8001040:	1851      	adds	r1, r2, r1
 8001042:	61b9      	str	r1, [r7, #24]
 8001044:	4629      	mov	r1, r5
 8001046:	414b      	adcs	r3, r1
 8001048:	61fb      	str	r3, [r7, #28]
 800104a:	f04f 0200 	mov.w	r2, #0
 800104e:	f04f 0300 	mov.w	r3, #0
 8001052:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001056:	4649      	mov	r1, r9
 8001058:	018b      	lsls	r3, r1, #6
 800105a:	4641      	mov	r1, r8
 800105c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001060:	4641      	mov	r1, r8
 8001062:	018a      	lsls	r2, r1, #6
 8001064:	4641      	mov	r1, r8
 8001066:	1889      	adds	r1, r1, r2
 8001068:	6139      	str	r1, [r7, #16]
 800106a:	4649      	mov	r1, r9
 800106c:	eb43 0101 	adc.w	r1, r3, r1
 8001070:	6179      	str	r1, [r7, #20]
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800107e:	4649      	mov	r1, r9
 8001080:	008b      	lsls	r3, r1, #2
 8001082:	46c4      	mov	ip, r8
 8001084:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001088:	4641      	mov	r1, r8
 800108a:	008a      	lsls	r2, r1, #2
 800108c:	4610      	mov	r0, r2
 800108e:	4619      	mov	r1, r3
 8001090:	4603      	mov	r3, r0
 8001092:	4622      	mov	r2, r4
 8001094:	189b      	adds	r3, r3, r2
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	460b      	mov	r3, r1
 800109a:	462a      	mov	r2, r5
 800109c:	eb42 0303 	adc.w	r3, r2, r3
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	f04f 0200 	mov.w	r2, #0
 80010a6:	f04f 0300 	mov.w	r3, #0
 80010aa:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80010ae:	4649      	mov	r1, r9
 80010b0:	008b      	lsls	r3, r1, #2
 80010b2:	46c4      	mov	ip, r8
 80010b4:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 80010b8:	4641      	mov	r1, r8
 80010ba:	008a      	lsls	r2, r1, #2
 80010bc:	4610      	mov	r0, r2
 80010be:	4619      	mov	r1, r3
 80010c0:	4603      	mov	r3, r0
 80010c2:	4622      	mov	r2, r4
 80010c4:	189b      	adds	r3, r3, r2
 80010c6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80010c8:	462b      	mov	r3, r5
 80010ca:	460a      	mov	r2, r1
 80010cc:	eb42 0303 	adc.w	r3, r2, r3
 80010d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80010d2:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80010d6:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80010da:	f7ff fab7 	bl	800064c <__aeabi_ldivmod>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
    var1 = (((int64_t)bmp_calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 80010e6:	4b6a      	ldr	r3, [pc, #424]	@ (8001290 <BMP280_ReadPressure+0x594>)
 80010e8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80010ec:	b21b      	sxth	r3, r3
 80010ee:	17da      	asrs	r2, r3, #31
 80010f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80010f2:	677a      	str	r2, [r7, #116]	@ 0x74
 80010f4:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80010f8:	f04f 0000 	mov.w	r0, #0
 80010fc:	f04f 0100 	mov.w	r1, #0
 8001100:	0b50      	lsrs	r0, r2, #13
 8001102:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001106:	1359      	asrs	r1, r3, #13
 8001108:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 800110c:	462b      	mov	r3, r5
 800110e:	fb00 f203 	mul.w	r2, r0, r3
 8001112:	4623      	mov	r3, r4
 8001114:	fb03 f301 	mul.w	r3, r3, r1
 8001118:	4413      	add	r3, r2
 800111a:	4622      	mov	r2, r4
 800111c:	fba2 2100 	umull	r2, r1, r2, r0
 8001120:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
 8001124:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001128:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800112c:	4413      	add	r3, r2
 800112e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001132:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001136:	f04f 0000 	mov.w	r0, #0
 800113a:	f04f 0100 	mov.w	r1, #0
 800113e:	0b50      	lsrs	r0, r2, #13
 8001140:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001144:	1359      	asrs	r1, r3, #13
 8001146:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 800114a:	462b      	mov	r3, r5
 800114c:	fb00 f203 	mul.w	r2, r0, r3
 8001150:	4623      	mov	r3, r4
 8001152:	fb03 f301 	mul.w	r3, r3, r1
 8001156:	4413      	add	r3, r2
 8001158:	4622      	mov	r2, r4
 800115a:	fba2 2100 	umull	r2, r1, r2, r0
 800115e:	f8c7 10d4 	str.w	r1, [r7, #212]	@ 0xd4
 8001162:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001166:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800116a:	4413      	add	r3, r2
 800116c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001170:	f04f 0200 	mov.w	r2, #0
 8001174:	f04f 0300 	mov.w	r3, #0
 8001178:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 800117c:	4621      	mov	r1, r4
 800117e:	0e4a      	lsrs	r2, r1, #25
 8001180:	4620      	mov	r0, r4
 8001182:	4629      	mov	r1, r5
 8001184:	460c      	mov	r4, r1
 8001186:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 800118a:	164b      	asrs	r3, r1, #25
 800118c:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
    var2 = (((int64_t)bmp_calib.dig_P8) * p) >> 19;
 8001190:	4b3f      	ldr	r3, [pc, #252]	@ (8001290 <BMP280_ReadPressure+0x594>)
 8001192:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001196:	b21b      	sxth	r3, r3
 8001198:	17da      	asrs	r2, r3, #31
 800119a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800119c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800119e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80011a2:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 80011a6:	462a      	mov	r2, r5
 80011a8:	fb02 f203 	mul.w	r2, r2, r3
 80011ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80011b0:	4621      	mov	r1, r4
 80011b2:	fb01 f303 	mul.w	r3, r1, r3
 80011b6:	4413      	add	r3, r2
 80011b8:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80011bc:	4621      	mov	r1, r4
 80011be:	fba2 2101 	umull	r2, r1, r2, r1
 80011c2:	f8c7 10cc 	str.w	r1, [r7, #204]	@ 0xcc
 80011c6:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 80011ca:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80011ce:	4413      	add	r3, r2
 80011d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80011d4:	f04f 0200 	mov.w	r2, #0
 80011d8:	f04f 0300 	mov.w	r3, #0
 80011dc:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 80011e0:	4621      	mov	r1, r4
 80011e2:	0cca      	lsrs	r2, r1, #19
 80011e4:	4620      	mov	r0, r4
 80011e6:	4629      	mov	r1, r5
 80011e8:	460c      	mov	r4, r1
 80011ea:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 80011ee:	14cb      	asrs	r3, r1, #19
 80011f0:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118

    p = ((p + var1 + var2) >> 8) + (((int64_t)bmp_calib.dig_P7) << 4);
 80011f4:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 80011f8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80011fc:	1884      	adds	r4, r0, r2
 80011fe:	663c      	str	r4, [r7, #96]	@ 0x60
 8001200:	eb41 0303 	adc.w	r3, r1, r3
 8001204:	667b      	str	r3, [r7, #100]	@ 0x64
 8001206:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800120a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800120e:	4621      	mov	r1, r4
 8001210:	1889      	adds	r1, r1, r2
 8001212:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001214:	4629      	mov	r1, r5
 8001216:	eb43 0101 	adc.w	r1, r3, r1
 800121a:	65f9      	str	r1, [r7, #92]	@ 0x5c
 800121c:	f04f 0000 	mov.w	r0, #0
 8001220:	f04f 0100 	mov.w	r1, #0
 8001224:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001228:	4623      	mov	r3, r4
 800122a:	0a18      	lsrs	r0, r3, #8
 800122c:	462a      	mov	r2, r5
 800122e:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001232:	462b      	mov	r3, r5
 8001234:	1219      	asrs	r1, r3, #8
 8001236:	4b16      	ldr	r3, [pc, #88]	@ (8001290 <BMP280_ReadPressure+0x594>)
 8001238:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800123c:	b21b      	sxth	r3, r3
 800123e:	17da      	asrs	r2, r3, #31
 8001240:	653b      	str	r3, [r7, #80]	@ 0x50
 8001242:	657a      	str	r2, [r7, #84]	@ 0x54
 8001244:	f04f 0200 	mov.w	r2, #0
 8001248:	f04f 0300 	mov.w	r3, #0
 800124c:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001250:	464c      	mov	r4, r9
 8001252:	0123      	lsls	r3, r4, #4
 8001254:	46c4      	mov	ip, r8
 8001256:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 800125a:	4644      	mov	r4, r8
 800125c:	0122      	lsls	r2, r4, #4
 800125e:	1884      	adds	r4, r0, r2
 8001260:	603c      	str	r4, [r7, #0]
 8001262:	eb41 0303 	adc.w	r3, r1, r3
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	e9d7 3400 	ldrd	r3, r4, [r7]
 800126c:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
    return (float)p / 25600.0f; // hPa
 8001270:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001274:	f7ff f83c 	bl	80002f0 <__aeabi_l2f>
 8001278:	4603      	mov	r3, r0
 800127a:	4906      	ldr	r1, [pc, #24]	@ (8001294 <BMP280_ReadPressure+0x598>)
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff f929 	bl	80004d4 <__aeabi_fdiv>
 8001282:	4603      	mov	r3, r0
}
 8001284:	4618      	mov	r0, r3
 8001286:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800128a:	46bd      	mov	sp, r7
 800128c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001290:	20000040 	.word	0x20000040
 8001294:	46c80000 	.word	0x46c80000

08001298 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	4a06      	ldr	r2, [pc, #24]	@ (80012c0 <vApplicationGetIdleTaskMemory+0x28>)
 80012a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	4a05      	ldr	r2, [pc, #20]	@ (80012c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80012ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2280      	movs	r2, #128	@ 0x80
 80012b4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80012b6:	bf00      	nop
 80012b8:	3714      	adds	r7, #20
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr
 80012c0:	2000005c 	.word	0x2000005c
 80012c4:	200000b0 	.word	0x200000b0

080012c8 <calcular_crc>:
void StartDefaultTask(void const * argument);
void StartEntradasTask(void const * argument);
void StartUartTask(void const * argument);

// Función para calcular CRC-8
uint8_t calcular_crc(uint8_t* data, uint8_t length) {
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	460b      	mov	r3, r1
 80012d2:	70fb      	strb	r3, [r7, #3]
    const uint8_t poly = 0x07;
 80012d4:	2307      	movs	r3, #7
 80012d6:	733b      	strb	r3, [r7, #12]
    uint8_t crc = 0x00;
 80012d8:	2300      	movs	r3, #0
 80012da:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < length; i++) {
 80012dc:	2300      	movs	r3, #0
 80012de:	73bb      	strb	r3, [r7, #14]
 80012e0:	e024      	b.n	800132c <calcular_crc+0x64>
        crc ^= data[i];
 80012e2:	7bbb      	ldrb	r3, [r7, #14]
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	4413      	add	r3, r2
 80012e8:	781a      	ldrb	r2, [r3, #0]
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
 80012ec:	4053      	eors	r3, r2
 80012ee:	73fb      	strb	r3, [r7, #15]
        for (uint8_t j = 0; j < 8; j++) {
 80012f0:	2300      	movs	r3, #0
 80012f2:	737b      	strb	r3, [r7, #13]
 80012f4:	e014      	b.n	8001320 <calcular_crc+0x58>
            crc = (crc & 0x80) ? (crc << 1) ^ poly : (crc << 1);
 80012f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	da09      	bge.n	8001312 <calcular_crc+0x4a>
 80012fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	b25a      	sxtb	r2, r3
 8001306:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800130a:	4053      	eors	r3, r2
 800130c:	b25b      	sxtb	r3, r3
 800130e:	b2db      	uxtb	r3, r3
 8001310:	e002      	b.n	8001318 <calcular_crc+0x50>
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	b2db      	uxtb	r3, r3
 8001318:	73fb      	strb	r3, [r7, #15]
        for (uint8_t j = 0; j < 8; j++) {
 800131a:	7b7b      	ldrb	r3, [r7, #13]
 800131c:	3301      	adds	r3, #1
 800131e:	737b      	strb	r3, [r7, #13]
 8001320:	7b7b      	ldrb	r3, [r7, #13]
 8001322:	2b07      	cmp	r3, #7
 8001324:	d9e7      	bls.n	80012f6 <calcular_crc+0x2e>
    for (uint8_t i = 0; i < length; i++) {
 8001326:	7bbb      	ldrb	r3, [r7, #14]
 8001328:	3301      	adds	r3, #1
 800132a:	73bb      	strb	r3, [r7, #14]
 800132c:	7bba      	ldrb	r2, [r7, #14]
 800132e:	78fb      	ldrb	r3, [r7, #3]
 8001330:	429a      	cmp	r2, r3
 8001332:	d3d6      	bcc.n	80012e2 <calcular_crc+0x1a>
        }
    }
    return crc;
 8001334:	7bfb      	ldrb	r3, [r7, #15]
}
 8001336:	4618      	mov	r0, r3
 8001338:	3714      	adds	r7, #20
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr

08001340 <RS485_Transmit>:

// Función segura para transmisión RS485
void RS485_Transmit(uint8_t* data, uint16_t size) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	460b      	mov	r3, r1
 800134a:	807b      	strh	r3, [r7, #2]
    HAL_GPIO_WritePin(RS485_DE_PORT, RS485_DE_PIN, GPIO_PIN_SET);
 800134c:	2201      	movs	r2, #1
 800134e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001352:	480a      	ldr	r0, [pc, #40]	@ (800137c <RS485_Transmit+0x3c>)
 8001354:	f001 fcf3 	bl	8002d3e <HAL_GPIO_WritePin>
    HAL_UART_Transmit(&huart2, data, size, HAL_MAX_DELAY);
 8001358:	887a      	ldrh	r2, [r7, #2]
 800135a:	f04f 33ff 	mov.w	r3, #4294967295
 800135e:	6879      	ldr	r1, [r7, #4]
 8001360:	4807      	ldr	r0, [pc, #28]	@ (8001380 <RS485_Transmit+0x40>)
 8001362:	f003 fe3a 	bl	8004fda <HAL_UART_Transmit>
    HAL_GPIO_WritePin(RS485_DE_PORT, RS485_DE_PIN, GPIO_PIN_RESET);
 8001366:	2200      	movs	r2, #0
 8001368:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800136c:	4803      	ldr	r0, [pc, #12]	@ (800137c <RS485_Transmit+0x3c>)
 800136e:	f001 fce6 	bl	8002d3e <HAL_GPIO_WritePin>
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40010c00 	.word	0x40010c00
 8001380:	20000380 	.word	0x20000380

08001384 <main>:
        // Reactivar recepción
        HAL_UART_Receive_IT(&huart2, recepcion, sizeof(recepcion));
    }
}

int main(void) {
 8001384:	b5b0      	push	{r4, r5, r7, lr}
 8001386:	b098      	sub	sp, #96	@ 0x60
 8001388:	af00      	add	r7, sp, #0
    HAL_Init();
 800138a:	f000 fda7 	bl	8001edc <HAL_Init>
    SystemClock_Config();
 800138e:	f000 f9bb 	bl	8001708 <SystemClock_Config>

    MX_GPIO_Init();
 8001392:	f000 f9f5 	bl	8001780 <MX_GPIO_Init>
    MX_USART1_UART_Init();
 8001396:	f000 fa7d 	bl	8001894 <MX_USART1_UART_Init>
    MX_USART2_UART_Init();
 800139a:	f000 fa9f 	bl	80018dc <MX_USART2_UART_Init>
    MX_SPI1_Init();
 800139e:	f000 fac1 	bl	8001924 <MX_SPI1_Init>
    MX_ADC1_Init();
 80013a2:	f000 faf1 	bl	8001988 <MX_ADC1_Init>
    MX_TIM1_Init();
 80013a6:	f000 fb37 	bl	8001a18 <MX_TIM1_Init>

    // Inicialización de periféricos
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // PA8
 80013aa:	2100      	movs	r1, #0
 80013ac:	482d      	ldr	r0, [pc, #180]	@ (8001464 <main+0xe0>)
 80013ae:	f002 ffe1 	bl	8004374 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); // PA10
 80013b2:	2108      	movs	r1, #8
 80013b4:	482b      	ldr	r0, [pc, #172]	@ (8001464 <main+0xe0>)
 80013b6:	f002 ffdd 	bl	8004374 <HAL_TIM_PWM_Start>
    HAL_ADC_Start(&hadc1);
 80013ba:	482b      	ldr	r0, [pc, #172]	@ (8001468 <main+0xe4>)
 80013bc:	f000 feec 	bl	8002198 <HAL_ADC_Start>
    BMP280_SPI_Init(&hspi1, GPIOA, GPIO_PIN_4);
 80013c0:	2210      	movs	r2, #16
 80013c2:	492a      	ldr	r1, [pc, #168]	@ (800146c <main+0xe8>)
 80013c4:	482a      	ldr	r0, [pc, #168]	@ (8001470 <main+0xec>)
 80013c6:	f7ff fc07 	bl	8000bd8 <BMP280_SPI_Init>

    // Crear mutex para protección de buffer
    osMutexDef(transmisionMutex);
 80013ca:	2300      	movs	r3, #0
 80013cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80013ce:	2300      	movs	r3, #0
 80013d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    transmisionMutex = osMutexCreate(osMutex(transmisionMutex));
 80013d2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80013d6:	4618      	mov	r0, r3
 80013d8:	f004 f8c1 	bl	800555e <osMutexCreate>
 80013dc:	4603      	mov	r3, r0
 80013de:	4a25      	ldr	r2, [pc, #148]	@ (8001474 <main+0xf0>)
 80013e0:	6013      	str	r3, [r2, #0]

    // Iniciar recepción por interrupción para RS485
    HAL_UART_Receive_IT(&huart2, recepcion, sizeof(recepcion));
 80013e2:	2205      	movs	r2, #5
 80013e4:	4924      	ldr	r1, [pc, #144]	@ (8001478 <main+0xf4>)
 80013e6:	4825      	ldr	r0, [pc, #148]	@ (800147c <main+0xf8>)
 80013e8:	f003 fe82 	bl	80050f0 <HAL_UART_Receive_IT>

    // Creación de tareas
    osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80013ec:	4b24      	ldr	r3, [pc, #144]	@ (8001480 <main+0xfc>)
 80013ee:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80013f2:	461d      	mov	r5, r3
 80013f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001400:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f004 f849 	bl	800549e <osThreadCreate>
 800140c:	4603      	mov	r3, r0
 800140e:	4a1d      	ldr	r2, [pc, #116]	@ (8001484 <main+0x100>)
 8001410:	6013      	str	r3, [r2, #0]

    osThreadDef(entradasTask, StartEntradasTask, osPriorityAboveNormal, 0, 256);
 8001412:	4b1d      	ldr	r3, [pc, #116]	@ (8001488 <main+0x104>)
 8001414:	f107 0420 	add.w	r4, r7, #32
 8001418:	461d      	mov	r5, r3
 800141a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800141c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800141e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001422:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    entradasTaskHandle = osThreadCreate(osThread(entradasTask), NULL);
 8001426:	f107 0320 	add.w	r3, r7, #32
 800142a:	2100      	movs	r1, #0
 800142c:	4618      	mov	r0, r3
 800142e:	f004 f836 	bl	800549e <osThreadCreate>
 8001432:	4603      	mov	r3, r0
 8001434:	4a15      	ldr	r2, [pc, #84]	@ (800148c <main+0x108>)
 8001436:	6013      	str	r3, [r2, #0]

    osThreadDef(uartTask, StartUartTask, osPriorityHigh, 0, 128);
 8001438:	4b15      	ldr	r3, [pc, #84]	@ (8001490 <main+0x10c>)
 800143a:	1d3c      	adds	r4, r7, #4
 800143c:	461d      	mov	r5, r3
 800143e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001440:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001442:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001446:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    uartTaskHandle = osThreadCreate(osThread(uartTask), NULL);
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	2100      	movs	r1, #0
 800144e:	4618      	mov	r0, r3
 8001450:	f004 f825 	bl	800549e <osThreadCreate>
 8001454:	4603      	mov	r3, r0
 8001456:	4a0f      	ldr	r2, [pc, #60]	@ (8001494 <main+0x110>)
 8001458:	6013      	str	r3, [r2, #0]

    // Iniciar planificador
    osKernelStart();
 800145a:	f004 f819 	bl	8005490 <osKernelStart>

    while (1) {}
 800145e:	bf00      	nop
 8001460:	e7fd      	b.n	800145e <main+0xda>
 8001462:	bf00      	nop
 8001464:	200003c8 	.word	0x200003c8
 8001468:	200002b0 	.word	0x200002b0
 800146c:	40010800 	.word	0x40010800
 8001470:	200002e0 	.word	0x200002e0
 8001474:	2000042c 	.word	0x2000042c
 8001478:	20000000 	.word	0x20000000
 800147c:	20000380 	.word	0x20000380
 8001480:	08007c00 	.word	0x08007c00
 8001484:	20000410 	.word	0x20000410
 8001488:	08007c2c 	.word	0x08007c2c
 800148c:	20000414 	.word	0x20000414
 8001490:	08007c54 	.word	0x08007c54
 8001494:	20000418 	.word	0x20000418

08001498 <StartDefaultTask>:
}

void StartDefaultTask(void const * argument) {
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
    for (;;) {
        // Transmitir por RS485 con protección de mutex
        osMutexWait(transmisionMutex, osWaitForever);
 80014a0:	4b0a      	ldr	r3, [pc, #40]	@ (80014cc <StartDefaultTask+0x34>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f04f 31ff 	mov.w	r1, #4294967295
 80014a8:	4618      	mov	r0, r3
 80014aa:	f004 f871 	bl	8005590 <osMutexWait>
        RS485_Transmit(transmision, sizeof(transmision));
 80014ae:	210c      	movs	r1, #12
 80014b0:	4807      	ldr	r0, [pc, #28]	@ (80014d0 <StartDefaultTask+0x38>)
 80014b2:	f7ff ff45 	bl	8001340 <RS485_Transmit>
        osMutexRelease(transmisionMutex);
 80014b6:	4b05      	ldr	r3, [pc, #20]	@ (80014cc <StartDefaultTask+0x34>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f004 f8b6 	bl	800562c <osMutexRelease>

        osDelay(1000);
 80014c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014c4:	f004 f837 	bl	8005536 <osDelay>
        osMutexWait(transmisionMutex, osWaitForever);
 80014c8:	bf00      	nop
 80014ca:	e7e9      	b.n	80014a0 <StartDefaultTask+0x8>
 80014cc:	2000042c 	.word	0x2000042c
 80014d0:	2000041c 	.word	0x2000041c

080014d4 <StartEntradasTask>:
    }
}

void StartEntradasTask(void const * argument) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08a      	sub	sp, #40	@ 0x28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
    float temp, press;
    uint32_t press_entero;

    for (;;) {
        // Leer valores ADC
        for (int i = 0; i < 3; i++) {
 80014dc:	2300      	movs	r3, #0
 80014de:	627b      	str	r3, [r7, #36]	@ 0x24
 80014e0:	e012      	b.n	8001508 <StartEntradasTask+0x34>
            HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80014e2:	f04f 31ff 	mov.w	r1, #4294967295
 80014e6:	484b      	ldr	r0, [pc, #300]	@ (8001614 <StartEntradasTask+0x140>)
 80014e8:	f000 ff04 	bl	80022f4 <HAL_ADC_PollForConversion>
            valores_adc[i] = HAL_ADC_GetValue(&hadc1);
 80014ec:	4849      	ldr	r0, [pc, #292]	@ (8001614 <StartEntradasTask+0x140>)
 80014ee:	f001 f807 	bl	8002500 <HAL_ADC_GetValue>
 80014f2:	4603      	mov	r3, r0
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	3328      	adds	r3, #40	@ 0x28
 80014fc:	443b      	add	r3, r7
 80014fe:	f823 2c1c 	strh.w	r2, [r3, #-28]
        for (int i = 0; i < 3; i++) {
 8001502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001504:	3301      	adds	r3, #1
 8001506:	627b      	str	r3, [r7, #36]	@ 0x24
 8001508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150a:	2b02      	cmp	r3, #2
 800150c:	dde9      	ble.n	80014e2 <StartEntradasTask+0xe>
        }

        // Leer entradas digitales
        uint8_t entradas_digitales = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        entradas_digitales |= HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8001514:	2102      	movs	r1, #2
 8001516:	4840      	ldr	r0, [pc, #256]	@ (8001618 <StartEntradasTask+0x144>)
 8001518:	f001 fbfa 	bl	8002d10 <HAL_GPIO_ReadPin>
 800151c:	4603      	mov	r3, r0
 800151e:	461a      	mov	r2, r3
 8001520:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001524:	4313      	orrs	r3, r2
 8001526:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        entradas_digitales |= HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) << 1;
 800152a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800152e:	483a      	ldr	r0, [pc, #232]	@ (8001618 <StartEntradasTask+0x144>)
 8001530:	f001 fbee 	bl	8002d10 <HAL_GPIO_ReadPin>
 8001534:	4603      	mov	r3, r0
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	b25a      	sxtb	r2, r3
 800153a:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800153e:	4313      	orrs	r3, r2
 8001540:	b25b      	sxtb	r3, r3
 8001542:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        entradas_digitales |= HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) << 2;
 8001546:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800154a:	4833      	ldr	r0, [pc, #204]	@ (8001618 <StartEntradasTask+0x144>)
 800154c:	f001 fbe0 	bl	8002d10 <HAL_GPIO_ReadPin>
 8001550:	4603      	mov	r3, r0
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	b25a      	sxtb	r2, r3
 8001556:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800155a:	4313      	orrs	r3, r2
 800155c:	b25b      	sxtb	r3, r3
 800155e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

        // Leer sensor BMP280
        temp = BMP280_ReadTemperature();
 8001562:	f7ff fb77 	bl	8000c54 <BMP280_ReadTemperature>
 8001566:	61f8      	str	r0, [r7, #28]
        press = BMP280_ReadPressure();
 8001568:	f7ff fbc8 	bl	8000cfc <BMP280_ReadPressure>
 800156c:	61b8      	str	r0, [r7, #24]
        press_entero = (uint32_t)press;
 800156e:	69b8      	ldr	r0, [r7, #24]
 8001570:	f7ff f84c 	bl	800060c <__aeabi_f2uiz>
 8001574:	4603      	mov	r3, r0
 8001576:	617b      	str	r3, [r7, #20]

        // Actualizar buffer de transmisión con protección
        osMutexWait(transmisionMutex, osWaitForever);
 8001578:	4b28      	ldr	r3, [pc, #160]	@ (800161c <StartEntradasTask+0x148>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f04f 31ff 	mov.w	r1, #4294967295
 8001580:	4618      	mov	r0, r3
 8001582:	f004 f805 	bl	8005590 <osMutexWait>

        transmision[0] = 0x02;  // Byte de inicio
 8001586:	4b26      	ldr	r3, [pc, #152]	@ (8001620 <StartEntradasTask+0x14c>)
 8001588:	2202      	movs	r2, #2
 800158a:	701a      	strb	r2, [r3, #0]
        transmision[1] = valores_adc[0] & 0xFF;
 800158c:	89bb      	ldrh	r3, [r7, #12]
 800158e:	b2da      	uxtb	r2, r3
 8001590:	4b23      	ldr	r3, [pc, #140]	@ (8001620 <StartEntradasTask+0x14c>)
 8001592:	705a      	strb	r2, [r3, #1]
        transmision[2] = (valores_adc[0] >> 8) & 0xFF;
 8001594:	89bb      	ldrh	r3, [r7, #12]
 8001596:	0a1b      	lsrs	r3, r3, #8
 8001598:	b29b      	uxth	r3, r3
 800159a:	b2da      	uxtb	r2, r3
 800159c:	4b20      	ldr	r3, [pc, #128]	@ (8001620 <StartEntradasTask+0x14c>)
 800159e:	709a      	strb	r2, [r3, #2]
        transmision[3] = valores_adc[1] & 0xFF;
 80015a0:	89fb      	ldrh	r3, [r7, #14]
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001620 <StartEntradasTask+0x14c>)
 80015a6:	70da      	strb	r2, [r3, #3]
        transmision[4] = (valores_adc[1] >> 8) & 0xFF;
 80015a8:	89fb      	ldrh	r3, [r7, #14]
 80015aa:	0a1b      	lsrs	r3, r3, #8
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001620 <StartEntradasTask+0x14c>)
 80015b2:	711a      	strb	r2, [r3, #4]
        transmision[5] = valores_adc[2] & 0xFF;
 80015b4:	8a3b      	ldrh	r3, [r7, #16]
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	4b19      	ldr	r3, [pc, #100]	@ (8001620 <StartEntradasTask+0x14c>)
 80015ba:	715a      	strb	r2, [r3, #5]
        transmision[6] = (valores_adc[2] >> 8) & 0xFF;
 80015bc:	8a3b      	ldrh	r3, [r7, #16]
 80015be:	0a1b      	lsrs	r3, r3, #8
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	b2da      	uxtb	r2, r3
 80015c4:	4b16      	ldr	r3, [pc, #88]	@ (8001620 <StartEntradasTask+0x14c>)
 80015c6:	719a      	strb	r2, [r3, #6]
        transmision[7] = entradas_digitales;
 80015c8:	4a15      	ldr	r2, [pc, #84]	@ (8001620 <StartEntradasTask+0x14c>)
 80015ca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80015ce:	71d3      	strb	r3, [r2, #7]
        transmision[8] = (uint8_t)temp;
 80015d0:	69f8      	ldr	r0, [r7, #28]
 80015d2:	f7ff f81b 	bl	800060c <__aeabi_f2uiz>
 80015d6:	4603      	mov	r3, r0
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	4b11      	ldr	r3, [pc, #68]	@ (8001620 <StartEntradasTask+0x14c>)
 80015dc:	721a      	strb	r2, [r3, #8]
        transmision[9] = (press_entero >> 8) & 0xFF;
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	0a1b      	lsrs	r3, r3, #8
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001620 <StartEntradasTask+0x14c>)
 80015e6:	725a      	strb	r2, [r3, #9]
        transmision[10] = press_entero & 0xFF;
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001620 <StartEntradasTask+0x14c>)
 80015ee:	729a      	strb	r2, [r3, #10]
        transmision[11] = calcular_crc(transmision, 11);
 80015f0:	210b      	movs	r1, #11
 80015f2:	480b      	ldr	r0, [pc, #44]	@ (8001620 <StartEntradasTask+0x14c>)
 80015f4:	f7ff fe68 	bl	80012c8 <calcular_crc>
 80015f8:	4603      	mov	r3, r0
 80015fa:	461a      	mov	r2, r3
 80015fc:	4b08      	ldr	r3, [pc, #32]	@ (8001620 <StartEntradasTask+0x14c>)
 80015fe:	72da      	strb	r2, [r3, #11]

        osMutexRelease(transmisionMutex);
 8001600:	4b06      	ldr	r3, [pc, #24]	@ (800161c <StartEntradasTask+0x148>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f004 f811 	bl	800562c <osMutexRelease>

        osDelay(100);
 800160a:	2064      	movs	r0, #100	@ 0x64
 800160c:	f003 ff93 	bl	8005536 <osDelay>
    for (;;) {
 8001610:	e764      	b.n	80014dc <StartEntradasTask+0x8>
 8001612:	bf00      	nop
 8001614:	200002b0 	.word	0x200002b0
 8001618:	40010c00 	.word	0x40010c00
 800161c:	2000042c 	.word	0x2000042c
 8001620:	2000041c 	.word	0x2000041c

08001624 <StartUartTask>:
    }
}

void StartUartTask(void const * argument) {
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
    uint8_t local_recepcion[5];
    uint8_t procesar_datos = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	73fb      	strb	r3, [r7, #15]

    for (;;) {
        // Transmitir por RS232 (monitoreo)
        osMutexWait(transmisionMutex, osWaitForever);
 8001630:	4b2e      	ldr	r3, [pc, #184]	@ (80016ec <StartUartTask+0xc8>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f04f 31ff 	mov.w	r1, #4294967295
 8001638:	4618      	mov	r0, r3
 800163a:	f003 ffa9 	bl	8005590 <osMutexWait>
        HAL_UART_Transmit(&huart1, transmision, sizeof(transmision), HAL_MAX_DELAY);
 800163e:	f04f 33ff 	mov.w	r3, #4294967295
 8001642:	220c      	movs	r2, #12
 8001644:	492a      	ldr	r1, [pc, #168]	@ (80016f0 <StartUartTask+0xcc>)
 8001646:	482b      	ldr	r0, [pc, #172]	@ (80016f4 <StartUartTask+0xd0>)
 8001648:	f003 fcc7 	bl	8004fda <HAL_UART_Transmit>
        osMutexRelease(transmisionMutex);
 800164c:	4b27      	ldr	r3, [pc, #156]	@ (80016ec <StartUartTask+0xc8>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f003 ffeb 	bl	800562c <osMutexRelease>

        // Procesar comandos recibidos
        if (rx_ready) {
 8001656:	4b28      	ldr	r3, [pc, #160]	@ (80016f8 <StartUartTask+0xd4>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b00      	cmp	r3, #0
 800165e:	d010      	beq.n	8001682 <StartUartTask+0x5e>
            // Copiar datos a buffer local
            taskENTER_CRITICAL();
 8001660:	f005 ff94 	bl	800758c <vPortEnterCritical>
            memcpy(local_recepcion, recepcion, sizeof(recepcion));
 8001664:	4a25      	ldr	r2, [pc, #148]	@ (80016fc <StartUartTask+0xd8>)
 8001666:	f107 0308 	add.w	r3, r7, #8
 800166a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800166e:	6018      	str	r0, [r3, #0]
 8001670:	3304      	adds	r3, #4
 8001672:	7019      	strb	r1, [r3, #0]
            procesar_datos = 1;
 8001674:	2301      	movs	r3, #1
 8001676:	73fb      	strb	r3, [r7, #15]
            rx_ready = 0;
 8001678:	4b1f      	ldr	r3, [pc, #124]	@ (80016f8 <StartUartTask+0xd4>)
 800167a:	2200      	movs	r2, #0
 800167c:	701a      	strb	r2, [r3, #0]
            taskEXIT_CRITICAL();
 800167e:	f005 ffb5 	bl	80075ec <vPortExitCritical>
        }

        if (procesar_datos) {
 8001682:	7bfb      	ldrb	r3, [r7, #15]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d02b      	beq.n	80016e0 <StartUartTask+0xbc>
            // Controlar salidas digitales
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, (local_recepcion[1] & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001688:	7a7b      	ldrb	r3, [r7, #9]
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	b2db      	uxtb	r3, r3
 8001690:	461a      	mov	r2, r3
 8001692:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001696:	481a      	ldr	r0, [pc, #104]	@ (8001700 <StartUartTask+0xdc>)
 8001698:	f001 fb51 	bl	8002d3e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, (local_recepcion[1] & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800169c:	7a7b      	ldrb	r3, [r7, #9]
 800169e:	105b      	asrs	r3, r3, #1
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	461a      	mov	r2, r3
 80016aa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016ae:	4814      	ldr	r0, [pc, #80]	@ (8001700 <StartUartTask+0xdc>)
 80016b0:	f001 fb45 	bl	8002d3e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, (local_recepcion[1] & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80016b4:	7a7b      	ldrb	r3, [r7, #9]
 80016b6:	109b      	asrs	r3, r3, #2
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	461a      	mov	r2, r3
 80016c2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80016c6:	480e      	ldr	r0, [pc, #56]	@ (8001700 <StartUartTask+0xdc>)
 80016c8:	f001 fb39 	bl	8002d3e <HAL_GPIO_WritePin>

            // Controlar PWM
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, local_recepcion[2]);
 80016cc:	7aba      	ldrb	r2, [r7, #10]
 80016ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001704 <StartUartTask+0xe0>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	635a      	str	r2, [r3, #52]	@ 0x34
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, local_recepcion[3]);
 80016d4:	7afa      	ldrb	r2, [r7, #11]
 80016d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001704 <StartUartTask+0xe0>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	63da      	str	r2, [r3, #60]	@ 0x3c

            procesar_datos = 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	73fb      	strb	r3, [r7, #15]
        }

        osDelay(500);
 80016e0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80016e4:	f003 ff27 	bl	8005536 <osDelay>
        osMutexWait(transmisionMutex, osWaitForever);
 80016e8:	e7a2      	b.n	8001630 <StartUartTask+0xc>
 80016ea:	bf00      	nop
 80016ec:	2000042c 	.word	0x2000042c
 80016f0:	2000041c 	.word	0x2000041c
 80016f4:	20000338 	.word	0x20000338
 80016f8:	20000428 	.word	0x20000428
 80016fc:	20000000 	.word	0x20000000
 8001700:	40010c00 	.word	0x40010c00
 8001704:	200003c8 	.word	0x200003c8

08001708 <SystemClock_Config>:
    }
}

void SystemClock_Config(void) {
 8001708:	b580      	push	{r7, lr}
 800170a:	b090      	sub	sp, #64	@ 0x40
 800170c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800170e:	f107 0318 	add.w	r3, r7, #24
 8001712:	2228      	movs	r2, #40	@ 0x28
 8001714:	2100      	movs	r1, #0
 8001716:	4618      	mov	r0, r3
 8001718:	f006 fa26 	bl	8007b68 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800171c:	1d3b      	adds	r3, r7, #4
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	60da      	str	r2, [r3, #12]
 8001728:	611a      	str	r2, [r3, #16]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800172a:	2301      	movs	r3, #1
 800172c:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800172e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001732:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001734:	2300      	movs	r3, #0
 8001736:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001738:	2301      	movs	r3, #1
 800173a:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800173c:	2302      	movs	r3, #2
 800173e:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001740:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001744:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001746:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800174a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800174c:	f107 0318 	add.w	r3, r7, #24
 8001750:	4618      	mov	r0, r3
 8001752:	f001 fb0d 	bl	8002d70 <HAL_RCC_OscConfig>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001756:	230f      	movs	r3, #15
 8001758:	607b      	str	r3, [r7, #4]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800175a:	2302      	movs	r3, #2
 800175c:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001762:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001766:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 800176c:	1d3b      	adds	r3, r7, #4
 800176e:	2102      	movs	r1, #2
 8001770:	4618      	mov	r0, r3
 8001772:	f001 fd7f 	bl	8003274 <HAL_RCC_ClockConfig>
}
 8001776:	bf00      	nop
 8001778:	3740      	adds	r7, #64	@ 0x40
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <MX_GPIO_Init>:

static void MX_GPIO_Init(void) {
 8001780:	b580      	push	{r7, lr}
 8001782:	b088      	sub	sp, #32
 8001784:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001786:	f107 0310 	add.w	r3, r7, #16
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001794:	4b3c      	ldr	r3, [pc, #240]	@ (8001888 <MX_GPIO_Init+0x108>)
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	4a3b      	ldr	r2, [pc, #236]	@ (8001888 <MX_GPIO_Init+0x108>)
 800179a:	f043 0304 	orr.w	r3, r3, #4
 800179e:	6193      	str	r3, [r2, #24]
 80017a0:	4b39      	ldr	r3, [pc, #228]	@ (8001888 <MX_GPIO_Init+0x108>)
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	f003 0304 	and.w	r3, r3, #4
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ac:	4b36      	ldr	r3, [pc, #216]	@ (8001888 <MX_GPIO_Init+0x108>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	4a35      	ldr	r2, [pc, #212]	@ (8001888 <MX_GPIO_Init+0x108>)
 80017b2:	f043 0308 	orr.w	r3, r3, #8
 80017b6:	6193      	str	r3, [r2, #24]
 80017b8:	4b33      	ldr	r3, [pc, #204]	@ (8001888 <MX_GPIO_Init+0x108>)
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	f003 0308 	and.w	r3, r3, #8
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c4:	4b30      	ldr	r3, [pc, #192]	@ (8001888 <MX_GPIO_Init+0x108>)
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	4a2f      	ldr	r2, [pc, #188]	@ (8001888 <MX_GPIO_Init+0x108>)
 80017ca:	f043 0310 	orr.w	r3, r3, #16
 80017ce:	6193      	str	r3, [r2, #24]
 80017d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001888 <MX_GPIO_Init+0x108>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	f003 0310 	and.w	r3, r3, #16
 80017d8:	607b      	str	r3, [r7, #4]
 80017da:	687b      	ldr	r3, [r7, #4]

    // PA4 - CS del BMP280
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017dc:	2310      	movs	r3, #16
 80017de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e0:	2301      	movs	r3, #1
 80017e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e8:	2302      	movs	r3, #2
 80017ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ec:	f107 0310 	add.w	r3, r7, #16
 80017f0:	4619      	mov	r1, r3
 80017f2:	4826      	ldr	r0, [pc, #152]	@ (800188c <MX_GPIO_Init+0x10c>)
 80017f4:	f001 f908 	bl	8002a08 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80017f8:	2201      	movs	r2, #1
 80017fa:	2110      	movs	r1, #16
 80017fc:	4823      	ldr	r0, [pc, #140]	@ (800188c <MX_GPIO_Init+0x10c>)
 80017fe:	f001 fa9e 	bl	8002d3e <HAL_GPIO_WritePin>

    // PB1, PB10, PB11 - Entradas digitales
    GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_10 | GPIO_PIN_11;
 8001802:	f640 4302 	movw	r3, #3074	@ 0xc02
 8001806:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800180c:	2302      	movs	r3, #2
 800180e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001810:	f107 0310 	add.w	r3, r7, #16
 8001814:	4619      	mov	r1, r3
 8001816:	481e      	ldr	r0, [pc, #120]	@ (8001890 <MX_GPIO_Init+0x110>)
 8001818:	f001 f8f6 	bl	8002a08 <HAL_GPIO_Init>

    // PB9 - Control DE para RS485
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800181c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001820:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001822:	2301      	movs	r3, #1
 8001824:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182a:	f107 0310 	add.w	r3, r7, #16
 800182e:	4619      	mov	r1, r3
 8001830:	4817      	ldr	r0, [pc, #92]	@ (8001890 <MX_GPIO_Init+0x110>)
 8001832:	f001 f8e9 	bl	8002a08 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001836:	2200      	movs	r2, #0
 8001838:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800183c:	4814      	ldr	r0, [pc, #80]	@ (8001890 <MX_GPIO_Init+0x110>)
 800183e:	f001 fa7e 	bl	8002d3e <HAL_GPIO_WritePin>

    // PB12, PB13, PB14 - Salidas digitales
    GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14;
 8001842:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8001846:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001848:	2301      	movs	r3, #1
 800184a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001850:	f107 0310 	add.w	r3, r7, #16
 8001854:	4619      	mov	r1, r3
 8001856:	480e      	ldr	r0, [pc, #56]	@ (8001890 <MX_GPIO_Init+0x110>)
 8001858:	f001 f8d6 	bl	8002a08 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800185c:	2200      	movs	r2, #0
 800185e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001862:	480b      	ldr	r0, [pc, #44]	@ (8001890 <MX_GPIO_Init+0x110>)
 8001864:	f001 fa6b 	bl	8002d3e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001868:	2200      	movs	r2, #0
 800186a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800186e:	4808      	ldr	r0, [pc, #32]	@ (8001890 <MX_GPIO_Init+0x110>)
 8001870:	f001 fa65 	bl	8002d3e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001874:	2200      	movs	r2, #0
 8001876:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800187a:	4805      	ldr	r0, [pc, #20]	@ (8001890 <MX_GPIO_Init+0x110>)
 800187c:	f001 fa5f 	bl	8002d3e <HAL_GPIO_WritePin>
}
 8001880:	bf00      	nop
 8001882:	3720      	adds	r7, #32
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40021000 	.word	0x40021000
 800188c:	40010800 	.word	0x40010800
 8001890:	40010c00 	.word	0x40010c00

08001894 <MX_USART1_UART_Init>:

static void MX_USART1_UART_Init(void) {
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
    huart1.Instance = USART1;
 8001898:	4b0e      	ldr	r3, [pc, #56]	@ (80018d4 <MX_USART1_UART_Init+0x40>)
 800189a:	4a0f      	ldr	r2, [pc, #60]	@ (80018d8 <MX_USART1_UART_Init+0x44>)
 800189c:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 800189e:	4b0d      	ldr	r3, [pc, #52]	@ (80018d4 <MX_USART1_UART_Init+0x40>)
 80018a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018a4:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018a6:	4b0b      	ldr	r3, [pc, #44]	@ (80018d4 <MX_USART1_UART_Init+0x40>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 80018ac:	4b09      	ldr	r3, [pc, #36]	@ (80018d4 <MX_USART1_UART_Init+0x40>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 80018b2:	4b08      	ldr	r3, [pc, #32]	@ (80018d4 <MX_USART1_UART_Init+0x40>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 80018b8:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <MX_USART1_UART_Init+0x40>)
 80018ba:	220c      	movs	r2, #12
 80018bc:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018be:	4b05      	ldr	r3, [pc, #20]	@ (80018d4 <MX_USART1_UART_Init+0x40>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c4:	4b03      	ldr	r3, [pc, #12]	@ (80018d4 <MX_USART1_UART_Init+0x40>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	61da      	str	r2, [r3, #28]
    HAL_UART_Init(&huart1);
 80018ca:	4802      	ldr	r0, [pc, #8]	@ (80018d4 <MX_USART1_UART_Init+0x40>)
 80018cc:	f003 fadd 	bl	8004e8a <HAL_UART_Init>
}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000338 	.word	0x20000338
 80018d8:	40013800 	.word	0x40013800

080018dc <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void) {
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 80018e0:	4b0e      	ldr	r3, [pc, #56]	@ (800191c <MX_USART2_UART_Init+0x40>)
 80018e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001920 <MX_USART2_UART_Init+0x44>)
 80018e4:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 80018e6:	4b0d      	ldr	r3, [pc, #52]	@ (800191c <MX_USART2_UART_Init+0x40>)
 80018e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018ec:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018ee:	4b0b      	ldr	r3, [pc, #44]	@ (800191c <MX_USART2_UART_Init+0x40>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 80018f4:	4b09      	ldr	r3, [pc, #36]	@ (800191c <MX_USART2_UART_Init+0x40>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 80018fa:	4b08      	ldr	r3, [pc, #32]	@ (800191c <MX_USART2_UART_Init+0x40>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8001900:	4b06      	ldr	r3, [pc, #24]	@ (800191c <MX_USART2_UART_Init+0x40>)
 8001902:	220c      	movs	r2, #12
 8001904:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001906:	4b05      	ldr	r3, [pc, #20]	@ (800191c <MX_USART2_UART_Init+0x40>)
 8001908:	2200      	movs	r2, #0
 800190a:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800190c:	4b03      	ldr	r3, [pc, #12]	@ (800191c <MX_USART2_UART_Init+0x40>)
 800190e:	2200      	movs	r2, #0
 8001910:	61da      	str	r2, [r3, #28]
    HAL_HalfDuplex_Init(&huart2);
 8001912:	4802      	ldr	r0, [pc, #8]	@ (800191c <MX_USART2_UART_Init+0x40>)
 8001914:	f003 fb09 	bl	8004f2a <HAL_HalfDuplex_Init>
}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20000380 	.word	0x20000380
 8001920:	40004400 	.word	0x40004400

08001924 <MX_SPI1_Init>:

static void MX_SPI1_Init(void) {
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
    hspi1.Instance = SPI1;
 8001928:	4b15      	ldr	r3, [pc, #84]	@ (8001980 <MX_SPI1_Init+0x5c>)
 800192a:	4a16      	ldr	r2, [pc, #88]	@ (8001984 <MX_SPI1_Init+0x60>)
 800192c:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 800192e:	4b14      	ldr	r3, [pc, #80]	@ (8001980 <MX_SPI1_Init+0x5c>)
 8001930:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001934:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001936:	4b12      	ldr	r3, [pc, #72]	@ (8001980 <MX_SPI1_Init+0x5c>)
 8001938:	2200      	movs	r2, #0
 800193a:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800193c:	4b10      	ldr	r3, [pc, #64]	@ (8001980 <MX_SPI1_Init+0x5c>)
 800193e:	2200      	movs	r2, #0
 8001940:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001942:	4b0f      	ldr	r3, [pc, #60]	@ (8001980 <MX_SPI1_Init+0x5c>)
 8001944:	2200      	movs	r2, #0
 8001946:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001948:	4b0d      	ldr	r3, [pc, #52]	@ (8001980 <MX_SPI1_Init+0x5c>)
 800194a:	2200      	movs	r2, #0
 800194c:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 800194e:	4b0c      	ldr	r3, [pc, #48]	@ (8001980 <MX_SPI1_Init+0x5c>)
 8001950:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001954:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001956:	4b0a      	ldr	r3, [pc, #40]	@ (8001980 <MX_SPI1_Init+0x5c>)
 8001958:	2218      	movs	r2, #24
 800195a:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800195c:	4b08      	ldr	r3, [pc, #32]	@ (8001980 <MX_SPI1_Init+0x5c>)
 800195e:	2200      	movs	r2, #0
 8001960:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001962:	4b07      	ldr	r3, [pc, #28]	@ (8001980 <MX_SPI1_Init+0x5c>)
 8001964:	2200      	movs	r2, #0
 8001966:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001968:	4b05      	ldr	r3, [pc, #20]	@ (8001980 <MX_SPI1_Init+0x5c>)
 800196a:	2200      	movs	r2, #0
 800196c:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi1.Init.CRCPolynomial = 10;
 800196e:	4b04      	ldr	r3, [pc, #16]	@ (8001980 <MX_SPI1_Init+0x5c>)
 8001970:	220a      	movs	r2, #10
 8001972:	62da      	str	r2, [r3, #44]	@ 0x2c
    HAL_SPI_Init(&hspi1);
 8001974:	4802      	ldr	r0, [pc, #8]	@ (8001980 <MX_SPI1_Init+0x5c>)
 8001976:	f001 fec1 	bl	80036fc <HAL_SPI_Init>
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	200002e0 	.word	0x200002e0
 8001984:	40013000 	.word	0x40013000

08001988 <MX_ADC1_Init>:

static void MX_ADC1_Init(void) {
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 800198e:	1d3b      	adds	r3, r7, #4
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]

    hadc1.Instance = ADC1;
 8001998:	4b1d      	ldr	r3, [pc, #116]	@ (8001a10 <MX_ADC1_Init+0x88>)
 800199a:	4a1e      	ldr	r2, [pc, #120]	@ (8001a14 <MX_ADC1_Init+0x8c>)
 800199c:	601a      	str	r2, [r3, #0]
    hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800199e:	4b1c      	ldr	r3, [pc, #112]	@ (8001a10 <MX_ADC1_Init+0x88>)
 80019a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019a4:	609a      	str	r2, [r3, #8]
    hadc1.Init.ContinuousConvMode = ENABLE;
 80019a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a10 <MX_ADC1_Init+0x88>)
 80019a8:	2201      	movs	r2, #1
 80019aa:	731a      	strb	r2, [r3, #12]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019ac:	4b18      	ldr	r3, [pc, #96]	@ (8001a10 <MX_ADC1_Init+0x88>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	751a      	strb	r2, [r3, #20]
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019b2:	4b17      	ldr	r3, [pc, #92]	@ (8001a10 <MX_ADC1_Init+0x88>)
 80019b4:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80019b8:	61da      	str	r2, [r3, #28]
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019ba:	4b15      	ldr	r3, [pc, #84]	@ (8001a10 <MX_ADC1_Init+0x88>)
 80019bc:	2200      	movs	r2, #0
 80019be:	605a      	str	r2, [r3, #4]
    hadc1.Init.NbrOfConversion = 3;
 80019c0:	4b13      	ldr	r3, [pc, #76]	@ (8001a10 <MX_ADC1_Init+0x88>)
 80019c2:	2203      	movs	r2, #3
 80019c4:	611a      	str	r2, [r3, #16]
    HAL_ADC_Init(&hadc1);
 80019c6:	4812      	ldr	r0, [pc, #72]	@ (8001a10 <MX_ADC1_Init+0x88>)
 80019c8:	f000 fb0e 	bl	8001fe8 <HAL_ADC_Init>

    sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80019cc:	2305      	movs	r3, #5
 80019ce:	60fb      	str	r3, [r7, #12]

    // Canal 0 (PA0)
    sConfig.Channel = ADC_CHANNEL_0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	607b      	str	r3, [r7, #4]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 80019d4:	2301      	movs	r3, #1
 80019d6:	60bb      	str	r3, [r7, #8]
    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80019d8:	1d3b      	adds	r3, r7, #4
 80019da:	4619      	mov	r1, r3
 80019dc:	480c      	ldr	r0, [pc, #48]	@ (8001a10 <MX_ADC1_Init+0x88>)
 80019de:	f000 fd9b 	bl	8002518 <HAL_ADC_ConfigChannel>

    // Canal 1 (PA1)
    sConfig.Channel = ADC_CHANNEL_1;
 80019e2:	2301      	movs	r3, #1
 80019e4:	607b      	str	r3, [r7, #4]
    sConfig.Rank = ADC_REGULAR_RANK_2;
 80019e6:	2302      	movs	r3, #2
 80019e8:	60bb      	str	r3, [r7, #8]
    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80019ea:	1d3b      	adds	r3, r7, #4
 80019ec:	4619      	mov	r1, r3
 80019ee:	4808      	ldr	r0, [pc, #32]	@ (8001a10 <MX_ADC1_Init+0x88>)
 80019f0:	f000 fd92 	bl	8002518 <HAL_ADC_ConfigChannel>

    // Canal 8 (PB0)
    sConfig.Channel = ADC_CHANNEL_8;
 80019f4:	2308      	movs	r3, #8
 80019f6:	607b      	str	r3, [r7, #4]
    sConfig.Rank = ADC_REGULAR_RANK_3;
 80019f8:	2303      	movs	r3, #3
 80019fa:	60bb      	str	r3, [r7, #8]
    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80019fc:	1d3b      	adds	r3, r7, #4
 80019fe:	4619      	mov	r1, r3
 8001a00:	4803      	ldr	r0, [pc, #12]	@ (8001a10 <MX_ADC1_Init+0x88>)
 8001a02:	f000 fd89 	bl	8002518 <HAL_ADC_ConfigChannel>
}
 8001a06:	bf00      	nop
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	200002b0 	.word	0x200002b0
 8001a14:	40012400 	.word	0x40012400

08001a18 <MX_TIM1_Init>:

static void MX_TIM1_Init(void) {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b096      	sub	sp, #88	@ 0x58
 8001a1c:	af00      	add	r7, sp, #0
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a1e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	609a      	str	r2, [r3, #8]
 8001a2a:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a2c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8001a36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	609a      	str	r2, [r3, #8]
 8001a42:	60da      	str	r2, [r3, #12]
 8001a44:	611a      	str	r2, [r3, #16]
 8001a46:	615a      	str	r2, [r3, #20]
 8001a48:	619a      	str	r2, [r3, #24]
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a4a:	1d3b      	adds	r3, r7, #4
 8001a4c:	2220      	movs	r2, #32
 8001a4e:	2100      	movs	r1, #0
 8001a50:	4618      	mov	r0, r3
 8001a52:	f006 f889 	bl	8007b68 <memset>

    htim1.Instance = TIM1;
 8001a56:	4b31      	ldr	r3, [pc, #196]	@ (8001b1c <MX_TIM1_Init+0x104>)
 8001a58:	4a31      	ldr	r2, [pc, #196]	@ (8001b20 <MX_TIM1_Init+0x108>)
 8001a5a:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 71;
 8001a5c:	4b2f      	ldr	r3, [pc, #188]	@ (8001b1c <MX_TIM1_Init+0x104>)
 8001a5e:	2247      	movs	r2, #71	@ 0x47
 8001a60:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a62:	4b2e      	ldr	r3, [pc, #184]	@ (8001b1c <MX_TIM1_Init+0x104>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 4095;
 8001a68:	4b2c      	ldr	r3, [pc, #176]	@ (8001b1c <MX_TIM1_Init+0x104>)
 8001a6a:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001a6e:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a70:	4b2a      	ldr	r3, [pc, #168]	@ (8001b1c <MX_TIM1_Init+0x104>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	611a      	str	r2, [r3, #16]
    htim1.Init.RepetitionCounter = 0;
 8001a76:	4b29      	ldr	r3, [pc, #164]	@ (8001b1c <MX_TIM1_Init+0x104>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	615a      	str	r2, [r3, #20]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a7c:	4b27      	ldr	r3, [pc, #156]	@ (8001b1c <MX_TIM1_Init+0x104>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	619a      	str	r2, [r3, #24]
    HAL_TIM_Base_Init(&htim1);
 8001a82:	4826      	ldr	r0, [pc, #152]	@ (8001b1c <MX_TIM1_Init+0x104>)
 8001a84:	f002 fbcf 	bl	8004226 <HAL_TIM_Base_Init>

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a8c:	64bb      	str	r3, [r7, #72]	@ 0x48
    HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig);
 8001a8e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001a92:	4619      	mov	r1, r3
 8001a94:	4821      	ldr	r0, [pc, #132]	@ (8001b1c <MX_TIM1_Init+0x104>)
 8001a96:	f002 fdd1 	bl	800463c <HAL_TIM_ConfigClockSource>
    HAL_TIM_PWM_Init(&htim1);
 8001a9a:	4820      	ldr	r0, [pc, #128]	@ (8001b1c <MX_TIM1_Init+0x104>)
 8001a9c:	f002 fc1b 	bl	80042d6 <HAL_TIM_PWM_Init>

    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	643b      	str	r3, [r7, #64]	@ 0x40
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 8001aa8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001aac:	4619      	mov	r1, r3
 8001aae:	481b      	ldr	r0, [pc, #108]	@ (8001b1c <MX_TIM1_Init+0x104>)
 8001ab0:	f003 f93c 	bl	8004d2c <HAL_TIMEx_MasterConfigSynchronization>

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ab4:	2360      	movs	r3, #96	@ 0x60
 8001ab6:	627b      	str	r3, [r7, #36]	@ 0x24
    sConfigOC.Pulse = 0;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	62bb      	str	r3, [r7, #40]	@ 0x28
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001abc:	2300      	movs	r3, #0
 8001abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	633b      	str	r3, [r7, #48]	@ 0x30
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	637b      	str	r3, [r7, #52]	@ 0x34
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	63bb      	str	r3, [r7, #56]	@ 0x38
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001acc:	2300      	movs	r3, #0
 8001ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
 8001ad0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4810      	ldr	r0, [pc, #64]	@ (8001b1c <MX_TIM1_Init+0x104>)
 8001ada:	f002 fced 	bl	80044b8 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3);
 8001ade:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ae2:	2208      	movs	r2, #8
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	480d      	ldr	r0, [pc, #52]	@ (8001b1c <MX_TIM1_Init+0x104>)
 8001ae8:	f002 fce6 	bl	80044b8 <HAL_TIM_PWM_ConfigChannel>

    sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001aec:	2300      	movs	r3, #0
 8001aee:	607b      	str	r3, [r7, #4]
    sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001af0:	2300      	movs	r3, #0
 8001af2:	60bb      	str	r3, [r7, #8]
    sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60fb      	str	r3, [r7, #12]
    sBreakDeadTimeConfig.DeadTime = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	613b      	str	r3, [r7, #16]
    sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]
    sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b00:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b04:	61bb      	str	r3, [r7, #24]
    sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b06:	2300      	movs	r3, #0
 8001b08:	623b      	str	r3, [r7, #32]
    HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig);
 8001b0a:	1d3b      	adds	r3, r7, #4
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4803      	ldr	r0, [pc, #12]	@ (8001b1c <MX_TIM1_Init+0x104>)
 8001b10:	f003 f96a 	bl	8004de8 <HAL_TIMEx_ConfigBreakDeadTime>
}
 8001b14:	bf00      	nop
 8001b16:	3758      	adds	r7, #88	@ 0x58
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	200003c8 	.word	0x200003c8
 8001b20:	40012c00 	.word	0x40012c00

08001b24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b2a:	4b18      	ldr	r3, [pc, #96]	@ (8001b8c <HAL_MspInit+0x68>)
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	4a17      	ldr	r2, [pc, #92]	@ (8001b8c <HAL_MspInit+0x68>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	6193      	str	r3, [r2, #24]
 8001b36:	4b15      	ldr	r3, [pc, #84]	@ (8001b8c <HAL_MspInit+0x68>)
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	60bb      	str	r3, [r7, #8]
 8001b40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b42:	4b12      	ldr	r3, [pc, #72]	@ (8001b8c <HAL_MspInit+0x68>)
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	4a11      	ldr	r2, [pc, #68]	@ (8001b8c <HAL_MspInit+0x68>)
 8001b48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b4c:	61d3      	str	r3, [r2, #28]
 8001b4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b8c <HAL_MspInit+0x68>)
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b56:	607b      	str	r3, [r7, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	210f      	movs	r1, #15
 8001b5e:	f06f 0001 	mvn.w	r0, #1
 8001b62:	f000 ff28 	bl	80029b6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b66:	4b0a      	ldr	r3, [pc, #40]	@ (8001b90 <HAL_MspInit+0x6c>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	4a04      	ldr	r2, [pc, #16]	@ (8001b90 <HAL_MspInit+0x6c>)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b82:	bf00      	nop
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	40010000 	.word	0x40010000

08001b94 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08a      	sub	sp, #40	@ 0x28
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	f107 0318 	add.w	r3, r7, #24
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a1f      	ldr	r2, [pc, #124]	@ (8001c2c <HAL_ADC_MspInit+0x98>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d137      	bne.n	8001c24 <HAL_ADC_MspInit+0x90>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bb4:	4b1e      	ldr	r3, [pc, #120]	@ (8001c30 <HAL_ADC_MspInit+0x9c>)
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	4a1d      	ldr	r2, [pc, #116]	@ (8001c30 <HAL_ADC_MspInit+0x9c>)
 8001bba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bbe:	6193      	str	r3, [r2, #24]
 8001bc0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c30 <HAL_ADC_MspInit+0x9c>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bc8:	617b      	str	r3, [r7, #20]
 8001bca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bcc:	4b18      	ldr	r3, [pc, #96]	@ (8001c30 <HAL_ADC_MspInit+0x9c>)
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	4a17      	ldr	r2, [pc, #92]	@ (8001c30 <HAL_ADC_MspInit+0x9c>)
 8001bd2:	f043 0304 	orr.w	r3, r3, #4
 8001bd6:	6193      	str	r3, [r2, #24]
 8001bd8:	4b15      	ldr	r3, [pc, #84]	@ (8001c30 <HAL_ADC_MspInit+0x9c>)
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	613b      	str	r3, [r7, #16]
 8001be2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be4:	4b12      	ldr	r3, [pc, #72]	@ (8001c30 <HAL_ADC_MspInit+0x9c>)
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	4a11      	ldr	r2, [pc, #68]	@ (8001c30 <HAL_ADC_MspInit+0x9c>)
 8001bea:	f043 0308 	orr.w	r3, r3, #8
 8001bee:	6193      	str	r3, [r2, #24]
 8001bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8001c30 <HAL_ADC_MspInit+0x9c>)
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	f003 0308 	and.w	r3, r3, #8
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c00:	2303      	movs	r3, #3
 8001c02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c04:	f107 0318 	add.w	r3, r7, #24
 8001c08:	4619      	mov	r1, r3
 8001c0a:	480a      	ldr	r0, [pc, #40]	@ (8001c34 <HAL_ADC_MspInit+0xa0>)
 8001c0c:	f000 fefc 	bl	8002a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c10:	2301      	movs	r3, #1
 8001c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c14:	2303      	movs	r3, #3
 8001c16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c18:	f107 0318 	add.w	r3, r7, #24
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4806      	ldr	r0, [pc, #24]	@ (8001c38 <HAL_ADC_MspInit+0xa4>)
 8001c20:	f000 fef2 	bl	8002a08 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001c24:	bf00      	nop
 8001c26:	3728      	adds	r7, #40	@ 0x28
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40012400 	.word	0x40012400
 8001c30:	40021000 	.word	0x40021000
 8001c34:	40010800 	.word	0x40010800
 8001c38:	40010c00 	.word	0x40010c00

08001c3c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b088      	sub	sp, #32
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c44:	f107 0310 	add.w	r3, r7, #16
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a1b      	ldr	r2, [pc, #108]	@ (8001cc4 <HAL_SPI_MspInit+0x88>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d12f      	bne.n	8001cbc <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc8 <HAL_SPI_MspInit+0x8c>)
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	4a19      	ldr	r2, [pc, #100]	@ (8001cc8 <HAL_SPI_MspInit+0x8c>)
 8001c62:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c66:	6193      	str	r3, [r2, #24]
 8001c68:	4b17      	ldr	r3, [pc, #92]	@ (8001cc8 <HAL_SPI_MspInit+0x8c>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c74:	4b14      	ldr	r3, [pc, #80]	@ (8001cc8 <HAL_SPI_MspInit+0x8c>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	4a13      	ldr	r2, [pc, #76]	@ (8001cc8 <HAL_SPI_MspInit+0x8c>)
 8001c7a:	f043 0304 	orr.w	r3, r3, #4
 8001c7e:	6193      	str	r3, [r2, #24]
 8001c80:	4b11      	ldr	r3, [pc, #68]	@ (8001cc8 <HAL_SPI_MspInit+0x8c>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	60bb      	str	r3, [r7, #8]
 8001c8a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001c8c:	23a0      	movs	r3, #160	@ 0xa0
 8001c8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c90:	2302      	movs	r3, #2
 8001c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c94:	2303      	movs	r3, #3
 8001c96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c98:	f107 0310 	add.w	r3, r7, #16
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	480b      	ldr	r0, [pc, #44]	@ (8001ccc <HAL_SPI_MspInit+0x90>)
 8001ca0:	f000 feb2 	bl	8002a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ca4:	2340      	movs	r3, #64	@ 0x40
 8001ca6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb0:	f107 0310 	add.w	r3, r7, #16
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4805      	ldr	r0, [pc, #20]	@ (8001ccc <HAL_SPI_MspInit+0x90>)
 8001cb8:	f000 fea6 	bl	8002a08 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001cbc:	bf00      	nop
 8001cbe:	3720      	adds	r7, #32
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40013000 	.word	0x40013000
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	40010800 	.word	0x40010800

08001cd0 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a09      	ldr	r2, [pc, #36]	@ (8001d04 <HAL_TIM_PWM_MspInit+0x34>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d10b      	bne.n	8001cfa <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ce2:	4b09      	ldr	r3, [pc, #36]	@ (8001d08 <HAL_TIM_PWM_MspInit+0x38>)
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	4a08      	ldr	r2, [pc, #32]	@ (8001d08 <HAL_TIM_PWM_MspInit+0x38>)
 8001ce8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001cec:	6193      	str	r3, [r2, #24]
 8001cee:	4b06      	ldr	r3, [pc, #24]	@ (8001d08 <HAL_TIM_PWM_MspInit+0x38>)
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001cfa:	bf00      	nop
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr
 8001d04:	40012c00 	.word	0x40012c00
 8001d08:	40021000 	.word	0x40021000

08001d0c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08c      	sub	sp, #48	@ 0x30
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d14:	f107 031c 	add.w	r3, r7, #28
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a3d      	ldr	r2, [pc, #244]	@ (8001e1c <HAL_UART_MspInit+0x110>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d13e      	bne.n	8001daa <HAL_UART_MspInit+0x9e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d2c:	4b3c      	ldr	r3, [pc, #240]	@ (8001e20 <HAL_UART_MspInit+0x114>)
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	4a3b      	ldr	r2, [pc, #236]	@ (8001e20 <HAL_UART_MspInit+0x114>)
 8001d32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d36:	6193      	str	r3, [r2, #24]
 8001d38:	4b39      	ldr	r3, [pc, #228]	@ (8001e20 <HAL_UART_MspInit+0x114>)
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d40:	61bb      	str	r3, [r7, #24]
 8001d42:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d44:	4b36      	ldr	r3, [pc, #216]	@ (8001e20 <HAL_UART_MspInit+0x114>)
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	4a35      	ldr	r2, [pc, #212]	@ (8001e20 <HAL_UART_MspInit+0x114>)
 8001d4a:	f043 0308 	orr.w	r3, r3, #8
 8001d4e:	6193      	str	r3, [r2, #24]
 8001d50:	4b33      	ldr	r3, [pc, #204]	@ (8001e20 <HAL_UART_MspInit+0x114>)
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	f003 0308 	and.w	r3, r3, #8
 8001d58:	617b      	str	r3, [r7, #20]
 8001d5a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d5c:	2340      	movs	r3, #64	@ 0x40
 8001d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d60:	2302      	movs	r3, #2
 8001d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d64:	2303      	movs	r3, #3
 8001d66:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d68:	f107 031c 	add.w	r3, r7, #28
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	482d      	ldr	r0, [pc, #180]	@ (8001e24 <HAL_UART_MspInit+0x118>)
 8001d70:	f000 fe4a 	bl	8002a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d74:	2380      	movs	r3, #128	@ 0x80
 8001d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d80:	f107 031c 	add.w	r3, r7, #28
 8001d84:	4619      	mov	r1, r3
 8001d86:	4827      	ldr	r0, [pc, #156]	@ (8001e24 <HAL_UART_MspInit+0x118>)
 8001d88:	f000 fe3e 	bl	8002a08 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001d8c:	4b26      	ldr	r3, [pc, #152]	@ (8001e28 <HAL_UART_MspInit+0x11c>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d94:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d9c:	f043 0304 	orr.w	r3, r3, #4
 8001da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001da2:	4a21      	ldr	r2, [pc, #132]	@ (8001e28 <HAL_UART_MspInit+0x11c>)
 8001da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001da6:	6053      	str	r3, [r2, #4]
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001da8:	e034      	b.n	8001e14 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART2)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a1f      	ldr	r2, [pc, #124]	@ (8001e2c <HAL_UART_MspInit+0x120>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d12f      	bne.n	8001e14 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001db4:	4b1a      	ldr	r3, [pc, #104]	@ (8001e20 <HAL_UART_MspInit+0x114>)
 8001db6:	69db      	ldr	r3, [r3, #28]
 8001db8:	4a19      	ldr	r2, [pc, #100]	@ (8001e20 <HAL_UART_MspInit+0x114>)
 8001dba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dbe:	61d3      	str	r3, [r2, #28]
 8001dc0:	4b17      	ldr	r3, [pc, #92]	@ (8001e20 <HAL_UART_MspInit+0x114>)
 8001dc2:	69db      	ldr	r3, [r3, #28]
 8001dc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc8:	613b      	str	r3, [r7, #16]
 8001dca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dcc:	4b14      	ldr	r3, [pc, #80]	@ (8001e20 <HAL_UART_MspInit+0x114>)
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	4a13      	ldr	r2, [pc, #76]	@ (8001e20 <HAL_UART_MspInit+0x114>)
 8001dd2:	f043 0304 	orr.w	r3, r3, #4
 8001dd6:	6193      	str	r3, [r2, #24]
 8001dd8:	4b11      	ldr	r3, [pc, #68]	@ (8001e20 <HAL_UART_MspInit+0x114>)
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001de4:	2304      	movs	r3, #4
 8001de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de8:	2302      	movs	r3, #2
 8001dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dec:	2303      	movs	r3, #3
 8001dee:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df0:	f107 031c 	add.w	r3, r7, #28
 8001df4:	4619      	mov	r1, r3
 8001df6:	480e      	ldr	r0, [pc, #56]	@ (8001e30 <HAL_UART_MspInit+0x124>)
 8001df8:	f000 fe06 	bl	8002a08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001dfc:	2308      	movs	r3, #8
 8001dfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e00:	2300      	movs	r3, #0
 8001e02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e08:	f107 031c 	add.w	r3, r7, #28
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4808      	ldr	r0, [pc, #32]	@ (8001e30 <HAL_UART_MspInit+0x124>)
 8001e10:	f000 fdfa 	bl	8002a08 <HAL_GPIO_Init>
}
 8001e14:	bf00      	nop
 8001e16:	3730      	adds	r7, #48	@ 0x30
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40013800 	.word	0x40013800
 8001e20:	40021000 	.word	0x40021000
 8001e24:	40010c00 	.word	0x40010c00
 8001e28:	40010000 	.word	0x40010000
 8001e2c:	40004400 	.word	0x40004400
 8001e30:	40010800 	.word	0x40010800

08001e34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e38:	bf00      	nop
 8001e3a:	e7fd      	b.n	8001e38 <NMI_Handler+0x4>

08001e3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e40:	bf00      	nop
 8001e42:	e7fd      	b.n	8001e40 <HardFault_Handler+0x4>

08001e44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e48:	bf00      	nop
 8001e4a:	e7fd      	b.n	8001e48 <MemManage_Handler+0x4>

08001e4c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e50:	bf00      	nop
 8001e52:	e7fd      	b.n	8001e50 <BusFault_Handler+0x4>

08001e54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e58:	bf00      	nop
 8001e5a:	e7fd      	b.n	8001e58 <UsageFault_Handler+0x4>

08001e5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr

08001e68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e6c:	f000 f87c 	bl	8001f68 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001e70:	f005 f872 	bl	8006f58 <xTaskGetSchedulerState>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d001      	beq.n	8001e7e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001e7a:	f005 fc05 	bl	8007688 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e82:	b480      	push	{r7}
 8001e84:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e86:	bf00      	nop
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr
	...

08001e90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e90:	f7ff fff7 	bl	8001e82 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e94:	480b      	ldr	r0, [pc, #44]	@ (8001ec4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e96:	490c      	ldr	r1, [pc, #48]	@ (8001ec8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e98:	4a0c      	ldr	r2, [pc, #48]	@ (8001ecc <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e9c:	e002      	b.n	8001ea4 <LoopCopyDataInit>

08001e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ea2:	3304      	adds	r3, #4

08001ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ea8:	d3f9      	bcc.n	8001e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eaa:	4a09      	ldr	r2, [pc, #36]	@ (8001ed0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001eac:	4c09      	ldr	r4, [pc, #36]	@ (8001ed4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eb0:	e001      	b.n	8001eb6 <LoopFillZerobss>

08001eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eb4:	3204      	adds	r2, #4

08001eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eb8:	d3fb      	bcc.n	8001eb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001eba:	f005 fe5d 	bl	8007b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ebe:	f7ff fa61 	bl	8001384 <main>
  bx lr
 8001ec2:	4770      	bx	lr
  ldr r0, =_sdata
 8001ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ec8:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001ecc:	08007cc8 	.word	0x08007cc8
  ldr r2, =_sbss
 8001ed0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001ed4:	20001188 	.word	0x20001188

08001ed8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ed8:	e7fe      	b.n	8001ed8 <ADC1_2_IRQHandler>
	...

08001edc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ee0:	4b08      	ldr	r3, [pc, #32]	@ (8001f04 <HAL_Init+0x28>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a07      	ldr	r2, [pc, #28]	@ (8001f04 <HAL_Init+0x28>)
 8001ee6:	f043 0310 	orr.w	r3, r3, #16
 8001eea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eec:	2003      	movs	r0, #3
 8001eee:	f000 fd57 	bl	80029a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ef2:	200f      	movs	r0, #15
 8001ef4:	f000 f808 	bl	8001f08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ef8:	f7ff fe14 	bl	8001b24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40022000 	.word	0x40022000

08001f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f10:	4b12      	ldr	r3, [pc, #72]	@ (8001f5c <HAL_InitTick+0x54>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4b12      	ldr	r3, [pc, #72]	@ (8001f60 <HAL_InitTick+0x58>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	4619      	mov	r1, r3
 8001f1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f26:	4618      	mov	r0, r3
 8001f28:	f000 fd61 	bl	80029ee <HAL_SYSTICK_Config>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e00e      	b.n	8001f54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b0f      	cmp	r3, #15
 8001f3a:	d80a      	bhi.n	8001f52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	f04f 30ff 	mov.w	r0, #4294967295
 8001f44:	f000 fd37 	bl	80029b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f48:	4a06      	ldr	r2, [pc, #24]	@ (8001f64 <HAL_InitTick+0x5c>)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	e000      	b.n	8001f54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	20000008 	.word	0x20000008
 8001f60:	20000010 	.word	0x20000010
 8001f64:	2000000c 	.word	0x2000000c

08001f68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f6c:	4b05      	ldr	r3, [pc, #20]	@ (8001f84 <HAL_IncTick+0x1c>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	461a      	mov	r2, r3
 8001f72:	4b05      	ldr	r3, [pc, #20]	@ (8001f88 <HAL_IncTick+0x20>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4413      	add	r3, r2
 8001f78:	4a03      	ldr	r2, [pc, #12]	@ (8001f88 <HAL_IncTick+0x20>)
 8001f7a:	6013      	str	r3, [r2, #0]
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr
 8001f84:	20000010 	.word	0x20000010
 8001f88:	20000430 	.word	0x20000430

08001f8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f90:	4b02      	ldr	r3, [pc, #8]	@ (8001f9c <HAL_GetTick+0x10>)
 8001f92:	681b      	ldr	r3, [r3, #0]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr
 8001f9c:	20000430 	.word	0x20000430

08001fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fa8:	f7ff fff0 	bl	8001f8c <HAL_GetTick>
 8001fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb8:	d005      	beq.n	8001fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fba:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe4 <HAL_Delay+0x44>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fc6:	bf00      	nop
 8001fc8:	f7ff ffe0 	bl	8001f8c <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d8f7      	bhi.n	8001fc8 <HAL_Delay+0x28>
  {
  }
}
 8001fd8:	bf00      	nop
 8001fda:	bf00      	nop
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20000010 	.word	0x20000010

08001fe8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e0be      	b.n	8002188 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002014:	2b00      	cmp	r3, #0
 8002016:	d109      	bne.n	800202c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7ff fdb4 	bl	8001b94 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 fbc5 	bl	80027bc <ADC_ConversionStop_Disable>
 8002032:	4603      	mov	r3, r0
 8002034:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800203a:	f003 0310 	and.w	r3, r3, #16
 800203e:	2b00      	cmp	r3, #0
 8002040:	f040 8099 	bne.w	8002176 <HAL_ADC_Init+0x18e>
 8002044:	7dfb      	ldrb	r3, [r7, #23]
 8002046:	2b00      	cmp	r3, #0
 8002048:	f040 8095 	bne.w	8002176 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002050:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002054:	f023 0302 	bic.w	r3, r3, #2
 8002058:	f043 0202 	orr.w	r2, r3, #2
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002068:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	7b1b      	ldrb	r3, [r3, #12]
 800206e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002070:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002072:	68ba      	ldr	r2, [r7, #8]
 8002074:	4313      	orrs	r3, r2
 8002076:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002080:	d003      	beq.n	800208a <HAL_ADC_Init+0xa2>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d102      	bne.n	8002090 <HAL_ADC_Init+0xa8>
 800208a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800208e:	e000      	b.n	8002092 <HAL_ADC_Init+0xaa>
 8002090:	2300      	movs	r3, #0
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	4313      	orrs	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	7d1b      	ldrb	r3, [r3, #20]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d119      	bne.n	80020d4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	7b1b      	ldrb	r3, [r3, #12]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d109      	bne.n	80020bc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	3b01      	subs	r3, #1
 80020ae:	035a      	lsls	r2, r3, #13
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80020b8:	613b      	str	r3, [r7, #16]
 80020ba:	e00b      	b.n	80020d4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c0:	f043 0220 	orr.w	r2, r3, #32
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020cc:	f043 0201 	orr.w	r2, r3, #1
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	430a      	orrs	r2, r1
 80020e6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689a      	ldr	r2, [r3, #8]
 80020ee:	4b28      	ldr	r3, [pc, #160]	@ (8002190 <HAL_ADC_Init+0x1a8>)
 80020f0:	4013      	ands	r3, r2
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6812      	ldr	r2, [r2, #0]
 80020f6:	68b9      	ldr	r1, [r7, #8]
 80020f8:	430b      	orrs	r3, r1
 80020fa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002104:	d003      	beq.n	800210e <HAL_ADC_Init+0x126>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d104      	bne.n	8002118 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	3b01      	subs	r3, #1
 8002114:	051b      	lsls	r3, r3, #20
 8002116:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800211e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	430a      	orrs	r2, r1
 800212a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	4b18      	ldr	r3, [pc, #96]	@ (8002194 <HAL_ADC_Init+0x1ac>)
 8002134:	4013      	ands	r3, r2
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	429a      	cmp	r2, r3
 800213a:	d10b      	bne.n	8002154 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002146:	f023 0303 	bic.w	r3, r3, #3
 800214a:	f043 0201 	orr.w	r2, r3, #1
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002152:	e018      	b.n	8002186 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002158:	f023 0312 	bic.w	r3, r3, #18
 800215c:	f043 0210 	orr.w	r2, r3, #16
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002168:	f043 0201 	orr.w	r2, r3, #1
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002174:	e007      	b.n	8002186 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800217a:	f043 0210 	orr.w	r2, r3, #16
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002186:	7dfb      	ldrb	r3, [r7, #23]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	ffe1f7fd 	.word	0xffe1f7fd
 8002194:	ff1f0efe 	.word	0xff1f0efe

08002198 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021a0:	2300      	movs	r3, #0
 80021a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d101      	bne.n	80021b2 <HAL_ADC_Start+0x1a>
 80021ae:	2302      	movs	r3, #2
 80021b0:	e098      	b.n	80022e4 <HAL_ADC_Start+0x14c>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 faa4 	bl	8002708 <ADC_Enable>
 80021c0:	4603      	mov	r3, r0
 80021c2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80021c4:	7bfb      	ldrb	r3, [r7, #15]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f040 8087 	bne.w	80022da <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021d4:	f023 0301 	bic.w	r3, r3, #1
 80021d8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a41      	ldr	r2, [pc, #260]	@ (80022ec <HAL_ADC_Start+0x154>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d105      	bne.n	80021f6 <HAL_ADC_Start+0x5e>
 80021ea:	4b41      	ldr	r3, [pc, #260]	@ (80022f0 <HAL_ADC_Start+0x158>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d115      	bne.n	8002222 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021fa:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800220c:	2b00      	cmp	r3, #0
 800220e:	d026      	beq.n	800225e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002214:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002218:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002220:	e01d      	b.n	800225e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002226:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a2f      	ldr	r2, [pc, #188]	@ (80022f0 <HAL_ADC_Start+0x158>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d004      	beq.n	8002242 <HAL_ADC_Start+0xaa>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a2b      	ldr	r2, [pc, #172]	@ (80022ec <HAL_ADC_Start+0x154>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d10d      	bne.n	800225e <HAL_ADC_Start+0xc6>
 8002242:	4b2b      	ldr	r3, [pc, #172]	@ (80022f0 <HAL_ADC_Start+0x158>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800224a:	2b00      	cmp	r3, #0
 800224c:	d007      	beq.n	800225e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002252:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002256:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002262:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d006      	beq.n	8002278 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800226e:	f023 0206 	bic.w	r2, r3, #6
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002276:	e002      	b.n	800227e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f06f 0202 	mvn.w	r2, #2
 800228e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800229a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800229e:	d113      	bne.n	80022c8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80022a4:	4a11      	ldr	r2, [pc, #68]	@ (80022ec <HAL_ADC_Start+0x154>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d105      	bne.n	80022b6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80022aa:	4b11      	ldr	r3, [pc, #68]	@ (80022f0 <HAL_ADC_Start+0x158>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d108      	bne.n	80022c8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80022c4:	609a      	str	r2, [r3, #8]
 80022c6:	e00c      	b.n	80022e2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	689a      	ldr	r2, [r3, #8]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80022d6:	609a      	str	r2, [r3, #8]
 80022d8:	e003      	b.n	80022e2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80022e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40012800 	.word	0x40012800
 80022f0:	40012400 	.word	0x40012400

080022f4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80022f4:	b590      	push	{r4, r7, lr}
 80022f6:	b087      	sub	sp, #28
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80022fe:	2300      	movs	r3, #0
 8002300:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002302:	2300      	movs	r3, #0
 8002304:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002306:	2300      	movs	r3, #0
 8002308:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800230a:	f7ff fe3f 	bl	8001f8c <HAL_GetTick>
 800230e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00b      	beq.n	8002336 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002322:	f043 0220 	orr.w	r2, r3, #32
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e0d3      	b.n	80024de <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002340:	2b00      	cmp	r3, #0
 8002342:	d131      	bne.n	80023a8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800234a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800234e:	2b00      	cmp	r3, #0
 8002350:	d12a      	bne.n	80023a8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002352:	e021      	b.n	8002398 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800235a:	d01d      	beq.n	8002398 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d007      	beq.n	8002372 <HAL_ADC_PollForConversion+0x7e>
 8002362:	f7ff fe13 	bl	8001f8c <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	429a      	cmp	r2, r3
 8002370:	d212      	bcs.n	8002398 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10b      	bne.n	8002398 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002384:	f043 0204 	orr.w	r2, r3, #4
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e0a2      	b.n	80024de <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d0d6      	beq.n	8002354 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80023a6:	e070      	b.n	800248a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80023a8:	4b4f      	ldr	r3, [pc, #316]	@ (80024e8 <HAL_ADC_PollForConversion+0x1f4>)
 80023aa:	681c      	ldr	r4, [r3, #0]
 80023ac:	2002      	movs	r0, #2
 80023ae:	f001 f8ef 	bl	8003590 <HAL_RCCEx_GetPeriphCLKFreq>
 80023b2:	4603      	mov	r3, r0
 80023b4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6919      	ldr	r1, [r3, #16]
 80023be:	4b4b      	ldr	r3, [pc, #300]	@ (80024ec <HAL_ADC_PollForConversion+0x1f8>)
 80023c0:	400b      	ands	r3, r1
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d118      	bne.n	80023f8 <HAL_ADC_PollForConversion+0x104>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68d9      	ldr	r1, [r3, #12]
 80023cc:	4b48      	ldr	r3, [pc, #288]	@ (80024f0 <HAL_ADC_PollForConversion+0x1fc>)
 80023ce:	400b      	ands	r3, r1
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d111      	bne.n	80023f8 <HAL_ADC_PollForConversion+0x104>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6919      	ldr	r1, [r3, #16]
 80023da:	4b46      	ldr	r3, [pc, #280]	@ (80024f4 <HAL_ADC_PollForConversion+0x200>)
 80023dc:	400b      	ands	r3, r1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d108      	bne.n	80023f4 <HAL_ADC_PollForConversion+0x100>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68d9      	ldr	r1, [r3, #12]
 80023e8:	4b43      	ldr	r3, [pc, #268]	@ (80024f8 <HAL_ADC_PollForConversion+0x204>)
 80023ea:	400b      	ands	r3, r1
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d101      	bne.n	80023f4 <HAL_ADC_PollForConversion+0x100>
 80023f0:	2314      	movs	r3, #20
 80023f2:	e020      	b.n	8002436 <HAL_ADC_PollForConversion+0x142>
 80023f4:	2329      	movs	r3, #41	@ 0x29
 80023f6:	e01e      	b.n	8002436 <HAL_ADC_PollForConversion+0x142>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6919      	ldr	r1, [r3, #16]
 80023fe:	4b3d      	ldr	r3, [pc, #244]	@ (80024f4 <HAL_ADC_PollForConversion+0x200>)
 8002400:	400b      	ands	r3, r1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d106      	bne.n	8002414 <HAL_ADC_PollForConversion+0x120>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68d9      	ldr	r1, [r3, #12]
 800240c:	4b3a      	ldr	r3, [pc, #232]	@ (80024f8 <HAL_ADC_PollForConversion+0x204>)
 800240e:	400b      	ands	r3, r1
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00d      	beq.n	8002430 <HAL_ADC_PollForConversion+0x13c>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6919      	ldr	r1, [r3, #16]
 800241a:	4b38      	ldr	r3, [pc, #224]	@ (80024fc <HAL_ADC_PollForConversion+0x208>)
 800241c:	400b      	ands	r3, r1
 800241e:	2b00      	cmp	r3, #0
 8002420:	d108      	bne.n	8002434 <HAL_ADC_PollForConversion+0x140>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68d9      	ldr	r1, [r3, #12]
 8002428:	4b34      	ldr	r3, [pc, #208]	@ (80024fc <HAL_ADC_PollForConversion+0x208>)
 800242a:	400b      	ands	r3, r1
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <HAL_ADC_PollForConversion+0x140>
 8002430:	2354      	movs	r3, #84	@ 0x54
 8002432:	e000      	b.n	8002436 <HAL_ADC_PollForConversion+0x142>
 8002434:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002436:	fb02 f303 	mul.w	r3, r2, r3
 800243a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800243c:	e021      	b.n	8002482 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002444:	d01a      	beq.n	800247c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d007      	beq.n	800245c <HAL_ADC_PollForConversion+0x168>
 800244c:	f7ff fd9e 	bl	8001f8c <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	429a      	cmp	r2, r3
 800245a:	d20f      	bcs.n	800247c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	429a      	cmp	r2, r3
 8002462:	d90b      	bls.n	800247c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002468:	f043 0204 	orr.w	r2, r3, #4
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e030      	b.n	80024de <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	3301      	adds	r3, #1
 8002480:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	429a      	cmp	r2, r3
 8002488:	d8d9      	bhi.n	800243e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f06f 0212 	mvn.w	r2, #18
 8002492:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002498:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80024aa:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80024ae:	d115      	bne.n	80024dc <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d111      	bne.n	80024dc <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d105      	bne.n	80024dc <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d4:	f043 0201 	orr.w	r2, r3, #1
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	371c      	adds	r7, #28
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd90      	pop	{r4, r7, pc}
 80024e6:	bf00      	nop
 80024e8:	20000008 	.word	0x20000008
 80024ec:	24924924 	.word	0x24924924
 80024f0:	00924924 	.word	0x00924924
 80024f4:	12492492 	.word	0x12492492
 80024f8:	00492492 	.word	0x00492492
 80024fc:	00249249 	.word	0x00249249

08002500 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800250e:	4618      	mov	r0, r3
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr

08002518 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002522:	2300      	movs	r3, #0
 8002524:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002526:	2300      	movs	r3, #0
 8002528:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002530:	2b01      	cmp	r3, #1
 8002532:	d101      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x20>
 8002534:	2302      	movs	r3, #2
 8002536:	e0dc      	b.n	80026f2 <HAL_ADC_ConfigChannel+0x1da>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	2b06      	cmp	r3, #6
 8002546:	d81c      	bhi.n	8002582 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	4613      	mov	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	3b05      	subs	r3, #5
 800255a:	221f      	movs	r2, #31
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	43db      	mvns	r3, r3
 8002562:	4019      	ands	r1, r3
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	6818      	ldr	r0, [r3, #0]
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	3b05      	subs	r3, #5
 8002574:	fa00 f203 	lsl.w	r2, r0, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	430a      	orrs	r2, r1
 800257e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002580:	e03c      	b.n	80025fc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b0c      	cmp	r3, #12
 8002588:	d81c      	bhi.n	80025c4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685a      	ldr	r2, [r3, #4]
 8002594:	4613      	mov	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	3b23      	subs	r3, #35	@ 0x23
 800259c:	221f      	movs	r2, #31
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	43db      	mvns	r3, r3
 80025a4:	4019      	ands	r1, r3
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	6818      	ldr	r0, [r3, #0]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685a      	ldr	r2, [r3, #4]
 80025ae:	4613      	mov	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	3b23      	subs	r3, #35	@ 0x23
 80025b6:	fa00 f203 	lsl.w	r2, r0, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	430a      	orrs	r2, r1
 80025c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80025c2:	e01b      	b.n	80025fc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	3b41      	subs	r3, #65	@ 0x41
 80025d6:	221f      	movs	r2, #31
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	4019      	ands	r1, r3
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	6818      	ldr	r0, [r3, #0]
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	4613      	mov	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	3b41      	subs	r3, #65	@ 0x41
 80025f0:	fa00 f203 	lsl.w	r2, r0, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2b09      	cmp	r3, #9
 8002602:	d91c      	bls.n	800263e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68d9      	ldr	r1, [r3, #12]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	4613      	mov	r3, r2
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	4413      	add	r3, r2
 8002614:	3b1e      	subs	r3, #30
 8002616:	2207      	movs	r2, #7
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	4019      	ands	r1, r3
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	6898      	ldr	r0, [r3, #8]
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	4613      	mov	r3, r2
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	4413      	add	r3, r2
 800262e:	3b1e      	subs	r3, #30
 8002630:	fa00 f203 	lsl.w	r2, r0, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	430a      	orrs	r2, r1
 800263a:	60da      	str	r2, [r3, #12]
 800263c:	e019      	b.n	8002672 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6919      	ldr	r1, [r3, #16]
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	4613      	mov	r3, r2
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	4413      	add	r3, r2
 800264e:	2207      	movs	r2, #7
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	4019      	ands	r1, r3
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	6898      	ldr	r0, [r3, #8]
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	4613      	mov	r3, r2
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	4413      	add	r3, r2
 8002666:	fa00 f203 	lsl.w	r2, r0, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	430a      	orrs	r2, r1
 8002670:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2b10      	cmp	r3, #16
 8002678:	d003      	beq.n	8002682 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800267e:	2b11      	cmp	r3, #17
 8002680:	d132      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a1d      	ldr	r2, [pc, #116]	@ (80026fc <HAL_ADC_ConfigChannel+0x1e4>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d125      	bne.n	80026d8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d126      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80026a8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2b10      	cmp	r3, #16
 80026b0:	d11a      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026b2:	4b13      	ldr	r3, [pc, #76]	@ (8002700 <HAL_ADC_ConfigChannel+0x1e8>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a13      	ldr	r2, [pc, #76]	@ (8002704 <HAL_ADC_ConfigChannel+0x1ec>)
 80026b8:	fba2 2303 	umull	r2, r3, r2, r3
 80026bc:	0c9a      	lsrs	r2, r3, #18
 80026be:	4613      	mov	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026c8:	e002      	b.n	80026d0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	3b01      	subs	r3, #1
 80026ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1f9      	bne.n	80026ca <HAL_ADC_ConfigChannel+0x1b2>
 80026d6:	e007      	b.n	80026e8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026dc:	f043 0220 	orr.w	r2, r3, #32
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80026f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3714      	adds	r7, #20
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bc80      	pop	{r7}
 80026fa:	4770      	bx	lr
 80026fc:	40012400 	.word	0x40012400
 8002700:	20000008 	.word	0x20000008
 8002704:	431bde83 	.word	0x431bde83

08002708 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002710:	2300      	movs	r3, #0
 8002712:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002714:	2300      	movs	r3, #0
 8002716:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b01      	cmp	r3, #1
 8002724:	d040      	beq.n	80027a8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f042 0201 	orr.w	r2, r2, #1
 8002734:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002736:	4b1f      	ldr	r3, [pc, #124]	@ (80027b4 <ADC_Enable+0xac>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a1f      	ldr	r2, [pc, #124]	@ (80027b8 <ADC_Enable+0xb0>)
 800273c:	fba2 2303 	umull	r2, r3, r2, r3
 8002740:	0c9b      	lsrs	r3, r3, #18
 8002742:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002744:	e002      	b.n	800274c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	3b01      	subs	r3, #1
 800274a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1f9      	bne.n	8002746 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002752:	f7ff fc1b 	bl	8001f8c <HAL_GetTick>
 8002756:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002758:	e01f      	b.n	800279a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800275a:	f7ff fc17 	bl	8001f8c <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d918      	bls.n	800279a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b01      	cmp	r3, #1
 8002774:	d011      	beq.n	800279a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800277a:	f043 0210 	orr.w	r2, r3, #16
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002786:	f043 0201 	orr.w	r2, r3, #1
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e007      	b.n	80027aa <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d1d8      	bne.n	800275a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	20000008 	.word	0x20000008
 80027b8:	431bde83 	.word	0x431bde83

080027bc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027c4:	2300      	movs	r3, #0
 80027c6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d12e      	bne.n	8002834 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 0201 	bic.w	r2, r2, #1
 80027e4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80027e6:	f7ff fbd1 	bl	8001f8c <HAL_GetTick>
 80027ea:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027ec:	e01b      	b.n	8002826 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027ee:	f7ff fbcd 	bl	8001f8c <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d914      	bls.n	8002826 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b01      	cmp	r3, #1
 8002808:	d10d      	bne.n	8002826 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800280e:	f043 0210 	orr.w	r2, r3, #16
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800281a:	f043 0201 	orr.w	r2, r3, #1
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e007      	b.n	8002836 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b01      	cmp	r3, #1
 8002832:	d0dc      	beq.n	80027ee <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
	...

08002840 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002850:	4b0c      	ldr	r3, [pc, #48]	@ (8002884 <__NVIC_SetPriorityGrouping+0x44>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002856:	68ba      	ldr	r2, [r7, #8]
 8002858:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800285c:	4013      	ands	r3, r2
 800285e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002868:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800286c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002872:	4a04      	ldr	r2, [pc, #16]	@ (8002884 <__NVIC_SetPriorityGrouping+0x44>)
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	60d3      	str	r3, [r2, #12]
}
 8002878:	bf00      	nop
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	bc80      	pop	{r7}
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	e000ed00 	.word	0xe000ed00

08002888 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800288c:	4b04      	ldr	r3, [pc, #16]	@ (80028a0 <__NVIC_GetPriorityGrouping+0x18>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	0a1b      	lsrs	r3, r3, #8
 8002892:	f003 0307 	and.w	r3, r3, #7
}
 8002896:	4618      	mov	r0, r3
 8002898:	46bd      	mov	sp, r7
 800289a:	bc80      	pop	{r7}
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	e000ed00 	.word	0xe000ed00

080028a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	6039      	str	r1, [r7, #0]
 80028ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	db0a      	blt.n	80028ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	490c      	ldr	r1, [pc, #48]	@ (80028f0 <__NVIC_SetPriority+0x4c>)
 80028be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c2:	0112      	lsls	r2, r2, #4
 80028c4:	b2d2      	uxtb	r2, r2
 80028c6:	440b      	add	r3, r1
 80028c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028cc:	e00a      	b.n	80028e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	4908      	ldr	r1, [pc, #32]	@ (80028f4 <__NVIC_SetPriority+0x50>)
 80028d4:	79fb      	ldrb	r3, [r7, #7]
 80028d6:	f003 030f 	and.w	r3, r3, #15
 80028da:	3b04      	subs	r3, #4
 80028dc:	0112      	lsls	r2, r2, #4
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	440b      	add	r3, r1
 80028e2:	761a      	strb	r2, [r3, #24]
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	e000e100 	.word	0xe000e100
 80028f4:	e000ed00 	.word	0xe000ed00

080028f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b089      	sub	sp, #36	@ 0x24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f003 0307 	and.w	r3, r3, #7
 800290a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	f1c3 0307 	rsb	r3, r3, #7
 8002912:	2b04      	cmp	r3, #4
 8002914:	bf28      	it	cs
 8002916:	2304      	movcs	r3, #4
 8002918:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	3304      	adds	r3, #4
 800291e:	2b06      	cmp	r3, #6
 8002920:	d902      	bls.n	8002928 <NVIC_EncodePriority+0x30>
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	3b03      	subs	r3, #3
 8002926:	e000      	b.n	800292a <NVIC_EncodePriority+0x32>
 8002928:	2300      	movs	r3, #0
 800292a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800292c:	f04f 32ff 	mov.w	r2, #4294967295
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	43da      	mvns	r2, r3
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	401a      	ands	r2, r3
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002940:	f04f 31ff 	mov.w	r1, #4294967295
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	fa01 f303 	lsl.w	r3, r1, r3
 800294a:	43d9      	mvns	r1, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002950:	4313      	orrs	r3, r2
         );
}
 8002952:	4618      	mov	r0, r3
 8002954:	3724      	adds	r7, #36	@ 0x24
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr

0800295c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3b01      	subs	r3, #1
 8002968:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800296c:	d301      	bcc.n	8002972 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800296e:	2301      	movs	r3, #1
 8002970:	e00f      	b.n	8002992 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002972:	4a0a      	ldr	r2, [pc, #40]	@ (800299c <SysTick_Config+0x40>)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3b01      	subs	r3, #1
 8002978:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800297a:	210f      	movs	r1, #15
 800297c:	f04f 30ff 	mov.w	r0, #4294967295
 8002980:	f7ff ff90 	bl	80028a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002984:	4b05      	ldr	r3, [pc, #20]	@ (800299c <SysTick_Config+0x40>)
 8002986:	2200      	movs	r2, #0
 8002988:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800298a:	4b04      	ldr	r3, [pc, #16]	@ (800299c <SysTick_Config+0x40>)
 800298c:	2207      	movs	r2, #7
 800298e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	e000e010 	.word	0xe000e010

080029a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f7ff ff49 	bl	8002840 <__NVIC_SetPriorityGrouping>
}
 80029ae:	bf00      	nop
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b086      	sub	sp, #24
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	4603      	mov	r3, r0
 80029be:	60b9      	str	r1, [r7, #8]
 80029c0:	607a      	str	r2, [r7, #4]
 80029c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029c8:	f7ff ff5e 	bl	8002888 <__NVIC_GetPriorityGrouping>
 80029cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	68b9      	ldr	r1, [r7, #8]
 80029d2:	6978      	ldr	r0, [r7, #20]
 80029d4:	f7ff ff90 	bl	80028f8 <NVIC_EncodePriority>
 80029d8:	4602      	mov	r2, r0
 80029da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029de:	4611      	mov	r1, r2
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff ff5f 	bl	80028a4 <__NVIC_SetPriority>
}
 80029e6:	bf00      	nop
 80029e8:	3718      	adds	r7, #24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b082      	sub	sp, #8
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7ff ffb0 	bl	800295c <SysTick_Config>
 80029fc:	4603      	mov	r3, r0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
	...

08002a08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b08b      	sub	sp, #44	@ 0x2c
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a12:	2300      	movs	r3, #0
 8002a14:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a16:	2300      	movs	r3, #0
 8002a18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a1a:	e169      	b.n	8002cf0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	69fa      	ldr	r2, [r7, #28]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	f040 8158 	bne.w	8002cea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	4a9a      	ldr	r2, [pc, #616]	@ (8002ca8 <HAL_GPIO_Init+0x2a0>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d05e      	beq.n	8002b02 <HAL_GPIO_Init+0xfa>
 8002a44:	4a98      	ldr	r2, [pc, #608]	@ (8002ca8 <HAL_GPIO_Init+0x2a0>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d875      	bhi.n	8002b36 <HAL_GPIO_Init+0x12e>
 8002a4a:	4a98      	ldr	r2, [pc, #608]	@ (8002cac <HAL_GPIO_Init+0x2a4>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d058      	beq.n	8002b02 <HAL_GPIO_Init+0xfa>
 8002a50:	4a96      	ldr	r2, [pc, #600]	@ (8002cac <HAL_GPIO_Init+0x2a4>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d86f      	bhi.n	8002b36 <HAL_GPIO_Init+0x12e>
 8002a56:	4a96      	ldr	r2, [pc, #600]	@ (8002cb0 <HAL_GPIO_Init+0x2a8>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d052      	beq.n	8002b02 <HAL_GPIO_Init+0xfa>
 8002a5c:	4a94      	ldr	r2, [pc, #592]	@ (8002cb0 <HAL_GPIO_Init+0x2a8>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d869      	bhi.n	8002b36 <HAL_GPIO_Init+0x12e>
 8002a62:	4a94      	ldr	r2, [pc, #592]	@ (8002cb4 <HAL_GPIO_Init+0x2ac>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d04c      	beq.n	8002b02 <HAL_GPIO_Init+0xfa>
 8002a68:	4a92      	ldr	r2, [pc, #584]	@ (8002cb4 <HAL_GPIO_Init+0x2ac>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d863      	bhi.n	8002b36 <HAL_GPIO_Init+0x12e>
 8002a6e:	4a92      	ldr	r2, [pc, #584]	@ (8002cb8 <HAL_GPIO_Init+0x2b0>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d046      	beq.n	8002b02 <HAL_GPIO_Init+0xfa>
 8002a74:	4a90      	ldr	r2, [pc, #576]	@ (8002cb8 <HAL_GPIO_Init+0x2b0>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d85d      	bhi.n	8002b36 <HAL_GPIO_Init+0x12e>
 8002a7a:	2b12      	cmp	r3, #18
 8002a7c:	d82a      	bhi.n	8002ad4 <HAL_GPIO_Init+0xcc>
 8002a7e:	2b12      	cmp	r3, #18
 8002a80:	d859      	bhi.n	8002b36 <HAL_GPIO_Init+0x12e>
 8002a82:	a201      	add	r2, pc, #4	@ (adr r2, 8002a88 <HAL_GPIO_Init+0x80>)
 8002a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a88:	08002b03 	.word	0x08002b03
 8002a8c:	08002add 	.word	0x08002add
 8002a90:	08002aef 	.word	0x08002aef
 8002a94:	08002b31 	.word	0x08002b31
 8002a98:	08002b37 	.word	0x08002b37
 8002a9c:	08002b37 	.word	0x08002b37
 8002aa0:	08002b37 	.word	0x08002b37
 8002aa4:	08002b37 	.word	0x08002b37
 8002aa8:	08002b37 	.word	0x08002b37
 8002aac:	08002b37 	.word	0x08002b37
 8002ab0:	08002b37 	.word	0x08002b37
 8002ab4:	08002b37 	.word	0x08002b37
 8002ab8:	08002b37 	.word	0x08002b37
 8002abc:	08002b37 	.word	0x08002b37
 8002ac0:	08002b37 	.word	0x08002b37
 8002ac4:	08002b37 	.word	0x08002b37
 8002ac8:	08002b37 	.word	0x08002b37
 8002acc:	08002ae5 	.word	0x08002ae5
 8002ad0:	08002af9 	.word	0x08002af9
 8002ad4:	4a79      	ldr	r2, [pc, #484]	@ (8002cbc <HAL_GPIO_Init+0x2b4>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d013      	beq.n	8002b02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002ada:	e02c      	b.n	8002b36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	623b      	str	r3, [r7, #32]
          break;
 8002ae2:	e029      	b.n	8002b38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	3304      	adds	r3, #4
 8002aea:	623b      	str	r3, [r7, #32]
          break;
 8002aec:	e024      	b.n	8002b38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	3308      	adds	r3, #8
 8002af4:	623b      	str	r3, [r7, #32]
          break;
 8002af6:	e01f      	b.n	8002b38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	330c      	adds	r3, #12
 8002afe:	623b      	str	r3, [r7, #32]
          break;
 8002b00:	e01a      	b.n	8002b38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d102      	bne.n	8002b10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b0a:	2304      	movs	r3, #4
 8002b0c:	623b      	str	r3, [r7, #32]
          break;
 8002b0e:	e013      	b.n	8002b38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d105      	bne.n	8002b24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b18:	2308      	movs	r3, #8
 8002b1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	69fa      	ldr	r2, [r7, #28]
 8002b20:	611a      	str	r2, [r3, #16]
          break;
 8002b22:	e009      	b.n	8002b38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b24:	2308      	movs	r3, #8
 8002b26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	69fa      	ldr	r2, [r7, #28]
 8002b2c:	615a      	str	r2, [r3, #20]
          break;
 8002b2e:	e003      	b.n	8002b38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b30:	2300      	movs	r3, #0
 8002b32:	623b      	str	r3, [r7, #32]
          break;
 8002b34:	e000      	b.n	8002b38 <HAL_GPIO_Init+0x130>
          break;
 8002b36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	2bff      	cmp	r3, #255	@ 0xff
 8002b3c:	d801      	bhi.n	8002b42 <HAL_GPIO_Init+0x13a>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	e001      	b.n	8002b46 <HAL_GPIO_Init+0x13e>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	3304      	adds	r3, #4
 8002b46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	2bff      	cmp	r3, #255	@ 0xff
 8002b4c:	d802      	bhi.n	8002b54 <HAL_GPIO_Init+0x14c>
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	e002      	b.n	8002b5a <HAL_GPIO_Init+0x152>
 8002b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b56:	3b08      	subs	r3, #8
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	210f      	movs	r1, #15
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	fa01 f303 	lsl.w	r3, r1, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	401a      	ands	r2, r3
 8002b6c:	6a39      	ldr	r1, [r7, #32]
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	fa01 f303 	lsl.w	r3, r1, r3
 8002b74:	431a      	orrs	r2, r3
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f000 80b1 	beq.w	8002cea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b88:	4b4d      	ldr	r3, [pc, #308]	@ (8002cc0 <HAL_GPIO_Init+0x2b8>)
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	4a4c      	ldr	r2, [pc, #304]	@ (8002cc0 <HAL_GPIO_Init+0x2b8>)
 8002b8e:	f043 0301 	orr.w	r3, r3, #1
 8002b92:	6193      	str	r3, [r2, #24]
 8002b94:	4b4a      	ldr	r3, [pc, #296]	@ (8002cc0 <HAL_GPIO_Init+0x2b8>)
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	60bb      	str	r3, [r7, #8]
 8002b9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ba0:	4a48      	ldr	r2, [pc, #288]	@ (8002cc4 <HAL_GPIO_Init+0x2bc>)
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba4:	089b      	lsrs	r3, r3, #2
 8002ba6:	3302      	adds	r3, #2
 8002ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb0:	f003 0303 	and.w	r3, r3, #3
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	220f      	movs	r2, #15
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a40      	ldr	r2, [pc, #256]	@ (8002cc8 <HAL_GPIO_Init+0x2c0>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d013      	beq.n	8002bf4 <HAL_GPIO_Init+0x1ec>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a3f      	ldr	r2, [pc, #252]	@ (8002ccc <HAL_GPIO_Init+0x2c4>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d00d      	beq.n	8002bf0 <HAL_GPIO_Init+0x1e8>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a3e      	ldr	r2, [pc, #248]	@ (8002cd0 <HAL_GPIO_Init+0x2c8>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d007      	beq.n	8002bec <HAL_GPIO_Init+0x1e4>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a3d      	ldr	r2, [pc, #244]	@ (8002cd4 <HAL_GPIO_Init+0x2cc>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d101      	bne.n	8002be8 <HAL_GPIO_Init+0x1e0>
 8002be4:	2303      	movs	r3, #3
 8002be6:	e006      	b.n	8002bf6 <HAL_GPIO_Init+0x1ee>
 8002be8:	2304      	movs	r3, #4
 8002bea:	e004      	b.n	8002bf6 <HAL_GPIO_Init+0x1ee>
 8002bec:	2302      	movs	r3, #2
 8002bee:	e002      	b.n	8002bf6 <HAL_GPIO_Init+0x1ee>
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e000      	b.n	8002bf6 <HAL_GPIO_Init+0x1ee>
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bf8:	f002 0203 	and.w	r2, r2, #3
 8002bfc:	0092      	lsls	r2, r2, #2
 8002bfe:	4093      	lsls	r3, r2
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c06:	492f      	ldr	r1, [pc, #188]	@ (8002cc4 <HAL_GPIO_Init+0x2bc>)
 8002c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0a:	089b      	lsrs	r3, r3, #2
 8002c0c:	3302      	adds	r3, #2
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d006      	beq.n	8002c2e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c20:	4b2d      	ldr	r3, [pc, #180]	@ (8002cd8 <HAL_GPIO_Init+0x2d0>)
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	492c      	ldr	r1, [pc, #176]	@ (8002cd8 <HAL_GPIO_Init+0x2d0>)
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	608b      	str	r3, [r1, #8]
 8002c2c:	e006      	b.n	8002c3c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c2e:	4b2a      	ldr	r3, [pc, #168]	@ (8002cd8 <HAL_GPIO_Init+0x2d0>)
 8002c30:	689a      	ldr	r2, [r3, #8]
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	43db      	mvns	r3, r3
 8002c36:	4928      	ldr	r1, [pc, #160]	@ (8002cd8 <HAL_GPIO_Init+0x2d0>)
 8002c38:	4013      	ands	r3, r2
 8002c3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d006      	beq.n	8002c56 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c48:	4b23      	ldr	r3, [pc, #140]	@ (8002cd8 <HAL_GPIO_Init+0x2d0>)
 8002c4a:	68da      	ldr	r2, [r3, #12]
 8002c4c:	4922      	ldr	r1, [pc, #136]	@ (8002cd8 <HAL_GPIO_Init+0x2d0>)
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	60cb      	str	r3, [r1, #12]
 8002c54:	e006      	b.n	8002c64 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c56:	4b20      	ldr	r3, [pc, #128]	@ (8002cd8 <HAL_GPIO_Init+0x2d0>)
 8002c58:	68da      	ldr	r2, [r3, #12]
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	491e      	ldr	r1, [pc, #120]	@ (8002cd8 <HAL_GPIO_Init+0x2d0>)
 8002c60:	4013      	ands	r3, r2
 8002c62:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d006      	beq.n	8002c7e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c70:	4b19      	ldr	r3, [pc, #100]	@ (8002cd8 <HAL_GPIO_Init+0x2d0>)
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	4918      	ldr	r1, [pc, #96]	@ (8002cd8 <HAL_GPIO_Init+0x2d0>)
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	604b      	str	r3, [r1, #4]
 8002c7c:	e006      	b.n	8002c8c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c7e:	4b16      	ldr	r3, [pc, #88]	@ (8002cd8 <HAL_GPIO_Init+0x2d0>)
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	43db      	mvns	r3, r3
 8002c86:	4914      	ldr	r1, [pc, #80]	@ (8002cd8 <HAL_GPIO_Init+0x2d0>)
 8002c88:	4013      	ands	r3, r2
 8002c8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d021      	beq.n	8002cdc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c98:	4b0f      	ldr	r3, [pc, #60]	@ (8002cd8 <HAL_GPIO_Init+0x2d0>)
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	490e      	ldr	r1, [pc, #56]	@ (8002cd8 <HAL_GPIO_Init+0x2d0>)
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	600b      	str	r3, [r1, #0]
 8002ca4:	e021      	b.n	8002cea <HAL_GPIO_Init+0x2e2>
 8002ca6:	bf00      	nop
 8002ca8:	10320000 	.word	0x10320000
 8002cac:	10310000 	.word	0x10310000
 8002cb0:	10220000 	.word	0x10220000
 8002cb4:	10210000 	.word	0x10210000
 8002cb8:	10120000 	.word	0x10120000
 8002cbc:	10110000 	.word	0x10110000
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	40010000 	.word	0x40010000
 8002cc8:	40010800 	.word	0x40010800
 8002ccc:	40010c00 	.word	0x40010c00
 8002cd0:	40011000 	.word	0x40011000
 8002cd4:	40011400 	.word	0x40011400
 8002cd8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8002d0c <HAL_GPIO_Init+0x304>)
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	43db      	mvns	r3, r3
 8002ce4:	4909      	ldr	r1, [pc, #36]	@ (8002d0c <HAL_GPIO_Init+0x304>)
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cec:	3301      	adds	r3, #1
 8002cee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f47f ae8e 	bne.w	8002a1c <HAL_GPIO_Init+0x14>
  }
}
 8002d00:	bf00      	nop
 8002d02:	bf00      	nop
 8002d04:	372c      	adds	r7, #44	@ 0x2c
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr
 8002d0c:	40010400 	.word	0x40010400

08002d10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	887b      	ldrh	r3, [r7, #2]
 8002d22:	4013      	ands	r3, r2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d002      	beq.n	8002d2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	73fb      	strb	r3, [r7, #15]
 8002d2c:	e001      	b.n	8002d32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bc80      	pop	{r7}
 8002d3c:	4770      	bx	lr

08002d3e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
 8002d46:	460b      	mov	r3, r1
 8002d48:	807b      	strh	r3, [r7, #2]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d4e:	787b      	ldrb	r3, [r7, #1]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d003      	beq.n	8002d5c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d54:	887a      	ldrh	r2, [r7, #2]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d5a:	e003      	b.n	8002d64 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d5c:	887b      	ldrh	r3, [r7, #2]
 8002d5e:	041a      	lsls	r2, r3, #16
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	611a      	str	r2, [r3, #16]
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bc80      	pop	{r7}
 8002d6c:	4770      	bx	lr
	...

08002d70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e272      	b.n	8003268 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f000 8087 	beq.w	8002e9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d90:	4b92      	ldr	r3, [pc, #584]	@ (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f003 030c 	and.w	r3, r3, #12
 8002d98:	2b04      	cmp	r3, #4
 8002d9a:	d00c      	beq.n	8002db6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d9c:	4b8f      	ldr	r3, [pc, #572]	@ (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f003 030c 	and.w	r3, r3, #12
 8002da4:	2b08      	cmp	r3, #8
 8002da6:	d112      	bne.n	8002dce <HAL_RCC_OscConfig+0x5e>
 8002da8:	4b8c      	ldr	r3, [pc, #560]	@ (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002db0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002db4:	d10b      	bne.n	8002dce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db6:	4b89      	ldr	r3, [pc, #548]	@ (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d06c      	beq.n	8002e9c <HAL_RCC_OscConfig+0x12c>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d168      	bne.n	8002e9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e24c      	b.n	8003268 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dd6:	d106      	bne.n	8002de6 <HAL_RCC_OscConfig+0x76>
 8002dd8:	4b80      	ldr	r3, [pc, #512]	@ (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a7f      	ldr	r2, [pc, #508]	@ (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002dde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002de2:	6013      	str	r3, [r2, #0]
 8002de4:	e02e      	b.n	8002e44 <HAL_RCC_OscConfig+0xd4>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10c      	bne.n	8002e08 <HAL_RCC_OscConfig+0x98>
 8002dee:	4b7b      	ldr	r3, [pc, #492]	@ (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a7a      	ldr	r2, [pc, #488]	@ (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002df4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002df8:	6013      	str	r3, [r2, #0]
 8002dfa:	4b78      	ldr	r3, [pc, #480]	@ (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a77      	ldr	r2, [pc, #476]	@ (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002e00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e04:	6013      	str	r3, [r2, #0]
 8002e06:	e01d      	b.n	8002e44 <HAL_RCC_OscConfig+0xd4>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e10:	d10c      	bne.n	8002e2c <HAL_RCC_OscConfig+0xbc>
 8002e12:	4b72      	ldr	r3, [pc, #456]	@ (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a71      	ldr	r2, [pc, #452]	@ (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002e18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e1c:	6013      	str	r3, [r2, #0]
 8002e1e:	4b6f      	ldr	r3, [pc, #444]	@ (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a6e      	ldr	r2, [pc, #440]	@ (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002e24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e28:	6013      	str	r3, [r2, #0]
 8002e2a:	e00b      	b.n	8002e44 <HAL_RCC_OscConfig+0xd4>
 8002e2c:	4b6b      	ldr	r3, [pc, #428]	@ (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a6a      	ldr	r2, [pc, #424]	@ (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002e32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e36:	6013      	str	r3, [r2, #0]
 8002e38:	4b68      	ldr	r3, [pc, #416]	@ (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a67      	ldr	r2, [pc, #412]	@ (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002e3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d013      	beq.n	8002e74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4c:	f7ff f89e 	bl	8001f8c <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e54:	f7ff f89a 	bl	8001f8c <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b64      	cmp	r3, #100	@ 0x64
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e200      	b.n	8003268 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e66:	4b5d      	ldr	r3, [pc, #372]	@ (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0f0      	beq.n	8002e54 <HAL_RCC_OscConfig+0xe4>
 8002e72:	e014      	b.n	8002e9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e74:	f7ff f88a 	bl	8001f8c <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e7c:	f7ff f886 	bl	8001f8c <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b64      	cmp	r3, #100	@ 0x64
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e1ec      	b.n	8003268 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e8e:	4b53      	ldr	r3, [pc, #332]	@ (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1f0      	bne.n	8002e7c <HAL_RCC_OscConfig+0x10c>
 8002e9a:	e000      	b.n	8002e9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d063      	beq.n	8002f72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002eaa:	4b4c      	ldr	r3, [pc, #304]	@ (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f003 030c 	and.w	r3, r3, #12
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00b      	beq.n	8002ece <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002eb6:	4b49      	ldr	r3, [pc, #292]	@ (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f003 030c 	and.w	r3, r3, #12
 8002ebe:	2b08      	cmp	r3, #8
 8002ec0:	d11c      	bne.n	8002efc <HAL_RCC_OscConfig+0x18c>
 8002ec2:	4b46      	ldr	r3, [pc, #280]	@ (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d116      	bne.n	8002efc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ece:	4b43      	ldr	r3, [pc, #268]	@ (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d005      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x176>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d001      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e1c0      	b.n	8003268 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ee6:	4b3d      	ldr	r3, [pc, #244]	@ (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	4939      	ldr	r1, [pc, #228]	@ (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002efa:	e03a      	b.n	8002f72 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d020      	beq.n	8002f46 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f04:	4b36      	ldr	r3, [pc, #216]	@ (8002fe0 <HAL_RCC_OscConfig+0x270>)
 8002f06:	2201      	movs	r2, #1
 8002f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0a:	f7ff f83f 	bl	8001f8c <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f10:	e008      	b.n	8002f24 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f12:	f7ff f83b 	bl	8001f8c <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e1a1      	b.n	8003268 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f24:	4b2d      	ldr	r3, [pc, #180]	@ (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0f0      	beq.n	8002f12 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f30:	4b2a      	ldr	r3, [pc, #168]	@ (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	4927      	ldr	r1, [pc, #156]	@ (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	600b      	str	r3, [r1, #0]
 8002f44:	e015      	b.n	8002f72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f46:	4b26      	ldr	r3, [pc, #152]	@ (8002fe0 <HAL_RCC_OscConfig+0x270>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4c:	f7ff f81e 	bl	8001f8c <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f54:	f7ff f81a 	bl	8001f8c <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e180      	b.n	8003268 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f66:	4b1d      	ldr	r3, [pc, #116]	@ (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1f0      	bne.n	8002f54 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d03a      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d019      	beq.n	8002fba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f86:	4b17      	ldr	r3, [pc, #92]	@ (8002fe4 <HAL_RCC_OscConfig+0x274>)
 8002f88:	2201      	movs	r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f8c:	f7fe fffe 	bl	8001f8c <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f94:	f7fe fffa 	bl	8001f8c <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e160      	b.n	8003268 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d0f0      	beq.n	8002f94 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002fb2:	2001      	movs	r0, #1
 8002fb4:	f000 face 	bl	8003554 <RCC_Delay>
 8002fb8:	e01c      	b.n	8002ff4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fba:	4b0a      	ldr	r3, [pc, #40]	@ (8002fe4 <HAL_RCC_OscConfig+0x274>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fc0:	f7fe ffe4 	bl	8001f8c <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fc6:	e00f      	b.n	8002fe8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fc8:	f7fe ffe0 	bl	8001f8c <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d908      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e146      	b.n	8003268 <HAL_RCC_OscConfig+0x4f8>
 8002fda:	bf00      	nop
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	42420000 	.word	0x42420000
 8002fe4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fe8:	4b92      	ldr	r3, [pc, #584]	@ (8003234 <HAL_RCC_OscConfig+0x4c4>)
 8002fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1e9      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f000 80a6 	beq.w	800314e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003002:	2300      	movs	r3, #0
 8003004:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003006:	4b8b      	ldr	r3, [pc, #556]	@ (8003234 <HAL_RCC_OscConfig+0x4c4>)
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10d      	bne.n	800302e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003012:	4b88      	ldr	r3, [pc, #544]	@ (8003234 <HAL_RCC_OscConfig+0x4c4>)
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	4a87      	ldr	r2, [pc, #540]	@ (8003234 <HAL_RCC_OscConfig+0x4c4>)
 8003018:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800301c:	61d3      	str	r3, [r2, #28]
 800301e:	4b85      	ldr	r3, [pc, #532]	@ (8003234 <HAL_RCC_OscConfig+0x4c4>)
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003026:	60bb      	str	r3, [r7, #8]
 8003028:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800302a:	2301      	movs	r3, #1
 800302c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800302e:	4b82      	ldr	r3, [pc, #520]	@ (8003238 <HAL_RCC_OscConfig+0x4c8>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003036:	2b00      	cmp	r3, #0
 8003038:	d118      	bne.n	800306c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800303a:	4b7f      	ldr	r3, [pc, #508]	@ (8003238 <HAL_RCC_OscConfig+0x4c8>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a7e      	ldr	r2, [pc, #504]	@ (8003238 <HAL_RCC_OscConfig+0x4c8>)
 8003040:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003044:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003046:	f7fe ffa1 	bl	8001f8c <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800304c:	e008      	b.n	8003060 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800304e:	f7fe ff9d 	bl	8001f8c <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b64      	cmp	r3, #100	@ 0x64
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e103      	b.n	8003268 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003060:	4b75      	ldr	r3, [pc, #468]	@ (8003238 <HAL_RCC_OscConfig+0x4c8>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003068:	2b00      	cmp	r3, #0
 800306a:	d0f0      	beq.n	800304e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d106      	bne.n	8003082 <HAL_RCC_OscConfig+0x312>
 8003074:	4b6f      	ldr	r3, [pc, #444]	@ (8003234 <HAL_RCC_OscConfig+0x4c4>)
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	4a6e      	ldr	r2, [pc, #440]	@ (8003234 <HAL_RCC_OscConfig+0x4c4>)
 800307a:	f043 0301 	orr.w	r3, r3, #1
 800307e:	6213      	str	r3, [r2, #32]
 8003080:	e02d      	b.n	80030de <HAL_RCC_OscConfig+0x36e>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10c      	bne.n	80030a4 <HAL_RCC_OscConfig+0x334>
 800308a:	4b6a      	ldr	r3, [pc, #424]	@ (8003234 <HAL_RCC_OscConfig+0x4c4>)
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	4a69      	ldr	r2, [pc, #420]	@ (8003234 <HAL_RCC_OscConfig+0x4c4>)
 8003090:	f023 0301 	bic.w	r3, r3, #1
 8003094:	6213      	str	r3, [r2, #32]
 8003096:	4b67      	ldr	r3, [pc, #412]	@ (8003234 <HAL_RCC_OscConfig+0x4c4>)
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	4a66      	ldr	r2, [pc, #408]	@ (8003234 <HAL_RCC_OscConfig+0x4c4>)
 800309c:	f023 0304 	bic.w	r3, r3, #4
 80030a0:	6213      	str	r3, [r2, #32]
 80030a2:	e01c      	b.n	80030de <HAL_RCC_OscConfig+0x36e>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	2b05      	cmp	r3, #5
 80030aa:	d10c      	bne.n	80030c6 <HAL_RCC_OscConfig+0x356>
 80030ac:	4b61      	ldr	r3, [pc, #388]	@ (8003234 <HAL_RCC_OscConfig+0x4c4>)
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	4a60      	ldr	r2, [pc, #384]	@ (8003234 <HAL_RCC_OscConfig+0x4c4>)
 80030b2:	f043 0304 	orr.w	r3, r3, #4
 80030b6:	6213      	str	r3, [r2, #32]
 80030b8:	4b5e      	ldr	r3, [pc, #376]	@ (8003234 <HAL_RCC_OscConfig+0x4c4>)
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	4a5d      	ldr	r2, [pc, #372]	@ (8003234 <HAL_RCC_OscConfig+0x4c4>)
 80030be:	f043 0301 	orr.w	r3, r3, #1
 80030c2:	6213      	str	r3, [r2, #32]
 80030c4:	e00b      	b.n	80030de <HAL_RCC_OscConfig+0x36e>
 80030c6:	4b5b      	ldr	r3, [pc, #364]	@ (8003234 <HAL_RCC_OscConfig+0x4c4>)
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	4a5a      	ldr	r2, [pc, #360]	@ (8003234 <HAL_RCC_OscConfig+0x4c4>)
 80030cc:	f023 0301 	bic.w	r3, r3, #1
 80030d0:	6213      	str	r3, [r2, #32]
 80030d2:	4b58      	ldr	r3, [pc, #352]	@ (8003234 <HAL_RCC_OscConfig+0x4c4>)
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	4a57      	ldr	r2, [pc, #348]	@ (8003234 <HAL_RCC_OscConfig+0x4c4>)
 80030d8:	f023 0304 	bic.w	r3, r3, #4
 80030dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d015      	beq.n	8003112 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030e6:	f7fe ff51 	bl	8001f8c <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ec:	e00a      	b.n	8003104 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ee:	f7fe ff4d 	bl	8001f8c <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e0b1      	b.n	8003268 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003104:	4b4b      	ldr	r3, [pc, #300]	@ (8003234 <HAL_RCC_OscConfig+0x4c4>)
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d0ee      	beq.n	80030ee <HAL_RCC_OscConfig+0x37e>
 8003110:	e014      	b.n	800313c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003112:	f7fe ff3b 	bl	8001f8c <HAL_GetTick>
 8003116:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003118:	e00a      	b.n	8003130 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800311a:	f7fe ff37 	bl	8001f8c <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003128:	4293      	cmp	r3, r2
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e09b      	b.n	8003268 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003130:	4b40      	ldr	r3, [pc, #256]	@ (8003234 <HAL_RCC_OscConfig+0x4c4>)
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1ee      	bne.n	800311a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800313c:	7dfb      	ldrb	r3, [r7, #23]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d105      	bne.n	800314e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003142:	4b3c      	ldr	r3, [pc, #240]	@ (8003234 <HAL_RCC_OscConfig+0x4c4>)
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	4a3b      	ldr	r2, [pc, #236]	@ (8003234 <HAL_RCC_OscConfig+0x4c4>)
 8003148:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800314c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	2b00      	cmp	r3, #0
 8003154:	f000 8087 	beq.w	8003266 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003158:	4b36      	ldr	r3, [pc, #216]	@ (8003234 <HAL_RCC_OscConfig+0x4c4>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f003 030c 	and.w	r3, r3, #12
 8003160:	2b08      	cmp	r3, #8
 8003162:	d061      	beq.n	8003228 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	69db      	ldr	r3, [r3, #28]
 8003168:	2b02      	cmp	r3, #2
 800316a:	d146      	bne.n	80031fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800316c:	4b33      	ldr	r3, [pc, #204]	@ (800323c <HAL_RCC_OscConfig+0x4cc>)
 800316e:	2200      	movs	r2, #0
 8003170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003172:	f7fe ff0b 	bl	8001f8c <HAL_GetTick>
 8003176:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003178:	e008      	b.n	800318c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800317a:	f7fe ff07 	bl	8001f8c <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	2b02      	cmp	r3, #2
 8003186:	d901      	bls.n	800318c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e06d      	b.n	8003268 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800318c:	4b29      	ldr	r3, [pc, #164]	@ (8003234 <HAL_RCC_OscConfig+0x4c4>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1f0      	bne.n	800317a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031a0:	d108      	bne.n	80031b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80031a2:	4b24      	ldr	r3, [pc, #144]	@ (8003234 <HAL_RCC_OscConfig+0x4c4>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	4921      	ldr	r1, [pc, #132]	@ (8003234 <HAL_RCC_OscConfig+0x4c4>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031b4:	4b1f      	ldr	r3, [pc, #124]	@ (8003234 <HAL_RCC_OscConfig+0x4c4>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a19      	ldr	r1, [r3, #32]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c4:	430b      	orrs	r3, r1
 80031c6:	491b      	ldr	r1, [pc, #108]	@ (8003234 <HAL_RCC_OscConfig+0x4c4>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031cc:	4b1b      	ldr	r3, [pc, #108]	@ (800323c <HAL_RCC_OscConfig+0x4cc>)
 80031ce:	2201      	movs	r2, #1
 80031d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d2:	f7fe fedb 	bl	8001f8c <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031d8:	e008      	b.n	80031ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031da:	f7fe fed7 	bl	8001f8c <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e03d      	b.n	8003268 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031ec:	4b11      	ldr	r3, [pc, #68]	@ (8003234 <HAL_RCC_OscConfig+0x4c4>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0f0      	beq.n	80031da <HAL_RCC_OscConfig+0x46a>
 80031f8:	e035      	b.n	8003266 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031fa:	4b10      	ldr	r3, [pc, #64]	@ (800323c <HAL_RCC_OscConfig+0x4cc>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003200:	f7fe fec4 	bl	8001f8c <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003208:	f7fe fec0 	bl	8001f8c <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e026      	b.n	8003268 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800321a:	4b06      	ldr	r3, [pc, #24]	@ (8003234 <HAL_RCC_OscConfig+0x4c4>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1f0      	bne.n	8003208 <HAL_RCC_OscConfig+0x498>
 8003226:	e01e      	b.n	8003266 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	69db      	ldr	r3, [r3, #28]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d107      	bne.n	8003240 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e019      	b.n	8003268 <HAL_RCC_OscConfig+0x4f8>
 8003234:	40021000 	.word	0x40021000
 8003238:	40007000 	.word	0x40007000
 800323c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003240:	4b0b      	ldr	r3, [pc, #44]	@ (8003270 <HAL_RCC_OscConfig+0x500>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	429a      	cmp	r2, r3
 8003252:	d106      	bne.n	8003262 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800325e:	429a      	cmp	r2, r3
 8003260:	d001      	beq.n	8003266 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e000      	b.n	8003268 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3718      	adds	r7, #24
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40021000 	.word	0x40021000

08003274 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e0d0      	b.n	800342a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003288:	4b6a      	ldr	r3, [pc, #424]	@ (8003434 <HAL_RCC_ClockConfig+0x1c0>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	429a      	cmp	r2, r3
 8003294:	d910      	bls.n	80032b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003296:	4b67      	ldr	r3, [pc, #412]	@ (8003434 <HAL_RCC_ClockConfig+0x1c0>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f023 0207 	bic.w	r2, r3, #7
 800329e:	4965      	ldr	r1, [pc, #404]	@ (8003434 <HAL_RCC_ClockConfig+0x1c0>)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032a6:	4b63      	ldr	r3, [pc, #396]	@ (8003434 <HAL_RCC_ClockConfig+0x1c0>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0307 	and.w	r3, r3, #7
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d001      	beq.n	80032b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e0b8      	b.n	800342a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d020      	beq.n	8003306 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d005      	beq.n	80032dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032d0:	4b59      	ldr	r3, [pc, #356]	@ (8003438 <HAL_RCC_ClockConfig+0x1c4>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	4a58      	ldr	r2, [pc, #352]	@ (8003438 <HAL_RCC_ClockConfig+0x1c4>)
 80032d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80032da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0308 	and.w	r3, r3, #8
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d005      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032e8:	4b53      	ldr	r3, [pc, #332]	@ (8003438 <HAL_RCC_ClockConfig+0x1c4>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	4a52      	ldr	r2, [pc, #328]	@ (8003438 <HAL_RCC_ClockConfig+0x1c4>)
 80032ee:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80032f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032f4:	4b50      	ldr	r3, [pc, #320]	@ (8003438 <HAL_RCC_ClockConfig+0x1c4>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	494d      	ldr	r1, [pc, #308]	@ (8003438 <HAL_RCC_ClockConfig+0x1c4>)
 8003302:	4313      	orrs	r3, r2
 8003304:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b00      	cmp	r3, #0
 8003310:	d040      	beq.n	8003394 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d107      	bne.n	800332a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800331a:	4b47      	ldr	r3, [pc, #284]	@ (8003438 <HAL_RCC_ClockConfig+0x1c4>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d115      	bne.n	8003352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e07f      	b.n	800342a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b02      	cmp	r3, #2
 8003330:	d107      	bne.n	8003342 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003332:	4b41      	ldr	r3, [pc, #260]	@ (8003438 <HAL_RCC_ClockConfig+0x1c4>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d109      	bne.n	8003352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e073      	b.n	800342a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003342:	4b3d      	ldr	r3, [pc, #244]	@ (8003438 <HAL_RCC_ClockConfig+0x1c4>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e06b      	b.n	800342a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003352:	4b39      	ldr	r3, [pc, #228]	@ (8003438 <HAL_RCC_ClockConfig+0x1c4>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f023 0203 	bic.w	r2, r3, #3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	4936      	ldr	r1, [pc, #216]	@ (8003438 <HAL_RCC_ClockConfig+0x1c4>)
 8003360:	4313      	orrs	r3, r2
 8003362:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003364:	f7fe fe12 	bl	8001f8c <HAL_GetTick>
 8003368:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800336a:	e00a      	b.n	8003382 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800336c:	f7fe fe0e 	bl	8001f8c <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	f241 3288 	movw	r2, #5000	@ 0x1388
 800337a:	4293      	cmp	r3, r2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e053      	b.n	800342a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003382:	4b2d      	ldr	r3, [pc, #180]	@ (8003438 <HAL_RCC_ClockConfig+0x1c4>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f003 020c 	and.w	r2, r3, #12
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	429a      	cmp	r2, r3
 8003392:	d1eb      	bne.n	800336c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003394:	4b27      	ldr	r3, [pc, #156]	@ (8003434 <HAL_RCC_ClockConfig+0x1c0>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0307 	and.w	r3, r3, #7
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d210      	bcs.n	80033c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a2:	4b24      	ldr	r3, [pc, #144]	@ (8003434 <HAL_RCC_ClockConfig+0x1c0>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f023 0207 	bic.w	r2, r3, #7
 80033aa:	4922      	ldr	r1, [pc, #136]	@ (8003434 <HAL_RCC_ClockConfig+0x1c0>)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b2:	4b20      	ldr	r3, [pc, #128]	@ (8003434 <HAL_RCC_ClockConfig+0x1c0>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0307 	and.w	r3, r3, #7
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d001      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e032      	b.n	800342a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d008      	beq.n	80033e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033d0:	4b19      	ldr	r3, [pc, #100]	@ (8003438 <HAL_RCC_ClockConfig+0x1c4>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	4916      	ldr	r1, [pc, #88]	@ (8003438 <HAL_RCC_ClockConfig+0x1c4>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0308 	and.w	r3, r3, #8
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d009      	beq.n	8003402 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033ee:	4b12      	ldr	r3, [pc, #72]	@ (8003438 <HAL_RCC_ClockConfig+0x1c4>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	490e      	ldr	r1, [pc, #56]	@ (8003438 <HAL_RCC_ClockConfig+0x1c4>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003402:	f000 f821 	bl	8003448 <HAL_RCC_GetSysClockFreq>
 8003406:	4602      	mov	r2, r0
 8003408:	4b0b      	ldr	r3, [pc, #44]	@ (8003438 <HAL_RCC_ClockConfig+0x1c4>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	091b      	lsrs	r3, r3, #4
 800340e:	f003 030f 	and.w	r3, r3, #15
 8003412:	490a      	ldr	r1, [pc, #40]	@ (800343c <HAL_RCC_ClockConfig+0x1c8>)
 8003414:	5ccb      	ldrb	r3, [r1, r3]
 8003416:	fa22 f303 	lsr.w	r3, r2, r3
 800341a:	4a09      	ldr	r2, [pc, #36]	@ (8003440 <HAL_RCC_ClockConfig+0x1cc>)
 800341c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800341e:	4b09      	ldr	r3, [pc, #36]	@ (8003444 <HAL_RCC_ClockConfig+0x1d0>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4618      	mov	r0, r3
 8003424:	f7fe fd70 	bl	8001f08 <HAL_InitTick>

  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	40022000 	.word	0x40022000
 8003438:	40021000 	.word	0x40021000
 800343c:	08007c78 	.word	0x08007c78
 8003440:	20000008 	.word	0x20000008
 8003444:	2000000c 	.word	0x2000000c

08003448 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003448:	b480      	push	{r7}
 800344a:	b087      	sub	sp, #28
 800344c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800344e:	2300      	movs	r3, #0
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	2300      	movs	r3, #0
 8003454:	60bb      	str	r3, [r7, #8]
 8003456:	2300      	movs	r3, #0
 8003458:	617b      	str	r3, [r7, #20]
 800345a:	2300      	movs	r3, #0
 800345c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800345e:	2300      	movs	r3, #0
 8003460:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003462:	4b1e      	ldr	r3, [pc, #120]	@ (80034dc <HAL_RCC_GetSysClockFreq+0x94>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f003 030c 	and.w	r3, r3, #12
 800346e:	2b04      	cmp	r3, #4
 8003470:	d002      	beq.n	8003478 <HAL_RCC_GetSysClockFreq+0x30>
 8003472:	2b08      	cmp	r3, #8
 8003474:	d003      	beq.n	800347e <HAL_RCC_GetSysClockFreq+0x36>
 8003476:	e027      	b.n	80034c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003478:	4b19      	ldr	r3, [pc, #100]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800347a:	613b      	str	r3, [r7, #16]
      break;
 800347c:	e027      	b.n	80034ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	0c9b      	lsrs	r3, r3, #18
 8003482:	f003 030f 	and.w	r3, r3, #15
 8003486:	4a17      	ldr	r2, [pc, #92]	@ (80034e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003488:	5cd3      	ldrb	r3, [r2, r3]
 800348a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d010      	beq.n	80034b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003496:	4b11      	ldr	r3, [pc, #68]	@ (80034dc <HAL_RCC_GetSysClockFreq+0x94>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	0c5b      	lsrs	r3, r3, #17
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	4a11      	ldr	r2, [pc, #68]	@ (80034e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80034a2:	5cd3      	ldrb	r3, [r2, r3]
 80034a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a0d      	ldr	r2, [pc, #52]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80034aa:	fb03 f202 	mul.w	r2, r3, r2
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b4:	617b      	str	r3, [r7, #20]
 80034b6:	e004      	b.n	80034c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a0c      	ldr	r2, [pc, #48]	@ (80034ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80034bc:	fb02 f303 	mul.w	r3, r2, r3
 80034c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	613b      	str	r3, [r7, #16]
      break;
 80034c6:	e002      	b.n	80034ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034c8:	4b05      	ldr	r3, [pc, #20]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80034ca:	613b      	str	r3, [r7, #16]
      break;
 80034cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034ce:	693b      	ldr	r3, [r7, #16]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	371c      	adds	r7, #28
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bc80      	pop	{r7}
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	40021000 	.word	0x40021000
 80034e0:	007a1200 	.word	0x007a1200
 80034e4:	08007c90 	.word	0x08007c90
 80034e8:	08007ca0 	.word	0x08007ca0
 80034ec:	003d0900 	.word	0x003d0900

080034f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034f4:	4b02      	ldr	r3, [pc, #8]	@ (8003500 <HAL_RCC_GetHCLKFreq+0x10>)
 80034f6:	681b      	ldr	r3, [r3, #0]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bc80      	pop	{r7}
 80034fe:	4770      	bx	lr
 8003500:	20000008 	.word	0x20000008

08003504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003508:	f7ff fff2 	bl	80034f0 <HAL_RCC_GetHCLKFreq>
 800350c:	4602      	mov	r2, r0
 800350e:	4b05      	ldr	r3, [pc, #20]	@ (8003524 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	0a1b      	lsrs	r3, r3, #8
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	4903      	ldr	r1, [pc, #12]	@ (8003528 <HAL_RCC_GetPCLK1Freq+0x24>)
 800351a:	5ccb      	ldrb	r3, [r1, r3]
 800351c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003520:	4618      	mov	r0, r3
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40021000 	.word	0x40021000
 8003528:	08007c88 	.word	0x08007c88

0800352c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003530:	f7ff ffde 	bl	80034f0 <HAL_RCC_GetHCLKFreq>
 8003534:	4602      	mov	r2, r0
 8003536:	4b05      	ldr	r3, [pc, #20]	@ (800354c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	0adb      	lsrs	r3, r3, #11
 800353c:	f003 0307 	and.w	r3, r3, #7
 8003540:	4903      	ldr	r1, [pc, #12]	@ (8003550 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003542:	5ccb      	ldrb	r3, [r1, r3]
 8003544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003548:	4618      	mov	r0, r3
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40021000 	.word	0x40021000
 8003550:	08007c88 	.word	0x08007c88

08003554 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800355c:	4b0a      	ldr	r3, [pc, #40]	@ (8003588 <RCC_Delay+0x34>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a0a      	ldr	r2, [pc, #40]	@ (800358c <RCC_Delay+0x38>)
 8003562:	fba2 2303 	umull	r2, r3, r2, r3
 8003566:	0a5b      	lsrs	r3, r3, #9
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	fb02 f303 	mul.w	r3, r2, r3
 800356e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003570:	bf00      	nop
  }
  while (Delay --);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	1e5a      	subs	r2, r3, #1
 8003576:	60fa      	str	r2, [r7, #12]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1f9      	bne.n	8003570 <RCC_Delay+0x1c>
}
 800357c:	bf00      	nop
 800357e:	bf00      	nop
 8003580:	3714      	adds	r7, #20
 8003582:	46bd      	mov	sp, r7
 8003584:	bc80      	pop	{r7}
 8003586:	4770      	bx	lr
 8003588:	20000008 	.word	0x20000008
 800358c:	10624dd3 	.word	0x10624dd3

08003590 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b088      	sub	sp, #32
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003598:	2300      	movs	r3, #0
 800359a:	617b      	str	r3, [r7, #20]
 800359c:	2300      	movs	r3, #0
 800359e:	61fb      	str	r3, [r7, #28]
 80035a0:	2300      	movs	r3, #0
 80035a2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80035a4:	2300      	movs	r3, #0
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	2300      	movs	r3, #0
 80035aa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b10      	cmp	r3, #16
 80035b0:	d00a      	beq.n	80035c8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2b10      	cmp	r3, #16
 80035b6:	f200 808a 	bhi.w	80036ce <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d045      	beq.n	800364c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d075      	beq.n	80036b2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80035c6:	e082      	b.n	80036ce <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80035c8:	4b46      	ldr	r3, [pc, #280]	@ (80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80035ce:	4b45      	ldr	r3, [pc, #276]	@ (80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d07b      	beq.n	80036d2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	0c9b      	lsrs	r3, r3, #18
 80035de:	f003 030f 	and.w	r3, r3, #15
 80035e2:	4a41      	ldr	r2, [pc, #260]	@ (80036e8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80035e4:	5cd3      	ldrb	r3, [r2, r3]
 80035e6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d015      	beq.n	800361e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035f2:	4b3c      	ldr	r3, [pc, #240]	@ (80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	0c5b      	lsrs	r3, r3, #17
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	4a3b      	ldr	r2, [pc, #236]	@ (80036ec <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80035fe:	5cd3      	ldrb	r3, [r2, r3]
 8003600:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00d      	beq.n	8003628 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800360c:	4a38      	ldr	r2, [pc, #224]	@ (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	fbb2 f2f3 	udiv	r2, r2, r3
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	fb02 f303 	mul.w	r3, r2, r3
 800361a:	61fb      	str	r3, [r7, #28]
 800361c:	e004      	b.n	8003628 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	4a34      	ldr	r2, [pc, #208]	@ (80036f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003622:	fb02 f303 	mul.w	r3, r2, r3
 8003626:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003628:	4b2e      	ldr	r3, [pc, #184]	@ (80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003630:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003634:	d102      	bne.n	800363c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	61bb      	str	r3, [r7, #24]
      break;
 800363a:	e04a      	b.n	80036d2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	4a2d      	ldr	r2, [pc, #180]	@ (80036f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003642:	fba2 2303 	umull	r2, r3, r2, r3
 8003646:	085b      	lsrs	r3, r3, #1
 8003648:	61bb      	str	r3, [r7, #24]
      break;
 800364a:	e042      	b.n	80036d2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800364c:	4b25      	ldr	r3, [pc, #148]	@ (80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003658:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800365c:	d108      	bne.n	8003670 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d003      	beq.n	8003670 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003668:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800366c:	61bb      	str	r3, [r7, #24]
 800366e:	e01f      	b.n	80036b0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003676:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800367a:	d109      	bne.n	8003690 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800367c:	4b19      	ldr	r3, [pc, #100]	@ (80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800367e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003688:	f649 4340 	movw	r3, #40000	@ 0x9c40
 800368c:	61bb      	str	r3, [r7, #24]
 800368e:	e00f      	b.n	80036b0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003696:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800369a:	d11c      	bne.n	80036d6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800369c:	4b11      	ldr	r3, [pc, #68]	@ (80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d016      	beq.n	80036d6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80036a8:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80036ac:	61bb      	str	r3, [r7, #24]
      break;
 80036ae:	e012      	b.n	80036d6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80036b0:	e011      	b.n	80036d6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80036b2:	f7ff ff3b 	bl	800352c <HAL_RCC_GetPCLK2Freq>
 80036b6:	4602      	mov	r2, r0
 80036b8:	4b0a      	ldr	r3, [pc, #40]	@ (80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	0b9b      	lsrs	r3, r3, #14
 80036be:	f003 0303 	and.w	r3, r3, #3
 80036c2:	3301      	adds	r3, #1
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ca:	61bb      	str	r3, [r7, #24]
      break;
 80036cc:	e004      	b.n	80036d8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80036ce:	bf00      	nop
 80036d0:	e002      	b.n	80036d8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80036d2:	bf00      	nop
 80036d4:	e000      	b.n	80036d8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80036d6:	bf00      	nop
    }
  }
  return (frequency);
 80036d8:	69bb      	ldr	r3, [r7, #24]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3720      	adds	r7, #32
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	40021000 	.word	0x40021000
 80036e8:	08007ca4 	.word	0x08007ca4
 80036ec:	08007cb4 	.word	0x08007cb4
 80036f0:	007a1200 	.word	0x007a1200
 80036f4:	003d0900 	.word	0x003d0900
 80036f8:	aaaaaaab 	.word	0xaaaaaaab

080036fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e076      	b.n	80037fc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003712:	2b00      	cmp	r3, #0
 8003714:	d108      	bne.n	8003728 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800371e:	d009      	beq.n	8003734 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	61da      	str	r2, [r3, #28]
 8003726:	e005      	b.n	8003734 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d106      	bne.n	8003754 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7fe fa74 	bl	8001c3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2202      	movs	r2, #2
 8003758:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800376a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800377c:	431a      	orrs	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003786:	431a      	orrs	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	431a      	orrs	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037a4:	431a      	orrs	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80037ae:	431a      	orrs	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037b8:	ea42 0103 	orr.w	r1, r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037c0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	0c1a      	lsrs	r2, r3, #16
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f002 0204 	and.w	r2, r2, #4
 80037da:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	69da      	ldr	r2, [r3, #28]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3708      	adds	r7, #8
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b088      	sub	sp, #32
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	603b      	str	r3, [r7, #0]
 8003810:	4613      	mov	r3, r2
 8003812:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003814:	f7fe fbba 	bl	8001f8c <HAL_GetTick>
 8003818:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800381a:	88fb      	ldrh	r3, [r7, #6]
 800381c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b01      	cmp	r3, #1
 8003828:	d001      	beq.n	800382e <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800382a:	2302      	movs	r3, #2
 800382c:	e12a      	b.n	8003a84 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d002      	beq.n	800383a <HAL_SPI_Transmit+0x36>
 8003834:	88fb      	ldrh	r3, [r7, #6]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e122      	b.n	8003a84 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003844:	2b01      	cmp	r3, #1
 8003846:	d101      	bne.n	800384c <HAL_SPI_Transmit+0x48>
 8003848:	2302      	movs	r3, #2
 800384a:	e11b      	b.n	8003a84 <HAL_SPI_Transmit+0x280>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2203      	movs	r2, #3
 8003858:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	68ba      	ldr	r2, [r7, #8]
 8003866:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	88fa      	ldrh	r2, [r7, #6]
 800386c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	88fa      	ldrh	r2, [r7, #6]
 8003872:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800389a:	d10f      	bne.n	80038bc <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80038ba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038c6:	2b40      	cmp	r3, #64	@ 0x40
 80038c8:	d007      	beq.n	80038da <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038e2:	d152      	bne.n	800398a <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d002      	beq.n	80038f2 <HAL_SPI_Transmit+0xee>
 80038ec:	8b7b      	ldrh	r3, [r7, #26]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d145      	bne.n	800397e <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f6:	881a      	ldrh	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003902:	1c9a      	adds	r2, r3, #2
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800390c:	b29b      	uxth	r3, r3
 800390e:	3b01      	subs	r3, #1
 8003910:	b29a      	uxth	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003916:	e032      	b.n	800397e <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b02      	cmp	r3, #2
 8003924:	d112      	bne.n	800394c <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800392a:	881a      	ldrh	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003936:	1c9a      	adds	r2, r3, #2
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003940:	b29b      	uxth	r3, r3
 8003942:	3b01      	subs	r3, #1
 8003944:	b29a      	uxth	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	86da      	strh	r2, [r3, #54]	@ 0x36
 800394a:	e018      	b.n	800397e <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800394c:	f7fe fb1e 	bl	8001f8c <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	429a      	cmp	r2, r3
 800395a:	d803      	bhi.n	8003964 <HAL_SPI_Transmit+0x160>
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003962:	d102      	bne.n	800396a <HAL_SPI_Transmit+0x166>
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d109      	bne.n	800397e <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e082      	b.n	8003a84 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003982:	b29b      	uxth	r3, r3
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1c7      	bne.n	8003918 <HAL_SPI_Transmit+0x114>
 8003988:	e053      	b.n	8003a32 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d002      	beq.n	8003998 <HAL_SPI_Transmit+0x194>
 8003992:	8b7b      	ldrh	r3, [r7, #26]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d147      	bne.n	8003a28 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	330c      	adds	r3, #12
 80039a2:	7812      	ldrb	r2, [r2, #0]
 80039a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039aa:	1c5a      	adds	r2, r3, #1
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	3b01      	subs	r3, #1
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80039be:	e033      	b.n	8003a28 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d113      	bne.n	80039f6 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	330c      	adds	r3, #12
 80039d8:	7812      	ldrb	r2, [r2, #0]
 80039da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e0:	1c5a      	adds	r2, r3, #1
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	3b01      	subs	r3, #1
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80039f4:	e018      	b.n	8003a28 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039f6:	f7fe fac9 	bl	8001f8c <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d803      	bhi.n	8003a0e <HAL_SPI_Transmit+0x20a>
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a0c:	d102      	bne.n	8003a14 <HAL_SPI_Transmit+0x210>
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d109      	bne.n	8003a28 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e02d      	b.n	8003a84 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1c6      	bne.n	80039c0 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a32:	69fa      	ldr	r2, [r7, #28]
 8003a34:	6839      	ldr	r1, [r7, #0]
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f000 fbc4 	bl	80041c4 <SPI_EndRxTxTransaction>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d002      	beq.n	8003a48 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2220      	movs	r2, #32
 8003a46:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10a      	bne.n	8003a66 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a50:	2300      	movs	r3, #0
 8003a52:	617b      	str	r3, [r7, #20]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	617b      	str	r3, [r7, #20]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	617b      	str	r3, [r7, #20]
 8003a64:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e000      	b.n	8003a84 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003a82:	2300      	movs	r3, #0
  }
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3720      	adds	r7, #32
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b088      	sub	sp, #32
 8003a90:	af02      	add	r7, sp, #8
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	603b      	str	r3, [r7, #0]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d001      	beq.n	8003aac <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	e104      	b.n	8003cb6 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ab4:	d112      	bne.n	8003adc <HAL_SPI_Receive+0x50>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10e      	bne.n	8003adc <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2204      	movs	r2, #4
 8003ac2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003ac6:	88fa      	ldrh	r2, [r7, #6]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	9300      	str	r3, [sp, #0]
 8003acc:	4613      	mov	r3, r2
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	68b9      	ldr	r1, [r7, #8]
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 f8f3 	bl	8003cbe <HAL_SPI_TransmitReceive>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	e0ec      	b.n	8003cb6 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003adc:	f7fe fa56 	bl	8001f8c <HAL_GetTick>
 8003ae0:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d002      	beq.n	8003aee <HAL_SPI_Receive+0x62>
 8003ae8:	88fb      	ldrh	r3, [r7, #6]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e0e1      	b.n	8003cb6 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d101      	bne.n	8003b00 <HAL_SPI_Receive+0x74>
 8003afc:	2302      	movs	r3, #2
 8003afe:	e0da      	b.n	8003cb6 <HAL_SPI_Receive+0x22a>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2204      	movs	r2, #4
 8003b0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	68ba      	ldr	r2, [r7, #8]
 8003b1a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	88fa      	ldrh	r2, [r7, #6]
 8003b20:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	88fa      	ldrh	r2, [r7, #6]
 8003b26:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b4e:	d10f      	bne.n	8003b70 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b5e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003b6e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b7a:	2b40      	cmp	r3, #64	@ 0x40
 8003b7c:	d007      	beq.n	8003b8e <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b8c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d170      	bne.n	8003c78 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003b96:	e035      	b.n	8003c04 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d115      	bne.n	8003bd2 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f103 020c 	add.w	r2, r3, #12
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb2:	7812      	ldrb	r2, [r2, #0]
 8003bb4:	b2d2      	uxtb	r2, r2
 8003bb6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bbc:	1c5a      	adds	r2, r3, #1
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003bd0:	e018      	b.n	8003c04 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bd2:	f7fe f9db 	bl	8001f8c <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	683a      	ldr	r2, [r7, #0]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d803      	bhi.n	8003bea <HAL_SPI_Receive+0x15e>
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be8:	d102      	bne.n	8003bf0 <HAL_SPI_Receive+0x164>
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d109      	bne.n	8003c04 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e058      	b.n	8003cb6 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1c4      	bne.n	8003b98 <HAL_SPI_Receive+0x10c>
 8003c0e:	e038      	b.n	8003c82 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d113      	bne.n	8003c46 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68da      	ldr	r2, [r3, #12]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c28:	b292      	uxth	r2, r2
 8003c2a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c30:	1c9a      	adds	r2, r3, #2
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c44:	e018      	b.n	8003c78 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c46:	f7fe f9a1 	bl	8001f8c <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d803      	bhi.n	8003c5e <HAL_SPI_Receive+0x1d2>
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c5c:	d102      	bne.n	8003c64 <HAL_SPI_Receive+0x1d8>
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d109      	bne.n	8003c78 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e01e      	b.n	8003cb6 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1c6      	bne.n	8003c10 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	6839      	ldr	r1, [r7, #0]
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f000 fa4a 	bl	8004120 <SPI_EndRxTransaction>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d002      	beq.n	8003c98 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2220      	movs	r2, #32
 8003c96:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d001      	beq.n	8003cb4 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e000      	b.n	8003cb6 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
  }
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3718      	adds	r7, #24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b08a      	sub	sp, #40	@ 0x28
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	60f8      	str	r0, [r7, #12]
 8003cc6:	60b9      	str	r1, [r7, #8]
 8003cc8:	607a      	str	r2, [r7, #4]
 8003cca:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cd0:	f7fe f95c 	bl	8001f8c <HAL_GetTick>
 8003cd4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003cdc:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003ce4:	887b      	ldrh	r3, [r7, #2]
 8003ce6:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ce8:	7ffb      	ldrb	r3, [r7, #31]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d00c      	beq.n	8003d08 <HAL_SPI_TransmitReceive+0x4a>
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cf4:	d106      	bne.n	8003d04 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d102      	bne.n	8003d04 <HAL_SPI_TransmitReceive+0x46>
 8003cfe:	7ffb      	ldrb	r3, [r7, #31]
 8003d00:	2b04      	cmp	r3, #4
 8003d02:	d001      	beq.n	8003d08 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003d04:	2302      	movs	r3, #2
 8003d06:	e17f      	b.n	8004008 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d005      	beq.n	8003d1a <HAL_SPI_TransmitReceive+0x5c>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d002      	beq.n	8003d1a <HAL_SPI_TransmitReceive+0x5c>
 8003d14:	887b      	ldrh	r3, [r7, #2]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e174      	b.n	8004008 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d101      	bne.n	8003d2c <HAL_SPI_TransmitReceive+0x6e>
 8003d28:	2302      	movs	r3, #2
 8003d2a:	e16d      	b.n	8004008 <HAL_SPI_TransmitReceive+0x34a>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b04      	cmp	r3, #4
 8003d3e:	d003      	beq.n	8003d48 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2205      	movs	r2, #5
 8003d44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	887a      	ldrh	r2, [r7, #2]
 8003d58:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	887a      	ldrh	r2, [r7, #2]
 8003d5e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	887a      	ldrh	r2, [r7, #2]
 8003d6a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	887a      	ldrh	r2, [r7, #2]
 8003d70:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d88:	2b40      	cmp	r3, #64	@ 0x40
 8003d8a:	d007      	beq.n	8003d9c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003da4:	d17e      	bne.n	8003ea4 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d002      	beq.n	8003db4 <HAL_SPI_TransmitReceive+0xf6>
 8003dae:	8afb      	ldrh	r3, [r7, #22]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d16c      	bne.n	8003e8e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db8:	881a      	ldrh	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc4:	1c9a      	adds	r2, r3, #2
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dd8:	e059      	b.n	8003e8e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d11b      	bne.n	8003e20 <HAL_SPI_TransmitReceive+0x162>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d016      	beq.n	8003e20 <HAL_SPI_TransmitReceive+0x162>
 8003df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d113      	bne.n	8003e20 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dfc:	881a      	ldrh	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e08:	1c9a      	adds	r2, r3, #2
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	3b01      	subs	r3, #1
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d119      	bne.n	8003e62 <HAL_SPI_TransmitReceive+0x1a4>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d014      	beq.n	8003e62 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68da      	ldr	r2, [r3, #12]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e42:	b292      	uxth	r2, r2
 8003e44:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e4a:	1c9a      	adds	r2, r3, #2
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	3b01      	subs	r3, #1
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e62:	f7fe f893 	bl	8001f8c <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	6a3b      	ldr	r3, [r7, #32]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d80d      	bhi.n	8003e8e <HAL_SPI_TransmitReceive+0x1d0>
 8003e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e78:	d009      	beq.n	8003e8e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e0bc      	b.n	8004008 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1a0      	bne.n	8003dda <HAL_SPI_TransmitReceive+0x11c>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d19b      	bne.n	8003dda <HAL_SPI_TransmitReceive+0x11c>
 8003ea2:	e082      	b.n	8003faa <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d002      	beq.n	8003eb2 <HAL_SPI_TransmitReceive+0x1f4>
 8003eac:	8afb      	ldrh	r3, [r7, #22]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d171      	bne.n	8003f96 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	330c      	adds	r3, #12
 8003ebc:	7812      	ldrb	r2, [r2, #0]
 8003ebe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec4:	1c5a      	adds	r2, r3, #1
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ed8:	e05d      	b.n	8003f96 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d11c      	bne.n	8003f22 <HAL_SPI_TransmitReceive+0x264>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d017      	beq.n	8003f22 <HAL_SPI_TransmitReceive+0x264>
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d114      	bne.n	8003f22 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	330c      	adds	r3, #12
 8003f02:	7812      	ldrb	r2, [r2, #0]
 8003f04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f0a:	1c5a      	adds	r2, r3, #1
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	3b01      	subs	r3, #1
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d119      	bne.n	8003f64 <HAL_SPI_TransmitReceive+0x2a6>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d014      	beq.n	8003f64 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68da      	ldr	r2, [r3, #12]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f44:	b2d2      	uxtb	r2, r2
 8003f46:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f4c:	1c5a      	adds	r2, r3, #1
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f60:	2301      	movs	r3, #1
 8003f62:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f64:	f7fe f812 	bl	8001f8c <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	6a3b      	ldr	r3, [r7, #32]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d803      	bhi.n	8003f7c <HAL_SPI_TransmitReceive+0x2be>
 8003f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7a:	d102      	bne.n	8003f82 <HAL_SPI_TransmitReceive+0x2c4>
 8003f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d109      	bne.n	8003f96 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e038      	b.n	8004008 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d19c      	bne.n	8003eda <HAL_SPI_TransmitReceive+0x21c>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d197      	bne.n	8003eda <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003faa:	6a3a      	ldr	r2, [r7, #32]
 8003fac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f000 f908 	bl	80041c4 <SPI_EndRxTxTransaction>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d008      	beq.n	8003fcc <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e01d      	b.n	8004008 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d10a      	bne.n	8003fea <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	613b      	str	r3, [r7, #16]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	613b      	str	r3, [r7, #16]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	613b      	str	r3, [r7, #16]
 8003fe8:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e000      	b.n	8004008 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004006:	2300      	movs	r3, #0
  }
}
 8004008:	4618      	mov	r0, r3
 800400a:	3728      	adds	r7, #40	@ 0x28
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b088      	sub	sp, #32
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	603b      	str	r3, [r7, #0]
 800401c:	4613      	mov	r3, r2
 800401e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004020:	f7fd ffb4 	bl	8001f8c <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004028:	1a9b      	subs	r3, r3, r2
 800402a:	683a      	ldr	r2, [r7, #0]
 800402c:	4413      	add	r3, r2
 800402e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004030:	f7fd ffac 	bl	8001f8c <HAL_GetTick>
 8004034:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004036:	4b39      	ldr	r3, [pc, #228]	@ (800411c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	015b      	lsls	r3, r3, #5
 800403c:	0d1b      	lsrs	r3, r3, #20
 800403e:	69fa      	ldr	r2, [r7, #28]
 8004040:	fb02 f303 	mul.w	r3, r2, r3
 8004044:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004046:	e054      	b.n	80040f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800404e:	d050      	beq.n	80040f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004050:	f7fd ff9c 	bl	8001f8c <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	69fa      	ldr	r2, [r7, #28]
 800405c:	429a      	cmp	r2, r3
 800405e:	d902      	bls.n	8004066 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d13d      	bne.n	80040e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004074:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800407e:	d111      	bne.n	80040a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004088:	d004      	beq.n	8004094 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004092:	d107      	bne.n	80040a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040ac:	d10f      	bne.n	80040ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040bc:	601a      	str	r2, [r3, #0]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80040cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e017      	b.n	8004112 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d101      	bne.n	80040ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80040e8:	2300      	movs	r3, #0
 80040ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	3b01      	subs	r3, #1
 80040f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	689a      	ldr	r2, [r3, #8]
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	4013      	ands	r3, r2
 80040fc:	68ba      	ldr	r2, [r7, #8]
 80040fe:	429a      	cmp	r2, r3
 8004100:	bf0c      	ite	eq
 8004102:	2301      	moveq	r3, #1
 8004104:	2300      	movne	r3, #0
 8004106:	b2db      	uxtb	r3, r3
 8004108:	461a      	mov	r2, r3
 800410a:	79fb      	ldrb	r3, [r7, #7]
 800410c:	429a      	cmp	r2, r3
 800410e:	d19b      	bne.n	8004048 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3720      	adds	r7, #32
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	20000008 	.word	0x20000008

08004120 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af02      	add	r7, sp, #8
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004134:	d111      	bne.n	800415a <SPI_EndRxTransaction+0x3a>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800413e:	d004      	beq.n	800414a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004148:	d107      	bne.n	800415a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004158:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004162:	d117      	bne.n	8004194 <SPI_EndRxTransaction+0x74>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800416c:	d112      	bne.n	8004194 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	2200      	movs	r2, #0
 8004176:	2101      	movs	r1, #1
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f7ff ff49 	bl	8004010 <SPI_WaitFlagStateUntilTimeout>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d01a      	beq.n	80041ba <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004188:	f043 0220 	orr.w	r2, r3, #32
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e013      	b.n	80041bc <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	9300      	str	r3, [sp, #0]
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	2200      	movs	r2, #0
 800419c:	2180      	movs	r1, #128	@ 0x80
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f7ff ff36 	bl	8004010 <SPI_WaitFlagStateUntilTimeout>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d007      	beq.n	80041ba <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ae:	f043 0220 	orr.w	r2, r3, #32
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e000      	b.n	80041bc <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af02      	add	r7, sp, #8
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	9300      	str	r3, [sp, #0]
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	2201      	movs	r2, #1
 80041d8:	2102      	movs	r1, #2
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f7ff ff18 	bl	8004010 <SPI_WaitFlagStateUntilTimeout>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d007      	beq.n	80041f6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ea:	f043 0220 	orr.w	r2, r3, #32
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e013      	b.n	800421e <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	2200      	movs	r2, #0
 80041fe:	2180      	movs	r1, #128	@ 0x80
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f7ff ff05 	bl	8004010 <SPI_WaitFlagStateUntilTimeout>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d007      	beq.n	800421c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004210:	f043 0220 	orr.w	r2, r3, #32
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e000      	b.n	800421e <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b082      	sub	sp, #8
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d101      	bne.n	8004238 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e041      	b.n	80042bc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b00      	cmp	r3, #0
 8004242:	d106      	bne.n	8004252 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 f839 	bl	80042c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2202      	movs	r2, #2
 8004256:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	3304      	adds	r3, #4
 8004262:	4619      	mov	r1, r3
 8004264:	4610      	mov	r0, r2
 8004266:	f000 fab1 	bl	80047cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3708      	adds	r7, #8
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bc80      	pop	{r7}
 80042d4:	4770      	bx	lr

080042d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b082      	sub	sp, #8
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e041      	b.n	800436c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d106      	bne.n	8004302 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f7fd fce7 	bl	8001cd0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2202      	movs	r2, #2
 8004306:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	3304      	adds	r3, #4
 8004312:	4619      	mov	r1, r3
 8004314:	4610      	mov	r0, r2
 8004316:	f000 fa59 	bl	80047cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3708      	adds	r7, #8
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d109      	bne.n	8004398 <HAL_TIM_PWM_Start+0x24>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800438a:	b2db      	uxtb	r3, r3
 800438c:	2b01      	cmp	r3, #1
 800438e:	bf14      	ite	ne
 8004390:	2301      	movne	r3, #1
 8004392:	2300      	moveq	r3, #0
 8004394:	b2db      	uxtb	r3, r3
 8004396:	e022      	b.n	80043de <HAL_TIM_PWM_Start+0x6a>
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	2b04      	cmp	r3, #4
 800439c:	d109      	bne.n	80043b2 <HAL_TIM_PWM_Start+0x3e>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	bf14      	ite	ne
 80043aa:	2301      	movne	r3, #1
 80043ac:	2300      	moveq	r3, #0
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	e015      	b.n	80043de <HAL_TIM_PWM_Start+0x6a>
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	2b08      	cmp	r3, #8
 80043b6:	d109      	bne.n	80043cc <HAL_TIM_PWM_Start+0x58>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	bf14      	ite	ne
 80043c4:	2301      	movne	r3, #1
 80043c6:	2300      	moveq	r3, #0
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	e008      	b.n	80043de <HAL_TIM_PWM_Start+0x6a>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	bf14      	ite	ne
 80043d8:	2301      	movne	r3, #1
 80043da:	2300      	moveq	r3, #0
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e05e      	b.n	80044a4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d104      	bne.n	80043f6 <HAL_TIM_PWM_Start+0x82>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2202      	movs	r2, #2
 80043f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043f4:	e013      	b.n	800441e <HAL_TIM_PWM_Start+0xaa>
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b04      	cmp	r3, #4
 80043fa:	d104      	bne.n	8004406 <HAL_TIM_PWM_Start+0x92>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2202      	movs	r2, #2
 8004400:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004404:	e00b      	b.n	800441e <HAL_TIM_PWM_Start+0xaa>
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2b08      	cmp	r3, #8
 800440a:	d104      	bne.n	8004416 <HAL_TIM_PWM_Start+0xa2>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2202      	movs	r2, #2
 8004410:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004414:	e003      	b.n	800441e <HAL_TIM_PWM_Start+0xaa>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2202      	movs	r2, #2
 800441a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2201      	movs	r2, #1
 8004424:	6839      	ldr	r1, [r7, #0]
 8004426:	4618      	mov	r0, r3
 8004428:	f000 fc5c 	bl	8004ce4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a1e      	ldr	r2, [pc, #120]	@ (80044ac <HAL_TIM_PWM_Start+0x138>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d107      	bne.n	8004446 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004444:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a18      	ldr	r2, [pc, #96]	@ (80044ac <HAL_TIM_PWM_Start+0x138>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d00e      	beq.n	800446e <HAL_TIM_PWM_Start+0xfa>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004458:	d009      	beq.n	800446e <HAL_TIM_PWM_Start+0xfa>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a14      	ldr	r2, [pc, #80]	@ (80044b0 <HAL_TIM_PWM_Start+0x13c>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d004      	beq.n	800446e <HAL_TIM_PWM_Start+0xfa>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a12      	ldr	r2, [pc, #72]	@ (80044b4 <HAL_TIM_PWM_Start+0x140>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d111      	bne.n	8004492 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f003 0307 	and.w	r3, r3, #7
 8004478:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2b06      	cmp	r3, #6
 800447e:	d010      	beq.n	80044a2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f042 0201 	orr.w	r2, r2, #1
 800448e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004490:	e007      	b.n	80044a2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f042 0201 	orr.w	r2, r2, #1
 80044a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	40012c00 	.word	0x40012c00
 80044b0:	40000400 	.word	0x40000400
 80044b4:	40000800 	.word	0x40000800

080044b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b086      	sub	sp, #24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044c4:	2300      	movs	r3, #0
 80044c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d101      	bne.n	80044d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80044d2:	2302      	movs	r3, #2
 80044d4:	e0ae      	b.n	8004634 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b0c      	cmp	r3, #12
 80044e2:	f200 809f 	bhi.w	8004624 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80044e6:	a201      	add	r2, pc, #4	@ (adr r2, 80044ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80044e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ec:	08004521 	.word	0x08004521
 80044f0:	08004625 	.word	0x08004625
 80044f4:	08004625 	.word	0x08004625
 80044f8:	08004625 	.word	0x08004625
 80044fc:	08004561 	.word	0x08004561
 8004500:	08004625 	.word	0x08004625
 8004504:	08004625 	.word	0x08004625
 8004508:	08004625 	.word	0x08004625
 800450c:	080045a3 	.word	0x080045a3
 8004510:	08004625 	.word	0x08004625
 8004514:	08004625 	.word	0x08004625
 8004518:	08004625 	.word	0x08004625
 800451c:	080045e3 	.word	0x080045e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68b9      	ldr	r1, [r7, #8]
 8004526:	4618      	mov	r0, r3
 8004528:	f000 f9be 	bl	80048a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	699a      	ldr	r2, [r3, #24]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f042 0208 	orr.w	r2, r2, #8
 800453a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	699a      	ldr	r2, [r3, #24]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 0204 	bic.w	r2, r2, #4
 800454a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	6999      	ldr	r1, [r3, #24]
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	691a      	ldr	r2, [r3, #16]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	430a      	orrs	r2, r1
 800455c:	619a      	str	r2, [r3, #24]
      break;
 800455e:	e064      	b.n	800462a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68b9      	ldr	r1, [r7, #8]
 8004566:	4618      	mov	r0, r3
 8004568:	f000 fa04 	bl	8004974 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	699a      	ldr	r2, [r3, #24]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800457a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	699a      	ldr	r2, [r3, #24]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800458a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6999      	ldr	r1, [r3, #24]
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	021a      	lsls	r2, r3, #8
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	430a      	orrs	r2, r1
 800459e:	619a      	str	r2, [r3, #24]
      break;
 80045a0:	e043      	b.n	800462a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68b9      	ldr	r1, [r7, #8]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f000 fa4d 	bl	8004a48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	69da      	ldr	r2, [r3, #28]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f042 0208 	orr.w	r2, r2, #8
 80045bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	69da      	ldr	r2, [r3, #28]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f022 0204 	bic.w	r2, r2, #4
 80045cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	69d9      	ldr	r1, [r3, #28]
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	691a      	ldr	r2, [r3, #16]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	430a      	orrs	r2, r1
 80045de:	61da      	str	r2, [r3, #28]
      break;
 80045e0:	e023      	b.n	800462a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68b9      	ldr	r1, [r7, #8]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f000 fa97 	bl	8004b1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	69da      	ldr	r2, [r3, #28]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	69da      	ldr	r2, [r3, #28]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800460c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	69d9      	ldr	r1, [r3, #28]
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	021a      	lsls	r2, r3, #8
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	61da      	str	r2, [r3, #28]
      break;
 8004622:	e002      	b.n	800462a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	75fb      	strb	r3, [r7, #23]
      break;
 8004628:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004632:	7dfb      	ldrb	r3, [r7, #23]
}
 8004634:	4618      	mov	r0, r3
 8004636:	3718      	adds	r7, #24
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004646:	2300      	movs	r3, #0
 8004648:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004650:	2b01      	cmp	r3, #1
 8004652:	d101      	bne.n	8004658 <HAL_TIM_ConfigClockSource+0x1c>
 8004654:	2302      	movs	r3, #2
 8004656:	e0b4      	b.n	80047c2 <HAL_TIM_ConfigClockSource+0x186>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2202      	movs	r2, #2
 8004664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004676:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800467e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68ba      	ldr	r2, [r7, #8]
 8004686:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004690:	d03e      	beq.n	8004710 <HAL_TIM_ConfigClockSource+0xd4>
 8004692:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004696:	f200 8087 	bhi.w	80047a8 <HAL_TIM_ConfigClockSource+0x16c>
 800469a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800469e:	f000 8086 	beq.w	80047ae <HAL_TIM_ConfigClockSource+0x172>
 80046a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046a6:	d87f      	bhi.n	80047a8 <HAL_TIM_ConfigClockSource+0x16c>
 80046a8:	2b70      	cmp	r3, #112	@ 0x70
 80046aa:	d01a      	beq.n	80046e2 <HAL_TIM_ConfigClockSource+0xa6>
 80046ac:	2b70      	cmp	r3, #112	@ 0x70
 80046ae:	d87b      	bhi.n	80047a8 <HAL_TIM_ConfigClockSource+0x16c>
 80046b0:	2b60      	cmp	r3, #96	@ 0x60
 80046b2:	d050      	beq.n	8004756 <HAL_TIM_ConfigClockSource+0x11a>
 80046b4:	2b60      	cmp	r3, #96	@ 0x60
 80046b6:	d877      	bhi.n	80047a8 <HAL_TIM_ConfigClockSource+0x16c>
 80046b8:	2b50      	cmp	r3, #80	@ 0x50
 80046ba:	d03c      	beq.n	8004736 <HAL_TIM_ConfigClockSource+0xfa>
 80046bc:	2b50      	cmp	r3, #80	@ 0x50
 80046be:	d873      	bhi.n	80047a8 <HAL_TIM_ConfigClockSource+0x16c>
 80046c0:	2b40      	cmp	r3, #64	@ 0x40
 80046c2:	d058      	beq.n	8004776 <HAL_TIM_ConfigClockSource+0x13a>
 80046c4:	2b40      	cmp	r3, #64	@ 0x40
 80046c6:	d86f      	bhi.n	80047a8 <HAL_TIM_ConfigClockSource+0x16c>
 80046c8:	2b30      	cmp	r3, #48	@ 0x30
 80046ca:	d064      	beq.n	8004796 <HAL_TIM_ConfigClockSource+0x15a>
 80046cc:	2b30      	cmp	r3, #48	@ 0x30
 80046ce:	d86b      	bhi.n	80047a8 <HAL_TIM_ConfigClockSource+0x16c>
 80046d0:	2b20      	cmp	r3, #32
 80046d2:	d060      	beq.n	8004796 <HAL_TIM_ConfigClockSource+0x15a>
 80046d4:	2b20      	cmp	r3, #32
 80046d6:	d867      	bhi.n	80047a8 <HAL_TIM_ConfigClockSource+0x16c>
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d05c      	beq.n	8004796 <HAL_TIM_ConfigClockSource+0x15a>
 80046dc:	2b10      	cmp	r3, #16
 80046de:	d05a      	beq.n	8004796 <HAL_TIM_ConfigClockSource+0x15a>
 80046e0:	e062      	b.n	80047a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046f2:	f000 fad8 	bl	8004ca6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004704:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	609a      	str	r2, [r3, #8]
      break;
 800470e:	e04f      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004720:	f000 fac1 	bl	8004ca6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689a      	ldr	r2, [r3, #8]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004732:	609a      	str	r2, [r3, #8]
      break;
 8004734:	e03c      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004742:	461a      	mov	r2, r3
 8004744:	f000 fa38 	bl	8004bb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2150      	movs	r1, #80	@ 0x50
 800474e:	4618      	mov	r0, r3
 8004750:	f000 fa8f 	bl	8004c72 <TIM_ITRx_SetConfig>
      break;
 8004754:	e02c      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004762:	461a      	mov	r2, r3
 8004764:	f000 fa56 	bl	8004c14 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2160      	movs	r1, #96	@ 0x60
 800476e:	4618      	mov	r0, r3
 8004770:	f000 fa7f 	bl	8004c72 <TIM_ITRx_SetConfig>
      break;
 8004774:	e01c      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004782:	461a      	mov	r2, r3
 8004784:	f000 fa18 	bl	8004bb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2140      	movs	r1, #64	@ 0x40
 800478e:	4618      	mov	r0, r3
 8004790:	f000 fa6f 	bl	8004c72 <TIM_ITRx_SetConfig>
      break;
 8004794:	e00c      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4619      	mov	r1, r3
 80047a0:	4610      	mov	r0, r2
 80047a2:	f000 fa66 	bl	8004c72 <TIM_ITRx_SetConfig>
      break;
 80047a6:	e003      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	73fb      	strb	r3, [r7, #15]
      break;
 80047ac:	e000      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80047ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80047c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
	...

080047cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a2f      	ldr	r2, [pc, #188]	@ (800489c <TIM_Base_SetConfig+0xd0>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d00b      	beq.n	80047fc <TIM_Base_SetConfig+0x30>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047ea:	d007      	beq.n	80047fc <TIM_Base_SetConfig+0x30>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a2c      	ldr	r2, [pc, #176]	@ (80048a0 <TIM_Base_SetConfig+0xd4>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d003      	beq.n	80047fc <TIM_Base_SetConfig+0x30>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a2b      	ldr	r2, [pc, #172]	@ (80048a4 <TIM_Base_SetConfig+0xd8>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d108      	bne.n	800480e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004802:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	4313      	orrs	r3, r2
 800480c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a22      	ldr	r2, [pc, #136]	@ (800489c <TIM_Base_SetConfig+0xd0>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d00b      	beq.n	800482e <TIM_Base_SetConfig+0x62>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800481c:	d007      	beq.n	800482e <TIM_Base_SetConfig+0x62>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a1f      	ldr	r2, [pc, #124]	@ (80048a0 <TIM_Base_SetConfig+0xd4>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d003      	beq.n	800482e <TIM_Base_SetConfig+0x62>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a1e      	ldr	r2, [pc, #120]	@ (80048a4 <TIM_Base_SetConfig+0xd8>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d108      	bne.n	8004840 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004834:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	4313      	orrs	r3, r2
 800483e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	4313      	orrs	r3, r2
 800484c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	689a      	ldr	r2, [r3, #8]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a0d      	ldr	r2, [pc, #52]	@ (800489c <TIM_Base_SetConfig+0xd0>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d103      	bne.n	8004874 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	691a      	ldr	r2, [r3, #16]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	d005      	beq.n	8004892 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	f023 0201 	bic.w	r2, r3, #1
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	611a      	str	r2, [r3, #16]
  }
}
 8004892:	bf00      	nop
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	bc80      	pop	{r7}
 800489a:	4770      	bx	lr
 800489c:	40012c00 	.word	0x40012c00
 80048a0:	40000400 	.word	0x40000400
 80048a4:	40000800 	.word	0x40000800

080048a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b087      	sub	sp, #28
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a1b      	ldr	r3, [r3, #32]
 80048bc:	f023 0201 	bic.w	r2, r3, #1
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f023 0303 	bic.w	r3, r3, #3
 80048de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	f023 0302 	bic.w	r3, r3, #2
 80048f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a1c      	ldr	r2, [pc, #112]	@ (8004970 <TIM_OC1_SetConfig+0xc8>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d10c      	bne.n	800491e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	f023 0308 	bic.w	r3, r3, #8
 800490a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	4313      	orrs	r3, r2
 8004914:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	f023 0304 	bic.w	r3, r3, #4
 800491c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a13      	ldr	r2, [pc, #76]	@ (8004970 <TIM_OC1_SetConfig+0xc8>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d111      	bne.n	800494a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800492c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004934:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	4313      	orrs	r3, r2
 800493e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	4313      	orrs	r3, r2
 8004948:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	685a      	ldr	r2, [r3, #4]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	621a      	str	r2, [r3, #32]
}
 8004964:	bf00      	nop
 8004966:	371c      	adds	r7, #28
 8004968:	46bd      	mov	sp, r7
 800496a:	bc80      	pop	{r7}
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	40012c00 	.word	0x40012c00

08004974 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	f023 0210 	bic.w	r2, r3, #16
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	021b      	lsls	r3, r3, #8
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	f023 0320 	bic.w	r3, r3, #32
 80049be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	011b      	lsls	r3, r3, #4
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a1d      	ldr	r2, [pc, #116]	@ (8004a44 <TIM_OC2_SetConfig+0xd0>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d10d      	bne.n	80049f0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	011b      	lsls	r3, r3, #4
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a14      	ldr	r2, [pc, #80]	@ (8004a44 <TIM_OC2_SetConfig+0xd0>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d113      	bne.n	8004a20 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80049fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	621a      	str	r2, [r3, #32]
}
 8004a3a:	bf00      	nop
 8004a3c:	371c      	adds	r7, #28
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bc80      	pop	{r7}
 8004a42:	4770      	bx	lr
 8004a44:	40012c00 	.word	0x40012c00

08004a48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b087      	sub	sp, #28
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a1b      	ldr	r3, [r3, #32]
 8004a5c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	69db      	ldr	r3, [r3, #28]
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f023 0303 	bic.w	r3, r3, #3
 8004a7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	021b      	lsls	r3, r3, #8
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a1d      	ldr	r2, [pc, #116]	@ (8004b18 <TIM_OC3_SetConfig+0xd0>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d10d      	bne.n	8004ac2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004aac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	021b      	lsls	r3, r3, #8
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ac0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a14      	ldr	r2, [pc, #80]	@ (8004b18 <TIM_OC3_SetConfig+0xd0>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d113      	bne.n	8004af2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ad0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ad8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	011b      	lsls	r3, r3, #4
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	011b      	lsls	r3, r3, #4
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	693a      	ldr	r2, [r7, #16]
 8004af6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	685a      	ldr	r2, [r3, #4]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	697a      	ldr	r2, [r7, #20]
 8004b0a:	621a      	str	r2, [r3, #32]
}
 8004b0c:	bf00      	nop
 8004b0e:	371c      	adds	r7, #28
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bc80      	pop	{r7}
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	40012c00 	.word	0x40012c00

08004b1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b087      	sub	sp, #28
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a1b      	ldr	r3, [r3, #32]
 8004b30:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	69db      	ldr	r3, [r3, #28]
 8004b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	021b      	lsls	r3, r3, #8
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	031b      	lsls	r3, r3, #12
 8004b6e:	693a      	ldr	r2, [r7, #16]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a0f      	ldr	r2, [pc, #60]	@ (8004bb4 <TIM_OC4_SetConfig+0x98>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d109      	bne.n	8004b90 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	695b      	ldr	r3, [r3, #20]
 8004b88:	019b      	lsls	r3, r3, #6
 8004b8a:	697a      	ldr	r2, [r7, #20]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	685a      	ldr	r2, [r3, #4]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	693a      	ldr	r2, [r7, #16]
 8004ba8:	621a      	str	r2, [r3, #32]
}
 8004baa:	bf00      	nop
 8004bac:	371c      	adds	r7, #28
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bc80      	pop	{r7}
 8004bb2:	4770      	bx	lr
 8004bb4:	40012c00 	.word	0x40012c00

08004bb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b087      	sub	sp, #28
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	f023 0201 	bic.w	r2, r3, #1
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004be2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	011b      	lsls	r3, r3, #4
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f023 030a 	bic.w	r3, r3, #10
 8004bf4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	621a      	str	r2, [r3, #32]
}
 8004c0a:	bf00      	nop
 8004c0c:	371c      	adds	r7, #28
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bc80      	pop	{r7}
 8004c12:	4770      	bx	lr

08004c14 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b087      	sub	sp, #28
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	f023 0210 	bic.w	r2, r3, #16
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	031b      	lsls	r3, r3, #12
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004c50:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	011b      	lsls	r3, r3, #4
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	621a      	str	r2, [r3, #32]
}
 8004c68:	bf00      	nop
 8004c6a:	371c      	adds	r7, #28
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bc80      	pop	{r7}
 8004c70:	4770      	bx	lr

08004c72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c72:	b480      	push	{r7}
 8004c74:	b085      	sub	sp, #20
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
 8004c7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c8a:	683a      	ldr	r2, [r7, #0]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	f043 0307 	orr.w	r3, r3, #7
 8004c94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	609a      	str	r2, [r3, #8]
}
 8004c9c:	bf00      	nop
 8004c9e:	3714      	adds	r7, #20
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bc80      	pop	{r7}
 8004ca4:	4770      	bx	lr

08004ca6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b087      	sub	sp, #28
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	60f8      	str	r0, [r7, #12]
 8004cae:	60b9      	str	r1, [r7, #8]
 8004cb0:	607a      	str	r2, [r7, #4]
 8004cb2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cc0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	021a      	lsls	r2, r3, #8
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	609a      	str	r2, [r3, #8]
}
 8004cda:	bf00      	nop
 8004cdc:	371c      	adds	r7, #28
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bc80      	pop	{r7}
 8004ce2:	4770      	bx	lr

08004ce4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b087      	sub	sp, #28
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	f003 031f 	and.w	r3, r3, #31
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6a1a      	ldr	r2, [r3, #32]
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	43db      	mvns	r3, r3
 8004d06:	401a      	ands	r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6a1a      	ldr	r2, [r3, #32]
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	f003 031f 	and.w	r3, r3, #31
 8004d16:	6879      	ldr	r1, [r7, #4]
 8004d18:	fa01 f303 	lsl.w	r3, r1, r3
 8004d1c:	431a      	orrs	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	621a      	str	r2, [r3, #32]
}
 8004d22:	bf00      	nop
 8004d24:	371c      	adds	r7, #28
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bc80      	pop	{r7}
 8004d2a:	4770      	bx	lr

08004d2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d101      	bne.n	8004d44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d40:	2302      	movs	r3, #2
 8004d42:	e046      	b.n	8004dd2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a16      	ldr	r2, [pc, #88]	@ (8004ddc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d00e      	beq.n	8004da6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d90:	d009      	beq.n	8004da6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a12      	ldr	r2, [pc, #72]	@ (8004de0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d004      	beq.n	8004da6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a10      	ldr	r2, [pc, #64]	@ (8004de4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d10c      	bne.n	8004dc0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004dac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	68ba      	ldr	r2, [r7, #8]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68ba      	ldr	r2, [r7, #8]
 8004dbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3714      	adds	r7, #20
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bc80      	pop	{r7}
 8004dda:	4770      	bx	lr
 8004ddc:	40012c00 	.word	0x40012c00
 8004de0:	40000400 	.word	0x40000400
 8004de4:	40000800 	.word	0x40000800

08004de8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004df2:	2300      	movs	r3, #0
 8004df4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d101      	bne.n	8004e04 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004e00:	2302      	movs	r3, #2
 8004e02:	e03d      	b.n	8004e80 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	695b      	ldr	r3, [r3, #20]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	69db      	ldr	r3, [r3, #28]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3714      	adds	r7, #20
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bc80      	pop	{r7}
 8004e88:	4770      	bx	lr

08004e8a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b082      	sub	sp, #8
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d101      	bne.n	8004e9c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e042      	b.n	8004f22 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d106      	bne.n	8004eb6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f7fc ff2b 	bl	8001d0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2224      	movs	r2, #36	@ 0x24
 8004eba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68da      	ldr	r2, [r3, #12]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ecc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 fa28 	bl	8005324 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	691a      	ldr	r2, [r3, #16]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ee2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	695a      	ldr	r2, [r3, #20]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ef2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68da      	ldr	r2, [r3, #12]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f02:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2220      	movs	r2, #32
 8004f0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2220      	movs	r2, #32
 8004f16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3708      	adds	r7, #8
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b082      	sub	sp, #8
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d101      	bne.n	8004f3c <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e04a      	b.n	8004fd2 <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d106      	bne.n	8004f56 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f7fc fedb 	bl	8001d0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2224      	movs	r2, #36	@ 0x24
 8004f5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68da      	ldr	r2, [r3, #12]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f6c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f9d8 	bl	8005324 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	691a      	ldr	r2, [r3, #16]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f82:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	695a      	ldr	r2, [r3, #20]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8004f92:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	695a      	ldr	r2, [r3, #20]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f042 0208 	orr.w	r2, r2, #8
 8004fa2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68da      	ldr	r2, [r3, #12]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004fb2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2220      	movs	r2, #32
 8004fbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b08a      	sub	sp, #40	@ 0x28
 8004fde:	af02      	add	r7, sp, #8
 8004fe0:	60f8      	str	r0, [r7, #12]
 8004fe2:	60b9      	str	r1, [r7, #8]
 8004fe4:	603b      	str	r3, [r7, #0]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004fea:	2300      	movs	r3, #0
 8004fec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b20      	cmp	r3, #32
 8004ff8:	d175      	bne.n	80050e6 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d002      	beq.n	8005006 <HAL_UART_Transmit+0x2c>
 8005000:	88fb      	ldrh	r3, [r7, #6]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e06e      	b.n	80050e8 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2221      	movs	r2, #33	@ 0x21
 8005014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005018:	f7fc ffb8 	bl	8001f8c <HAL_GetTick>
 800501c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	88fa      	ldrh	r2, [r7, #6]
 8005022:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	88fa      	ldrh	r2, [r7, #6]
 8005028:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005032:	d108      	bne.n	8005046 <HAL_UART_Transmit+0x6c>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d104      	bne.n	8005046 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800503c:	2300      	movs	r3, #0
 800503e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	61bb      	str	r3, [r7, #24]
 8005044:	e003      	b.n	800504e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800504a:	2300      	movs	r3, #0
 800504c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800504e:	e02e      	b.n	80050ae <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	9300      	str	r3, [sp, #0]
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	2200      	movs	r2, #0
 8005058:	2180      	movs	r1, #128	@ 0x80
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f000 f86d 	bl	800513a <UART_WaitOnFlagUntilTimeout>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d005      	beq.n	8005072 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2220      	movs	r2, #32
 800506a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e03a      	b.n	80050e8 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10b      	bne.n	8005090 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	881b      	ldrh	r3, [r3, #0]
 800507c:	461a      	mov	r2, r3
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005086:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	3302      	adds	r3, #2
 800508c:	61bb      	str	r3, [r7, #24]
 800508e:	e007      	b.n	80050a0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	781a      	ldrb	r2, [r3, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	3301      	adds	r3, #1
 800509e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	3b01      	subs	r3, #1
 80050a8:	b29a      	uxth	r2, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1cb      	bne.n	8005050 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	9300      	str	r3, [sp, #0]
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	2200      	movs	r2, #0
 80050c0:	2140      	movs	r1, #64	@ 0x40
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	f000 f839 	bl	800513a <UART_WaitOnFlagUntilTimeout>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d005      	beq.n	80050da <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2220      	movs	r2, #32
 80050d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e006      	b.n	80050e8 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2220      	movs	r2, #32
 80050de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80050e2:	2300      	movs	r3, #0
 80050e4:	e000      	b.n	80050e8 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80050e6:	2302      	movs	r3, #2
  }
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3720      	adds	r7, #32
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	4613      	mov	r3, r2
 80050fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b20      	cmp	r3, #32
 8005108:	d112      	bne.n	8005130 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d002      	beq.n	8005116 <HAL_UART_Receive_IT+0x26>
 8005110:	88fb      	ldrh	r3, [r7, #6]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d101      	bne.n	800511a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e00b      	b.n	8005132 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005120:	88fb      	ldrh	r3, [r7, #6]
 8005122:	461a      	mov	r2, r3
 8005124:	68b9      	ldr	r1, [r7, #8]
 8005126:	68f8      	ldr	r0, [r7, #12]
 8005128:	f000 f860 	bl	80051ec <UART_Start_Receive_IT>
 800512c:	4603      	mov	r3, r0
 800512e:	e000      	b.n	8005132 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005130:	2302      	movs	r3, #2
  }
}
 8005132:	4618      	mov	r0, r3
 8005134:	3710      	adds	r7, #16
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}

0800513a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800513a:	b580      	push	{r7, lr}
 800513c:	b086      	sub	sp, #24
 800513e:	af00      	add	r7, sp, #0
 8005140:	60f8      	str	r0, [r7, #12]
 8005142:	60b9      	str	r1, [r7, #8]
 8005144:	603b      	str	r3, [r7, #0]
 8005146:	4613      	mov	r3, r2
 8005148:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800514a:	e03b      	b.n	80051c4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800514c:	6a3b      	ldr	r3, [r7, #32]
 800514e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005152:	d037      	beq.n	80051c4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005154:	f7fc ff1a 	bl	8001f8c <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	6a3a      	ldr	r2, [r7, #32]
 8005160:	429a      	cmp	r2, r3
 8005162:	d302      	bcc.n	800516a <UART_WaitOnFlagUntilTimeout+0x30>
 8005164:	6a3b      	ldr	r3, [r7, #32]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d101      	bne.n	800516e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e03a      	b.n	80051e4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	f003 0304 	and.w	r3, r3, #4
 8005178:	2b00      	cmp	r3, #0
 800517a:	d023      	beq.n	80051c4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	2b80      	cmp	r3, #128	@ 0x80
 8005180:	d020      	beq.n	80051c4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	2b40      	cmp	r3, #64	@ 0x40
 8005186:	d01d      	beq.n	80051c4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0308 	and.w	r3, r3, #8
 8005192:	2b08      	cmp	r3, #8
 8005194:	d116      	bne.n	80051c4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005196:	2300      	movs	r3, #0
 8005198:	617b      	str	r3, [r7, #20]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	617b      	str	r3, [r7, #20]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	617b      	str	r3, [r7, #20]
 80051aa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f000 f856 	bl	800525e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2208      	movs	r2, #8
 80051b6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e00f      	b.n	80051e4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	4013      	ands	r3, r2
 80051ce:	68ba      	ldr	r2, [r7, #8]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	bf0c      	ite	eq
 80051d4:	2301      	moveq	r3, #1
 80051d6:	2300      	movne	r3, #0
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	461a      	mov	r2, r3
 80051dc:	79fb      	ldrb	r3, [r7, #7]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d0b4      	beq.n	800514c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3718      	adds	r7, #24
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	4613      	mov	r3, r2
 80051f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	68ba      	ldr	r2, [r7, #8]
 80051fe:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	88fa      	ldrh	r2, [r7, #6]
 8005204:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	88fa      	ldrh	r2, [r7, #6]
 800520a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2222      	movs	r2, #34	@ 0x22
 8005216:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d007      	beq.n	8005232 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68da      	ldr	r2, [r3, #12]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005230:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	695a      	ldr	r2, [r3, #20]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f042 0201 	orr.w	r2, r2, #1
 8005240:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68da      	ldr	r2, [r3, #12]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f042 0220 	orr.w	r2, r2, #32
 8005250:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3714      	adds	r7, #20
 8005258:	46bd      	mov	sp, r7
 800525a:	bc80      	pop	{r7}
 800525c:	4770      	bx	lr

0800525e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800525e:	b480      	push	{r7}
 8005260:	b095      	sub	sp, #84	@ 0x54
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	330c      	adds	r3, #12
 800526c:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005270:	e853 3f00 	ldrex	r3, [r3]
 8005274:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005278:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800527c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	330c      	adds	r3, #12
 8005284:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005286:	643a      	str	r2, [r7, #64]	@ 0x40
 8005288:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800528c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800528e:	e841 2300 	strex	r3, r2, [r1]
 8005292:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1e5      	bne.n	8005266 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	3314      	adds	r3, #20
 80052a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a2:	6a3b      	ldr	r3, [r7, #32]
 80052a4:	e853 3f00 	ldrex	r3, [r3]
 80052a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	f023 0301 	bic.w	r3, r3, #1
 80052b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	3314      	adds	r3, #20
 80052b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052c2:	e841 2300 	strex	r3, r2, [r1]
 80052c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80052c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1e5      	bne.n	800529a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d119      	bne.n	800530a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	330c      	adds	r3, #12
 80052dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	e853 3f00 	ldrex	r3, [r3]
 80052e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	f023 0310 	bic.w	r3, r3, #16
 80052ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	330c      	adds	r3, #12
 80052f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052f6:	61ba      	str	r2, [r7, #24]
 80052f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fa:	6979      	ldr	r1, [r7, #20]
 80052fc:	69ba      	ldr	r2, [r7, #24]
 80052fe:	e841 2300 	strex	r3, r2, [r1]
 8005302:	613b      	str	r3, [r7, #16]
   return(result);
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1e5      	bne.n	80052d6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2220      	movs	r2, #32
 800530e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005318:	bf00      	nop
 800531a:	3754      	adds	r7, #84	@ 0x54
 800531c:	46bd      	mov	sp, r7
 800531e:	bc80      	pop	{r7}
 8005320:	4770      	bx	lr
	...

08005324 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	68da      	ldr	r2, [r3, #12]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	430a      	orrs	r2, r1
 8005340:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	689a      	ldr	r2, [r3, #8]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	431a      	orrs	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	695b      	ldr	r3, [r3, #20]
 8005350:	4313      	orrs	r3, r2
 8005352:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800535e:	f023 030c 	bic.w	r3, r3, #12
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	6812      	ldr	r2, [r2, #0]
 8005366:	68b9      	ldr	r1, [r7, #8]
 8005368:	430b      	orrs	r3, r1
 800536a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	699a      	ldr	r2, [r3, #24]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	430a      	orrs	r2, r1
 8005380:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a2c      	ldr	r2, [pc, #176]	@ (8005438 <UART_SetConfig+0x114>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d103      	bne.n	8005394 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800538c:	f7fe f8ce 	bl	800352c <HAL_RCC_GetPCLK2Freq>
 8005390:	60f8      	str	r0, [r7, #12]
 8005392:	e002      	b.n	800539a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005394:	f7fe f8b6 	bl	8003504 <HAL_RCC_GetPCLK1Freq>
 8005398:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	4613      	mov	r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4413      	add	r3, r2
 80053a2:	009a      	lsls	r2, r3, #2
 80053a4:	441a      	add	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b0:	4a22      	ldr	r2, [pc, #136]	@ (800543c <UART_SetConfig+0x118>)
 80053b2:	fba2 2303 	umull	r2, r3, r2, r3
 80053b6:	095b      	lsrs	r3, r3, #5
 80053b8:	0119      	lsls	r1, r3, #4
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	4613      	mov	r3, r2
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	4413      	add	r3, r2
 80053c2:	009a      	lsls	r2, r3, #2
 80053c4:	441a      	add	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80053d0:	4b1a      	ldr	r3, [pc, #104]	@ (800543c <UART_SetConfig+0x118>)
 80053d2:	fba3 0302 	umull	r0, r3, r3, r2
 80053d6:	095b      	lsrs	r3, r3, #5
 80053d8:	2064      	movs	r0, #100	@ 0x64
 80053da:	fb00 f303 	mul.w	r3, r0, r3
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	011b      	lsls	r3, r3, #4
 80053e2:	3332      	adds	r3, #50	@ 0x32
 80053e4:	4a15      	ldr	r2, [pc, #84]	@ (800543c <UART_SetConfig+0x118>)
 80053e6:	fba2 2303 	umull	r2, r3, r2, r3
 80053ea:	095b      	lsrs	r3, r3, #5
 80053ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053f0:	4419      	add	r1, r3
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	4613      	mov	r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	4413      	add	r3, r2
 80053fa:	009a      	lsls	r2, r3, #2
 80053fc:	441a      	add	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	fbb2 f2f3 	udiv	r2, r2, r3
 8005408:	4b0c      	ldr	r3, [pc, #48]	@ (800543c <UART_SetConfig+0x118>)
 800540a:	fba3 0302 	umull	r0, r3, r3, r2
 800540e:	095b      	lsrs	r3, r3, #5
 8005410:	2064      	movs	r0, #100	@ 0x64
 8005412:	fb00 f303 	mul.w	r3, r0, r3
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	011b      	lsls	r3, r3, #4
 800541a:	3332      	adds	r3, #50	@ 0x32
 800541c:	4a07      	ldr	r2, [pc, #28]	@ (800543c <UART_SetConfig+0x118>)
 800541e:	fba2 2303 	umull	r2, r3, r2, r3
 8005422:	095b      	lsrs	r3, r3, #5
 8005424:	f003 020f 	and.w	r2, r3, #15
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	440a      	add	r2, r1
 800542e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005430:	bf00      	nop
 8005432:	3710      	adds	r7, #16
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	40013800 	.word	0x40013800
 800543c:	51eb851f 	.word	0x51eb851f

08005440 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	4603      	mov	r3, r0
 8005448:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800544a:	2300      	movs	r3, #0
 800544c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800544e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005452:	2b84      	cmp	r3, #132	@ 0x84
 8005454:	d005      	beq.n	8005462 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005456:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	4413      	add	r3, r2
 800545e:	3303      	adds	r3, #3
 8005460:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005462:	68fb      	ldr	r3, [r7, #12]
}
 8005464:	4618      	mov	r0, r3
 8005466:	3714      	adds	r7, #20
 8005468:	46bd      	mov	sp, r7
 800546a:	bc80      	pop	{r7}
 800546c:	4770      	bx	lr

0800546e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800546e:	b480      	push	{r7}
 8005470:	b083      	sub	sp, #12
 8005472:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005474:	f3ef 8305 	mrs	r3, IPSR
 8005478:	607b      	str	r3, [r7, #4]
  return(result);
 800547a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800547c:	2b00      	cmp	r3, #0
 800547e:	bf14      	ite	ne
 8005480:	2301      	movne	r3, #1
 8005482:	2300      	moveq	r3, #0
 8005484:	b2db      	uxtb	r3, r3
}
 8005486:	4618      	mov	r0, r3
 8005488:	370c      	adds	r7, #12
 800548a:	46bd      	mov	sp, r7
 800548c:	bc80      	pop	{r7}
 800548e:	4770      	bx	lr

08005490 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005494:	f001 f956 	bl	8006744 <vTaskStartScheduler>
  
  return osOK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	bd80      	pop	{r7, pc}

0800549e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800549e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054a0:	b089      	sub	sp, #36	@ 0x24
 80054a2:	af04      	add	r7, sp, #16
 80054a4:	6078      	str	r0, [r7, #4]
 80054a6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	695b      	ldr	r3, [r3, #20]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d020      	beq.n	80054f2 <osThreadCreate+0x54>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d01c      	beq.n	80054f2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685c      	ldr	r4, [r3, #4]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	691e      	ldr	r6, [r3, #16]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80054ca:	4618      	mov	r0, r3
 80054cc:	f7ff ffb8 	bl	8005440 <makeFreeRtosPriority>
 80054d0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80054da:	9202      	str	r2, [sp, #8]
 80054dc:	9301      	str	r3, [sp, #4]
 80054de:	9100      	str	r1, [sp, #0]
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	4632      	mov	r2, r6
 80054e4:	4629      	mov	r1, r5
 80054e6:	4620      	mov	r0, r4
 80054e8:	f000 ff5f 	bl	80063aa <xTaskCreateStatic>
 80054ec:	4603      	mov	r3, r0
 80054ee:	60fb      	str	r3, [r7, #12]
 80054f0:	e01c      	b.n	800552c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685c      	ldr	r4, [r3, #4]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80054fe:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005506:	4618      	mov	r0, r3
 8005508:	f7ff ff9a 	bl	8005440 <makeFreeRtosPriority>
 800550c:	4602      	mov	r2, r0
 800550e:	f107 030c 	add.w	r3, r7, #12
 8005512:	9301      	str	r3, [sp, #4]
 8005514:	9200      	str	r2, [sp, #0]
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	4632      	mov	r2, r6
 800551a:	4629      	mov	r1, r5
 800551c:	4620      	mov	r0, r4
 800551e:	f000 ffa4 	bl	800646a <xTaskCreate>
 8005522:	4603      	mov	r3, r0
 8005524:	2b01      	cmp	r3, #1
 8005526:	d001      	beq.n	800552c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005528:	2300      	movs	r3, #0
 800552a:	e000      	b.n	800552e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800552c:	68fb      	ldr	r3, [r7, #12]
}
 800552e:	4618      	mov	r0, r3
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005536 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b084      	sub	sp, #16
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d001      	beq.n	800554c <osDelay+0x16>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	e000      	b.n	800554e <osDelay+0x18>
 800554c:	2301      	movs	r3, #1
 800554e:	4618      	mov	r0, r3
 8005550:	f001 f8c2 	bl	80066d8 <vTaskDelay>
  
  return osOK;
 8005554:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005556:	4618      	mov	r0, r3
 8005558:	3710      	adds	r7, #16
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800555e:	b580      	push	{r7, lr}
 8005560:	b082      	sub	sp, #8
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d007      	beq.n	800557e <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	4619      	mov	r1, r3
 8005574:	2001      	movs	r0, #1
 8005576:	f000 fab2 	bl	8005ade <xQueueCreateMutexStatic>
 800557a:	4603      	mov	r3, r0
 800557c:	e003      	b.n	8005586 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800557e:	2001      	movs	r0, #1
 8005580:	f000 fa95 	bl	8005aae <xQueueCreateMutex>
 8005584:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005586:	4618      	mov	r0, r3
 8005588:	3708      	adds	r7, #8
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
	...

08005590 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800559a:	2300      	movs	r3, #0
 800559c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d101      	bne.n	80055a8 <osMutexWait+0x18>
    return osErrorParameter;
 80055a4:	2380      	movs	r3, #128	@ 0x80
 80055a6:	e03a      	b.n	800561e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80055a8:	2300      	movs	r3, #0
 80055aa:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b2:	d103      	bne.n	80055bc <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80055b4:	f04f 33ff 	mov.w	r3, #4294967295
 80055b8:	60fb      	str	r3, [r7, #12]
 80055ba:	e009      	b.n	80055d0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d006      	beq.n	80055d0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d101      	bne.n	80055d0 <osMutexWait+0x40>
      ticks = 1;
 80055cc:	2301      	movs	r3, #1
 80055ce:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80055d0:	f7ff ff4d 	bl	800546e <inHandlerMode>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d017      	beq.n	800560a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80055da:	f107 0308 	add.w	r3, r7, #8
 80055de:	461a      	mov	r2, r3
 80055e0:	2100      	movs	r1, #0
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 fd38 	bl	8006058 <xQueueReceiveFromISR>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d001      	beq.n	80055f2 <osMutexWait+0x62>
      return osErrorOS;
 80055ee:	23ff      	movs	r3, #255	@ 0xff
 80055f0:	e015      	b.n	800561e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d011      	beq.n	800561c <osMutexWait+0x8c>
 80055f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005628 <osMutexWait+0x98>)
 80055fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055fe:	601a      	str	r2, [r3, #0]
 8005600:	f3bf 8f4f 	dsb	sy
 8005604:	f3bf 8f6f 	isb	sy
 8005608:	e008      	b.n	800561c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800560a:	68f9      	ldr	r1, [r7, #12]
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 fc13 	bl	8005e38 <xQueueSemaphoreTake>
 8005612:	4603      	mov	r3, r0
 8005614:	2b01      	cmp	r3, #1
 8005616:	d001      	beq.n	800561c <osMutexWait+0x8c>
    return osErrorOS;
 8005618:	23ff      	movs	r3, #255	@ 0xff
 800561a:	e000      	b.n	800561e <osMutexWait+0x8e>
  }
  
  return osOK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	e000ed04 	.word	0xe000ed04

0800562c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005634:	2300      	movs	r3, #0
 8005636:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005638:	2300      	movs	r3, #0
 800563a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800563c:	f7ff ff17 	bl	800546e <inHandlerMode>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d016      	beq.n	8005674 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005646:	f107 0308 	add.w	r3, r7, #8
 800564a:	4619      	mov	r1, r3
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 fb63 	bl	8005d18 <xQueueGiveFromISR>
 8005652:	4603      	mov	r3, r0
 8005654:	2b01      	cmp	r3, #1
 8005656:	d001      	beq.n	800565c <osMutexRelease+0x30>
      return osErrorOS;
 8005658:	23ff      	movs	r3, #255	@ 0xff
 800565a:	e017      	b.n	800568c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d013      	beq.n	800568a <osMutexRelease+0x5e>
 8005662:	4b0c      	ldr	r3, [pc, #48]	@ (8005694 <osMutexRelease+0x68>)
 8005664:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005668:	601a      	str	r2, [r3, #0]
 800566a:	f3bf 8f4f 	dsb	sy
 800566e:	f3bf 8f6f 	isb	sy
 8005672:	e00a      	b.n	800568a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005674:	2300      	movs	r3, #0
 8005676:	2200      	movs	r2, #0
 8005678:	2100      	movs	r1, #0
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 fa4a 	bl	8005b14 <xQueueGenericSend>
 8005680:	4603      	mov	r3, r0
 8005682:	2b01      	cmp	r3, #1
 8005684:	d001      	beq.n	800568a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005686:	23ff      	movs	r3, #255	@ 0xff
 8005688:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800568a:	68fb      	ldr	r3, [r7, #12]
}
 800568c:	4618      	mov	r0, r3
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	e000ed04 	.word	0xe000ed04

08005698 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f103 0208 	add.w	r2, r3, #8
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f04f 32ff 	mov.w	r2, #4294967295
 80056b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f103 0208 	add.w	r2, r3, #8
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f103 0208 	add.w	r2, r3, #8
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bc80      	pop	{r7}
 80056d4:	4770      	bx	lr

080056d6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80056d6:	b480      	push	{r7}
 80056d8:	b083      	sub	sp, #12
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bc80      	pop	{r7}
 80056ec:	4770      	bx	lr

080056ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056ee:	b480      	push	{r7}
 80056f0:	b085      	sub	sp, #20
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
 80056f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	689a      	ldr	r2, [r3, #8]
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	683a      	ldr	r2, [r7, #0]
 8005712:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	683a      	ldr	r2, [r7, #0]
 8005718:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	1c5a      	adds	r2, r3, #1
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	601a      	str	r2, [r3, #0]
}
 800572a:	bf00      	nop
 800572c:	3714      	adds	r7, #20
 800572e:	46bd      	mov	sp, r7
 8005730:	bc80      	pop	{r7}
 8005732:	4770      	bx	lr

08005734 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800574a:	d103      	bne.n	8005754 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	60fb      	str	r3, [r7, #12]
 8005752:	e00c      	b.n	800576e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	3308      	adds	r3, #8
 8005758:	60fb      	str	r3, [r7, #12]
 800575a:	e002      	b.n	8005762 <vListInsert+0x2e>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	60fb      	str	r3, [r7, #12]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68ba      	ldr	r2, [r7, #8]
 800576a:	429a      	cmp	r2, r3
 800576c:	d2f6      	bcs.n	800575c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	683a      	ldr	r2, [r7, #0]
 800577c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	683a      	ldr	r2, [r7, #0]
 8005788:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	1c5a      	adds	r2, r3, #1
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	601a      	str	r2, [r3, #0]
}
 800579a:	bf00      	nop
 800579c:	3714      	adds	r7, #20
 800579e:	46bd      	mov	sp, r7
 80057a0:	bc80      	pop	{r7}
 80057a2:	4770      	bx	lr

080057a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	6892      	ldr	r2, [r2, #8]
 80057ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	6852      	ldr	r2, [r2, #4]
 80057c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d103      	bne.n	80057d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	689a      	ldr	r2, [r3, #8]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	1e5a      	subs	r2, r3, #1
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3714      	adds	r7, #20
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bc80      	pop	{r7}
 80057f4:	4770      	bx	lr
	...

080057f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d10b      	bne.n	8005824 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800580c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005810:	f383 8811 	msr	BASEPRI, r3
 8005814:	f3bf 8f6f 	isb	sy
 8005818:	f3bf 8f4f 	dsb	sy
 800581c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800581e:	bf00      	nop
 8005820:	bf00      	nop
 8005822:	e7fd      	b.n	8005820 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005824:	f001 feb2 	bl	800758c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005830:	68f9      	ldr	r1, [r7, #12]
 8005832:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005834:	fb01 f303 	mul.w	r3, r1, r3
 8005838:	441a      	add	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005854:	3b01      	subs	r3, #1
 8005856:	68f9      	ldr	r1, [r7, #12]
 8005858:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800585a:	fb01 f303 	mul.w	r3, r1, r3
 800585e:	441a      	add	r2, r3
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	22ff      	movs	r2, #255	@ 0xff
 8005868:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	22ff      	movs	r2, #255	@ 0xff
 8005870:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d114      	bne.n	80058a4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d01a      	beq.n	80058b8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	3310      	adds	r3, #16
 8005886:	4618      	mov	r0, r3
 8005888:	f001 f9a6 	bl	8006bd8 <xTaskRemoveFromEventList>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d012      	beq.n	80058b8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005892:	4b0d      	ldr	r3, [pc, #52]	@ (80058c8 <xQueueGenericReset+0xd0>)
 8005894:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005898:	601a      	str	r2, [r3, #0]
 800589a:	f3bf 8f4f 	dsb	sy
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	e009      	b.n	80058b8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	3310      	adds	r3, #16
 80058a8:	4618      	mov	r0, r3
 80058aa:	f7ff fef5 	bl	8005698 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	3324      	adds	r3, #36	@ 0x24
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7ff fef0 	bl	8005698 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80058b8:	f001 fe98 	bl	80075ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80058bc:	2301      	movs	r3, #1
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3710      	adds	r7, #16
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	e000ed04 	.word	0xe000ed04

080058cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b08e      	sub	sp, #56	@ 0x38
 80058d0:	af02      	add	r7, sp, #8
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	607a      	str	r2, [r7, #4]
 80058d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d10b      	bne.n	80058f8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80058e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e4:	f383 8811 	msr	BASEPRI, r3
 80058e8:	f3bf 8f6f 	isb	sy
 80058ec:	f3bf 8f4f 	dsb	sy
 80058f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80058f2:	bf00      	nop
 80058f4:	bf00      	nop
 80058f6:	e7fd      	b.n	80058f4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10b      	bne.n	8005916 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80058fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005902:	f383 8811 	msr	BASEPRI, r3
 8005906:	f3bf 8f6f 	isb	sy
 800590a:	f3bf 8f4f 	dsb	sy
 800590e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005910:	bf00      	nop
 8005912:	bf00      	nop
 8005914:	e7fd      	b.n	8005912 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d002      	beq.n	8005922 <xQueueGenericCreateStatic+0x56>
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d001      	beq.n	8005926 <xQueueGenericCreateStatic+0x5a>
 8005922:	2301      	movs	r3, #1
 8005924:	e000      	b.n	8005928 <xQueueGenericCreateStatic+0x5c>
 8005926:	2300      	movs	r3, #0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d10b      	bne.n	8005944 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800592c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005930:	f383 8811 	msr	BASEPRI, r3
 8005934:	f3bf 8f6f 	isb	sy
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	623b      	str	r3, [r7, #32]
}
 800593e:	bf00      	nop
 8005940:	bf00      	nop
 8005942:	e7fd      	b.n	8005940 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d102      	bne.n	8005950 <xQueueGenericCreateStatic+0x84>
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d101      	bne.n	8005954 <xQueueGenericCreateStatic+0x88>
 8005950:	2301      	movs	r3, #1
 8005952:	e000      	b.n	8005956 <xQueueGenericCreateStatic+0x8a>
 8005954:	2300      	movs	r3, #0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10b      	bne.n	8005972 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800595a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800595e:	f383 8811 	msr	BASEPRI, r3
 8005962:	f3bf 8f6f 	isb	sy
 8005966:	f3bf 8f4f 	dsb	sy
 800596a:	61fb      	str	r3, [r7, #28]
}
 800596c:	bf00      	nop
 800596e:	bf00      	nop
 8005970:	e7fd      	b.n	800596e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005972:	2348      	movs	r3, #72	@ 0x48
 8005974:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	2b48      	cmp	r3, #72	@ 0x48
 800597a:	d00b      	beq.n	8005994 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800597c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005980:	f383 8811 	msr	BASEPRI, r3
 8005984:	f3bf 8f6f 	isb	sy
 8005988:	f3bf 8f4f 	dsb	sy
 800598c:	61bb      	str	r3, [r7, #24]
}
 800598e:	bf00      	nop
 8005990:	bf00      	nop
 8005992:	e7fd      	b.n	8005990 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005994:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800599a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00d      	beq.n	80059bc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80059a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80059a8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80059ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059ae:	9300      	str	r3, [sp, #0]
 80059b0:	4613      	mov	r3, r2
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	68b9      	ldr	r1, [r7, #8]
 80059b6:	68f8      	ldr	r0, [r7, #12]
 80059b8:	f000 f840 	bl	8005a3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80059bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80059be:	4618      	mov	r0, r3
 80059c0:	3730      	adds	r7, #48	@ 0x30
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b08a      	sub	sp, #40	@ 0x28
 80059ca:	af02      	add	r7, sp, #8
 80059cc:	60f8      	str	r0, [r7, #12]
 80059ce:	60b9      	str	r1, [r7, #8]
 80059d0:	4613      	mov	r3, r2
 80059d2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d10b      	bne.n	80059f2 <xQueueGenericCreate+0x2c>
	__asm volatile
 80059da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059de:	f383 8811 	msr	BASEPRI, r3
 80059e2:	f3bf 8f6f 	isb	sy
 80059e6:	f3bf 8f4f 	dsb	sy
 80059ea:	613b      	str	r3, [r7, #16]
}
 80059ec:	bf00      	nop
 80059ee:	bf00      	nop
 80059f0:	e7fd      	b.n	80059ee <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	68ba      	ldr	r2, [r7, #8]
 80059f6:	fb02 f303 	mul.w	r3, r2, r3
 80059fa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	3348      	adds	r3, #72	@ 0x48
 8005a00:	4618      	mov	r0, r3
 8005a02:	f001 fec5 	bl	8007790 <pvPortMalloc>
 8005a06:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d011      	beq.n	8005a32 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	3348      	adds	r3, #72	@ 0x48
 8005a16:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a20:	79fa      	ldrb	r2, [r7, #7]
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	4613      	mov	r3, r2
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	68b9      	ldr	r1, [r7, #8]
 8005a2c:	68f8      	ldr	r0, [r7, #12]
 8005a2e:	f000 f805 	bl	8005a3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a32:	69bb      	ldr	r3, [r7, #24]
	}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3720      	adds	r7, #32
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
 8005a48:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d103      	bne.n	8005a58 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	69ba      	ldr	r2, [r7, #24]
 8005a54:	601a      	str	r2, [r3, #0]
 8005a56:	e002      	b.n	8005a5e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	68ba      	ldr	r2, [r7, #8]
 8005a68:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005a6a:	2101      	movs	r1, #1
 8005a6c:	69b8      	ldr	r0, [r7, #24]
 8005a6e:	f7ff fec3 	bl	80057f8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005a72:	bf00      	nop
 8005a74:	3710      	adds	r7, #16
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}

08005a7a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005a7a:	b580      	push	{r7, lr}
 8005a7c:	b082      	sub	sp, #8
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d00e      	beq.n	8005aa6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	2100      	movs	r1, #0
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 f837 	bl	8005b14 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005aa6:	bf00      	nop
 8005aa8:	3708      	adds	r7, #8
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}

08005aae <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b086      	sub	sp, #24
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	617b      	str	r3, [r7, #20]
 8005abc:	2300      	movs	r3, #0
 8005abe:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005ac0:	79fb      	ldrb	r3, [r7, #7]
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	6939      	ldr	r1, [r7, #16]
 8005ac6:	6978      	ldr	r0, [r7, #20]
 8005ac8:	f7ff ff7d 	bl	80059c6 <xQueueGenericCreate>
 8005acc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	f7ff ffd3 	bl	8005a7a <prvInitialiseMutex>

		return xNewQueue;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
	}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3718      	adds	r7, #24
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}

08005ade <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b088      	sub	sp, #32
 8005ae2:	af02      	add	r7, sp, #8
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	6039      	str	r1, [r7, #0]
 8005ae8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005aea:	2301      	movs	r3, #1
 8005aec:	617b      	str	r3, [r7, #20]
 8005aee:	2300      	movs	r3, #0
 8005af0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005af2:	79fb      	ldrb	r3, [r7, #7]
 8005af4:	9300      	str	r3, [sp, #0]
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	2200      	movs	r2, #0
 8005afa:	6939      	ldr	r1, [r7, #16]
 8005afc:	6978      	ldr	r0, [r7, #20]
 8005afe:	f7ff fee5 	bl	80058cc <xQueueGenericCreateStatic>
 8005b02:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f7ff ffb8 	bl	8005a7a <prvInitialiseMutex>

		return xNewQueue;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
	}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3718      	adds	r7, #24
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b08e      	sub	sp, #56	@ 0x38
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
 8005b20:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005b22:	2300      	movs	r3, #0
 8005b24:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10b      	bne.n	8005b48 <xQueueGenericSend+0x34>
	__asm volatile
 8005b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b34:	f383 8811 	msr	BASEPRI, r3
 8005b38:	f3bf 8f6f 	isb	sy
 8005b3c:	f3bf 8f4f 	dsb	sy
 8005b40:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005b42:	bf00      	nop
 8005b44:	bf00      	nop
 8005b46:	e7fd      	b.n	8005b44 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d103      	bne.n	8005b56 <xQueueGenericSend+0x42>
 8005b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d101      	bne.n	8005b5a <xQueueGenericSend+0x46>
 8005b56:	2301      	movs	r3, #1
 8005b58:	e000      	b.n	8005b5c <xQueueGenericSend+0x48>
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d10b      	bne.n	8005b78 <xQueueGenericSend+0x64>
	__asm volatile
 8005b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b64:	f383 8811 	msr	BASEPRI, r3
 8005b68:	f3bf 8f6f 	isb	sy
 8005b6c:	f3bf 8f4f 	dsb	sy
 8005b70:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005b72:	bf00      	nop
 8005b74:	bf00      	nop
 8005b76:	e7fd      	b.n	8005b74 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d103      	bne.n	8005b86 <xQueueGenericSend+0x72>
 8005b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d101      	bne.n	8005b8a <xQueueGenericSend+0x76>
 8005b86:	2301      	movs	r3, #1
 8005b88:	e000      	b.n	8005b8c <xQueueGenericSend+0x78>
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10b      	bne.n	8005ba8 <xQueueGenericSend+0x94>
	__asm volatile
 8005b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b94:	f383 8811 	msr	BASEPRI, r3
 8005b98:	f3bf 8f6f 	isb	sy
 8005b9c:	f3bf 8f4f 	dsb	sy
 8005ba0:	623b      	str	r3, [r7, #32]
}
 8005ba2:	bf00      	nop
 8005ba4:	bf00      	nop
 8005ba6:	e7fd      	b.n	8005ba4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ba8:	f001 f9d6 	bl	8006f58 <xTaskGetSchedulerState>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d102      	bne.n	8005bb8 <xQueueGenericSend+0xa4>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d101      	bne.n	8005bbc <xQueueGenericSend+0xa8>
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e000      	b.n	8005bbe <xQueueGenericSend+0xaa>
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d10b      	bne.n	8005bda <xQueueGenericSend+0xc6>
	__asm volatile
 8005bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bc6:	f383 8811 	msr	BASEPRI, r3
 8005bca:	f3bf 8f6f 	isb	sy
 8005bce:	f3bf 8f4f 	dsb	sy
 8005bd2:	61fb      	str	r3, [r7, #28]
}
 8005bd4:	bf00      	nop
 8005bd6:	bf00      	nop
 8005bd8:	e7fd      	b.n	8005bd6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005bda:	f001 fcd7 	bl	800758c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005be0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005be4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d302      	bcc.n	8005bf0 <xQueueGenericSend+0xdc>
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d129      	bne.n	8005c44 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005bf0:	683a      	ldr	r2, [r7, #0]
 8005bf2:	68b9      	ldr	r1, [r7, #8]
 8005bf4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005bf6:	f000 fac8 	bl	800618a <prvCopyDataToQueue>
 8005bfa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d010      	beq.n	8005c26 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c06:	3324      	adds	r3, #36	@ 0x24
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f000 ffe5 	bl	8006bd8 <xTaskRemoveFromEventList>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d013      	beq.n	8005c3c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005c14:	4b3f      	ldr	r3, [pc, #252]	@ (8005d14 <xQueueGenericSend+0x200>)
 8005c16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c1a:	601a      	str	r2, [r3, #0]
 8005c1c:	f3bf 8f4f 	dsb	sy
 8005c20:	f3bf 8f6f 	isb	sy
 8005c24:	e00a      	b.n	8005c3c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d007      	beq.n	8005c3c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005c2c:	4b39      	ldr	r3, [pc, #228]	@ (8005d14 <xQueueGenericSend+0x200>)
 8005c2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c32:	601a      	str	r2, [r3, #0]
 8005c34:	f3bf 8f4f 	dsb	sy
 8005c38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005c3c:	f001 fcd6 	bl	80075ec <vPortExitCritical>
				return pdPASS;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e063      	b.n	8005d0c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d103      	bne.n	8005c52 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c4a:	f001 fccf 	bl	80075ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	e05c      	b.n	8005d0c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d106      	bne.n	8005c66 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c58:	f107 0314 	add.w	r3, r7, #20
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f001 f81f 	bl	8006ca0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c62:	2301      	movs	r3, #1
 8005c64:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c66:	f001 fcc1 	bl	80075ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c6a:	f000 fdcd 	bl	8006808 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c6e:	f001 fc8d 	bl	800758c <vPortEnterCritical>
 8005c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c78:	b25b      	sxtb	r3, r3
 8005c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c7e:	d103      	bne.n	8005c88 <xQueueGenericSend+0x174>
 8005c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c8a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c8e:	b25b      	sxtb	r3, r3
 8005c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c94:	d103      	bne.n	8005c9e <xQueueGenericSend+0x18a>
 8005c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c9e:	f001 fca5 	bl	80075ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ca2:	1d3a      	adds	r2, r7, #4
 8005ca4:	f107 0314 	add.w	r3, r7, #20
 8005ca8:	4611      	mov	r1, r2
 8005caa:	4618      	mov	r0, r3
 8005cac:	f001 f80e 	bl	8006ccc <xTaskCheckForTimeOut>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d124      	bne.n	8005d00 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005cb6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005cb8:	f000 fb5f 	bl	800637a <prvIsQueueFull>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d018      	beq.n	8005cf4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc4:	3310      	adds	r3, #16
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	4611      	mov	r1, r2
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f000 ff5e 	bl	8006b8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005cd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005cd2:	f000 faea 	bl	80062aa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005cd6:	f000 fda5 	bl	8006824 <xTaskResumeAll>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f47f af7c 	bne.w	8005bda <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8005d14 <xQueueGenericSend+0x200>)
 8005ce4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ce8:	601a      	str	r2, [r3, #0]
 8005cea:	f3bf 8f4f 	dsb	sy
 8005cee:	f3bf 8f6f 	isb	sy
 8005cf2:	e772      	b.n	8005bda <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005cf4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005cf6:	f000 fad8 	bl	80062aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005cfa:	f000 fd93 	bl	8006824 <xTaskResumeAll>
 8005cfe:	e76c      	b.n	8005bda <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005d00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d02:	f000 fad2 	bl	80062aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d06:	f000 fd8d 	bl	8006824 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005d0a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3738      	adds	r7, #56	@ 0x38
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	e000ed04 	.word	0xe000ed04

08005d18 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b08e      	sub	sp, #56	@ 0x38
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d10b      	bne.n	8005d44 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8005d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d30:	f383 8811 	msr	BASEPRI, r3
 8005d34:	f3bf 8f6f 	isb	sy
 8005d38:	f3bf 8f4f 	dsb	sy
 8005d3c:	623b      	str	r3, [r7, #32]
}
 8005d3e:	bf00      	nop
 8005d40:	bf00      	nop
 8005d42:	e7fd      	b.n	8005d40 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00b      	beq.n	8005d64 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8005d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d50:	f383 8811 	msr	BASEPRI, r3
 8005d54:	f3bf 8f6f 	isb	sy
 8005d58:	f3bf 8f4f 	dsb	sy
 8005d5c:	61fb      	str	r3, [r7, #28]
}
 8005d5e:	bf00      	nop
 8005d60:	bf00      	nop
 8005d62:	e7fd      	b.n	8005d60 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d103      	bne.n	8005d74 <xQueueGiveFromISR+0x5c>
 8005d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d101      	bne.n	8005d78 <xQueueGiveFromISR+0x60>
 8005d74:	2301      	movs	r3, #1
 8005d76:	e000      	b.n	8005d7a <xQueueGiveFromISR+0x62>
 8005d78:	2300      	movs	r3, #0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d10b      	bne.n	8005d96 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8005d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d82:	f383 8811 	msr	BASEPRI, r3
 8005d86:	f3bf 8f6f 	isb	sy
 8005d8a:	f3bf 8f4f 	dsb	sy
 8005d8e:	61bb      	str	r3, [r7, #24]
}
 8005d90:	bf00      	nop
 8005d92:	bf00      	nop
 8005d94:	e7fd      	b.n	8005d92 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d96:	f001 fcbb 	bl	8007710 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005d9a:	f3ef 8211 	mrs	r2, BASEPRI
 8005d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005da2:	f383 8811 	msr	BASEPRI, r3
 8005da6:	f3bf 8f6f 	isb	sy
 8005daa:	f3bf 8f4f 	dsb	sy
 8005dae:	617a      	str	r2, [r7, #20]
 8005db0:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005db2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dba:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d22b      	bcs.n	8005e1e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005dcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dd2:	1c5a      	adds	r2, r3, #1
 8005dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dd6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005dd8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de0:	d112      	bne.n	8005e08 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d016      	beq.n	8005e18 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dec:	3324      	adds	r3, #36	@ 0x24
 8005dee:	4618      	mov	r0, r3
 8005df0:	f000 fef2 	bl	8006bd8 <xTaskRemoveFromEventList>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00e      	beq.n	8005e18 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00b      	beq.n	8005e18 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	2201      	movs	r2, #1
 8005e04:	601a      	str	r2, [r3, #0]
 8005e06:	e007      	b.n	8005e18 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005e08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	b25a      	sxtb	r2, r3
 8005e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e1c:	e001      	b.n	8005e22 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e24:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005e2c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3738      	adds	r7, #56	@ 0x38
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b08e      	sub	sp, #56	@ 0x38
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005e42:	2300      	movs	r3, #0
 8005e44:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10b      	bne.n	8005e6c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e58:	f383 8811 	msr	BASEPRI, r3
 8005e5c:	f3bf 8f6f 	isb	sy
 8005e60:	f3bf 8f4f 	dsb	sy
 8005e64:	623b      	str	r3, [r7, #32]
}
 8005e66:	bf00      	nop
 8005e68:	bf00      	nop
 8005e6a:	e7fd      	b.n	8005e68 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d00b      	beq.n	8005e8c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e78:	f383 8811 	msr	BASEPRI, r3
 8005e7c:	f3bf 8f6f 	isb	sy
 8005e80:	f3bf 8f4f 	dsb	sy
 8005e84:	61fb      	str	r3, [r7, #28]
}
 8005e86:	bf00      	nop
 8005e88:	bf00      	nop
 8005e8a:	e7fd      	b.n	8005e88 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e8c:	f001 f864 	bl	8006f58 <xTaskGetSchedulerState>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d102      	bne.n	8005e9c <xQueueSemaphoreTake+0x64>
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d101      	bne.n	8005ea0 <xQueueSemaphoreTake+0x68>
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e000      	b.n	8005ea2 <xQueueSemaphoreTake+0x6a>
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10b      	bne.n	8005ebe <xQueueSemaphoreTake+0x86>
	__asm volatile
 8005ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eaa:	f383 8811 	msr	BASEPRI, r3
 8005eae:	f3bf 8f6f 	isb	sy
 8005eb2:	f3bf 8f4f 	dsb	sy
 8005eb6:	61bb      	str	r3, [r7, #24]
}
 8005eb8:	bf00      	nop
 8005eba:	bf00      	nop
 8005ebc:	e7fd      	b.n	8005eba <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ebe:	f001 fb65 	bl	800758c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ec6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d024      	beq.n	8005f18 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed0:	1e5a      	subs	r2, r3, #1
 8005ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ed4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d104      	bne.n	8005ee8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005ede:	f001 f9e7 	bl	80072b0 <pvTaskIncrementMutexHeldCount>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ee6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00f      	beq.n	8005f10 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ef2:	3310      	adds	r3, #16
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f000 fe6f 	bl	8006bd8 <xTaskRemoveFromEventList>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d007      	beq.n	8005f10 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005f00:	4b54      	ldr	r3, [pc, #336]	@ (8006054 <xQueueSemaphoreTake+0x21c>)
 8005f02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f06:	601a      	str	r2, [r3, #0]
 8005f08:	f3bf 8f4f 	dsb	sy
 8005f0c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005f10:	f001 fb6c 	bl	80075ec <vPortExitCritical>
				return pdPASS;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e098      	b.n	800604a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d112      	bne.n	8005f44 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00b      	beq.n	8005f3c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f28:	f383 8811 	msr	BASEPRI, r3
 8005f2c:	f3bf 8f6f 	isb	sy
 8005f30:	f3bf 8f4f 	dsb	sy
 8005f34:	617b      	str	r3, [r7, #20]
}
 8005f36:	bf00      	nop
 8005f38:	bf00      	nop
 8005f3a:	e7fd      	b.n	8005f38 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005f3c:	f001 fb56 	bl	80075ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005f40:	2300      	movs	r3, #0
 8005f42:	e082      	b.n	800604a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d106      	bne.n	8005f58 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f4a:	f107 030c 	add.w	r3, r7, #12
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f000 fea6 	bl	8006ca0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f54:	2301      	movs	r3, #1
 8005f56:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f58:	f001 fb48 	bl	80075ec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f5c:	f000 fc54 	bl	8006808 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f60:	f001 fb14 	bl	800758c <vPortEnterCritical>
 8005f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f66:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f6a:	b25b      	sxtb	r3, r3
 8005f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f70:	d103      	bne.n	8005f7a <xQueueSemaphoreTake+0x142>
 8005f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f7c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f80:	b25b      	sxtb	r3, r3
 8005f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f86:	d103      	bne.n	8005f90 <xQueueSemaphoreTake+0x158>
 8005f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f90:	f001 fb2c 	bl	80075ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f94:	463a      	mov	r2, r7
 8005f96:	f107 030c 	add.w	r3, r7, #12
 8005f9a:	4611      	mov	r1, r2
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f000 fe95 	bl	8006ccc <xTaskCheckForTimeOut>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d132      	bne.n	800600e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fa8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005faa:	f000 f9d0 	bl	800634e <prvIsQueueEmpty>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d026      	beq.n	8006002 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d109      	bne.n	8005fd0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005fbc:	f001 fae6 	bl	800758c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f000 ffe5 	bl	8006f94 <xTaskPriorityInherit>
 8005fca:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005fcc:	f001 fb0e 	bl	80075ec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fd2:	3324      	adds	r3, #36	@ 0x24
 8005fd4:	683a      	ldr	r2, [r7, #0]
 8005fd6:	4611      	mov	r1, r2
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f000 fdd7 	bl	8006b8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005fde:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005fe0:	f000 f963 	bl	80062aa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005fe4:	f000 fc1e 	bl	8006824 <xTaskResumeAll>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	f47f af67 	bne.w	8005ebe <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005ff0:	4b18      	ldr	r3, [pc, #96]	@ (8006054 <xQueueSemaphoreTake+0x21c>)
 8005ff2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ff6:	601a      	str	r2, [r3, #0]
 8005ff8:	f3bf 8f4f 	dsb	sy
 8005ffc:	f3bf 8f6f 	isb	sy
 8006000:	e75d      	b.n	8005ebe <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006002:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006004:	f000 f951 	bl	80062aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006008:	f000 fc0c 	bl	8006824 <xTaskResumeAll>
 800600c:	e757      	b.n	8005ebe <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800600e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006010:	f000 f94b 	bl	80062aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006014:	f000 fc06 	bl	8006824 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006018:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800601a:	f000 f998 	bl	800634e <prvIsQueueEmpty>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	f43f af4c 	beq.w	8005ebe <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00d      	beq.n	8006048 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800602c:	f001 faae 	bl	800758c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006030:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006032:	f000 f893 	bl	800615c <prvGetDisinheritPriorityAfterTimeout>
 8006036:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800603e:	4618      	mov	r0, r3
 8006040:	f001 f8a6 	bl	8007190 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006044:	f001 fad2 	bl	80075ec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006048:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800604a:	4618      	mov	r0, r3
 800604c:	3738      	adds	r7, #56	@ 0x38
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	e000ed04 	.word	0xe000ed04

08006058 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b08e      	sub	sp, #56	@ 0x38
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800606a:	2b00      	cmp	r3, #0
 800606c:	d10b      	bne.n	8006086 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800606e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006072:	f383 8811 	msr	BASEPRI, r3
 8006076:	f3bf 8f6f 	isb	sy
 800607a:	f3bf 8f4f 	dsb	sy
 800607e:	623b      	str	r3, [r7, #32]
}
 8006080:	bf00      	nop
 8006082:	bf00      	nop
 8006084:	e7fd      	b.n	8006082 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d103      	bne.n	8006094 <xQueueReceiveFromISR+0x3c>
 800608c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800608e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006090:	2b00      	cmp	r3, #0
 8006092:	d101      	bne.n	8006098 <xQueueReceiveFromISR+0x40>
 8006094:	2301      	movs	r3, #1
 8006096:	e000      	b.n	800609a <xQueueReceiveFromISR+0x42>
 8006098:	2300      	movs	r3, #0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10b      	bne.n	80060b6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800609e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060a2:	f383 8811 	msr	BASEPRI, r3
 80060a6:	f3bf 8f6f 	isb	sy
 80060aa:	f3bf 8f4f 	dsb	sy
 80060ae:	61fb      	str	r3, [r7, #28]
}
 80060b0:	bf00      	nop
 80060b2:	bf00      	nop
 80060b4:	e7fd      	b.n	80060b2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80060b6:	f001 fb2b 	bl	8007710 <vPortValidateInterruptPriority>
	__asm volatile
 80060ba:	f3ef 8211 	mrs	r2, BASEPRI
 80060be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c2:	f383 8811 	msr	BASEPRI, r3
 80060c6:	f3bf 8f6f 	isb	sy
 80060ca:	f3bf 8f4f 	dsb	sy
 80060ce:	61ba      	str	r2, [r7, #24]
 80060d0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80060d2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80060d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060da:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d02f      	beq.n	8006142 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80060e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80060e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80060ec:	68b9      	ldr	r1, [r7, #8]
 80060ee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80060f0:	f000 f8b5 	bl	800625e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80060f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060f6:	1e5a      	subs	r2, r3, #1
 80060f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060fa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80060fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006104:	d112      	bne.n	800612c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d016      	beq.n	800613c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800610e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006110:	3310      	adds	r3, #16
 8006112:	4618      	mov	r0, r3
 8006114:	f000 fd60 	bl	8006bd8 <xTaskRemoveFromEventList>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00e      	beq.n	800613c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00b      	beq.n	800613c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	601a      	str	r2, [r3, #0]
 800612a:	e007      	b.n	800613c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800612c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006130:	3301      	adds	r3, #1
 8006132:	b2db      	uxtb	r3, r3
 8006134:	b25a      	sxtb	r2, r3
 8006136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006138:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800613c:	2301      	movs	r3, #1
 800613e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006140:	e001      	b.n	8006146 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006142:	2300      	movs	r3, #0
 8006144:	637b      	str	r3, [r7, #52]	@ 0x34
 8006146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006148:	613b      	str	r3, [r7, #16]
	__asm volatile
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	f383 8811 	msr	BASEPRI, r3
}
 8006150:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006152:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006154:	4618      	mov	r0, r3
 8006156:	3738      	adds	r7, #56	@ 0x38
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800615c:	b480      	push	{r7}
 800615e:	b085      	sub	sp, #20
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006168:	2b00      	cmp	r3, #0
 800616a:	d006      	beq.n	800617a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f1c3 0307 	rsb	r3, r3, #7
 8006176:	60fb      	str	r3, [r7, #12]
 8006178:	e001      	b.n	800617e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800617a:	2300      	movs	r3, #0
 800617c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800617e:	68fb      	ldr	r3, [r7, #12]
	}
 8006180:	4618      	mov	r0, r3
 8006182:	3714      	adds	r7, #20
 8006184:	46bd      	mov	sp, r7
 8006186:	bc80      	pop	{r7}
 8006188:	4770      	bx	lr

0800618a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800618a:	b580      	push	{r7, lr}
 800618c:	b086      	sub	sp, #24
 800618e:	af00      	add	r7, sp, #0
 8006190:	60f8      	str	r0, [r7, #12]
 8006192:	60b9      	str	r1, [r7, #8]
 8006194:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006196:	2300      	movs	r3, #0
 8006198:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800619e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10d      	bne.n	80061c4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d14d      	bne.n	800624c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	4618      	mov	r0, r3
 80061b6:	f000 ff63 	bl	8007080 <xTaskPriorityDisinherit>
 80061ba:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	609a      	str	r2, [r3, #8]
 80061c2:	e043      	b.n	800624c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d119      	bne.n	80061fe <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6858      	ldr	r0, [r3, #4]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061d2:	461a      	mov	r2, r3
 80061d4:	68b9      	ldr	r1, [r7, #8]
 80061d6:	f001 fcf3 	bl	8007bc0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	685a      	ldr	r2, [r3, #4]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061e2:	441a      	add	r2, r3
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	685a      	ldr	r2, [r3, #4]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d32b      	bcc.n	800624c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	605a      	str	r2, [r3, #4]
 80061fc:	e026      	b.n	800624c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	68d8      	ldr	r0, [r3, #12]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006206:	461a      	mov	r2, r3
 8006208:	68b9      	ldr	r1, [r7, #8]
 800620a:	f001 fcd9 	bl	8007bc0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	68da      	ldr	r2, [r3, #12]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006216:	425b      	negs	r3, r3
 8006218:	441a      	add	r2, r3
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	68da      	ldr	r2, [r3, #12]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	429a      	cmp	r2, r3
 8006228:	d207      	bcs.n	800623a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	689a      	ldr	r2, [r3, #8]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006232:	425b      	negs	r3, r3
 8006234:	441a      	add	r2, r3
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2b02      	cmp	r3, #2
 800623e:	d105      	bne.n	800624c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d002      	beq.n	800624c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	3b01      	subs	r3, #1
 800624a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	1c5a      	adds	r2, r3, #1
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006254:	697b      	ldr	r3, [r7, #20]
}
 8006256:	4618      	mov	r0, r3
 8006258:	3718      	adds	r7, #24
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b082      	sub	sp, #8
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
 8006266:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800626c:	2b00      	cmp	r3, #0
 800626e:	d018      	beq.n	80062a2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	68da      	ldr	r2, [r3, #12]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006278:	441a      	add	r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	68da      	ldr	r2, [r3, #12]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	429a      	cmp	r2, r3
 8006288:	d303      	bcc.n	8006292 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	68d9      	ldr	r1, [r3, #12]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800629a:	461a      	mov	r2, r3
 800629c:	6838      	ldr	r0, [r7, #0]
 800629e:	f001 fc8f 	bl	8007bc0 <memcpy>
	}
}
 80062a2:	bf00      	nop
 80062a4:	3708      	adds	r7, #8
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}

080062aa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b084      	sub	sp, #16
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80062b2:	f001 f96b 	bl	800758c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062bc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80062be:	e011      	b.n	80062e4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d012      	beq.n	80062ee <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	3324      	adds	r3, #36	@ 0x24
 80062cc:	4618      	mov	r0, r3
 80062ce:	f000 fc83 	bl	8006bd8 <xTaskRemoveFromEventList>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d001      	beq.n	80062dc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80062d8:	f000 fd5c 	bl	8006d94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80062dc:	7bfb      	ldrb	r3, [r7, #15]
 80062de:	3b01      	subs	r3, #1
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80062e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	dce9      	bgt.n	80062c0 <prvUnlockQueue+0x16>
 80062ec:	e000      	b.n	80062f0 <prvUnlockQueue+0x46>
					break;
 80062ee:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	22ff      	movs	r2, #255	@ 0xff
 80062f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80062f8:	f001 f978 	bl	80075ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80062fc:	f001 f946 	bl	800758c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006306:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006308:	e011      	b.n	800632e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d012      	beq.n	8006338 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	3310      	adds	r3, #16
 8006316:	4618      	mov	r0, r3
 8006318:	f000 fc5e 	bl	8006bd8 <xTaskRemoveFromEventList>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d001      	beq.n	8006326 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006322:	f000 fd37 	bl	8006d94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006326:	7bbb      	ldrb	r3, [r7, #14]
 8006328:	3b01      	subs	r3, #1
 800632a:	b2db      	uxtb	r3, r3
 800632c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800632e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006332:	2b00      	cmp	r3, #0
 8006334:	dce9      	bgt.n	800630a <prvUnlockQueue+0x60>
 8006336:	e000      	b.n	800633a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006338:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	22ff      	movs	r2, #255	@ 0xff
 800633e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006342:	f001 f953 	bl	80075ec <vPortExitCritical>
}
 8006346:	bf00      	nop
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b084      	sub	sp, #16
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006356:	f001 f919 	bl	800758c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800635e:	2b00      	cmp	r3, #0
 8006360:	d102      	bne.n	8006368 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006362:	2301      	movs	r3, #1
 8006364:	60fb      	str	r3, [r7, #12]
 8006366:	e001      	b.n	800636c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006368:	2300      	movs	r3, #0
 800636a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800636c:	f001 f93e 	bl	80075ec <vPortExitCritical>

	return xReturn;
 8006370:	68fb      	ldr	r3, [r7, #12]
}
 8006372:	4618      	mov	r0, r3
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}

0800637a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800637a:	b580      	push	{r7, lr}
 800637c:	b084      	sub	sp, #16
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006382:	f001 f903 	bl	800758c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800638e:	429a      	cmp	r2, r3
 8006390:	d102      	bne.n	8006398 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006392:	2301      	movs	r3, #1
 8006394:	60fb      	str	r3, [r7, #12]
 8006396:	e001      	b.n	800639c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006398:	2300      	movs	r3, #0
 800639a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800639c:	f001 f926 	bl	80075ec <vPortExitCritical>

	return xReturn;
 80063a0:	68fb      	ldr	r3, [r7, #12]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b08e      	sub	sp, #56	@ 0x38
 80063ae:	af04      	add	r7, sp, #16
 80063b0:	60f8      	str	r0, [r7, #12]
 80063b2:	60b9      	str	r1, [r7, #8]
 80063b4:	607a      	str	r2, [r7, #4]
 80063b6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80063b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d10b      	bne.n	80063d6 <xTaskCreateStatic+0x2c>
	__asm volatile
 80063be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c2:	f383 8811 	msr	BASEPRI, r3
 80063c6:	f3bf 8f6f 	isb	sy
 80063ca:	f3bf 8f4f 	dsb	sy
 80063ce:	623b      	str	r3, [r7, #32]
}
 80063d0:	bf00      	nop
 80063d2:	bf00      	nop
 80063d4:	e7fd      	b.n	80063d2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80063d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d10b      	bne.n	80063f4 <xTaskCreateStatic+0x4a>
	__asm volatile
 80063dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063e0:	f383 8811 	msr	BASEPRI, r3
 80063e4:	f3bf 8f6f 	isb	sy
 80063e8:	f3bf 8f4f 	dsb	sy
 80063ec:	61fb      	str	r3, [r7, #28]
}
 80063ee:	bf00      	nop
 80063f0:	bf00      	nop
 80063f2:	e7fd      	b.n	80063f0 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80063f4:	2354      	movs	r3, #84	@ 0x54
 80063f6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	2b54      	cmp	r3, #84	@ 0x54
 80063fc:	d00b      	beq.n	8006416 <xTaskCreateStatic+0x6c>
	__asm volatile
 80063fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006402:	f383 8811 	msr	BASEPRI, r3
 8006406:	f3bf 8f6f 	isb	sy
 800640a:	f3bf 8f4f 	dsb	sy
 800640e:	61bb      	str	r3, [r7, #24]
}
 8006410:	bf00      	nop
 8006412:	bf00      	nop
 8006414:	e7fd      	b.n	8006412 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006416:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800641a:	2b00      	cmp	r3, #0
 800641c:	d01e      	beq.n	800645c <xTaskCreateStatic+0xb2>
 800641e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006420:	2b00      	cmp	r3, #0
 8006422:	d01b      	beq.n	800645c <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006426:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800642a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800642c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800642e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006430:	2202      	movs	r2, #2
 8006432:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006436:	2300      	movs	r3, #0
 8006438:	9303      	str	r3, [sp, #12]
 800643a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800643c:	9302      	str	r3, [sp, #8]
 800643e:	f107 0314 	add.w	r3, r7, #20
 8006442:	9301      	str	r3, [sp, #4]
 8006444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006446:	9300      	str	r3, [sp, #0]
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	68b9      	ldr	r1, [r7, #8]
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	f000 f850 	bl	80064f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006454:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006456:	f000 f8d5 	bl	8006604 <prvAddNewTaskToReadyList>
 800645a:	e001      	b.n	8006460 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800645c:	2300      	movs	r3, #0
 800645e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006460:	697b      	ldr	r3, [r7, #20]
	}
 8006462:	4618      	mov	r0, r3
 8006464:	3728      	adds	r7, #40	@ 0x28
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}

0800646a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800646a:	b580      	push	{r7, lr}
 800646c:	b08c      	sub	sp, #48	@ 0x30
 800646e:	af04      	add	r7, sp, #16
 8006470:	60f8      	str	r0, [r7, #12]
 8006472:	60b9      	str	r1, [r7, #8]
 8006474:	603b      	str	r3, [r7, #0]
 8006476:	4613      	mov	r3, r2
 8006478:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800647a:	88fb      	ldrh	r3, [r7, #6]
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	4618      	mov	r0, r3
 8006480:	f001 f986 	bl	8007790 <pvPortMalloc>
 8006484:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00e      	beq.n	80064aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800648c:	2054      	movs	r0, #84	@ 0x54
 800648e:	f001 f97f 	bl	8007790 <pvPortMalloc>
 8006492:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d003      	beq.n	80064a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	697a      	ldr	r2, [r7, #20]
 800649e:	631a      	str	r2, [r3, #48]	@ 0x30
 80064a0:	e005      	b.n	80064ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80064a2:	6978      	ldr	r0, [r7, #20]
 80064a4:	f001 fa42 	bl	800792c <vPortFree>
 80064a8:	e001      	b.n	80064ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80064aa:	2300      	movs	r3, #0
 80064ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d017      	beq.n	80064e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80064bc:	88fa      	ldrh	r2, [r7, #6]
 80064be:	2300      	movs	r3, #0
 80064c0:	9303      	str	r3, [sp, #12]
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	9302      	str	r3, [sp, #8]
 80064c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064c8:	9301      	str	r3, [sp, #4]
 80064ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064cc:	9300      	str	r3, [sp, #0]
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	68b9      	ldr	r1, [r7, #8]
 80064d2:	68f8      	ldr	r0, [r7, #12]
 80064d4:	f000 f80e 	bl	80064f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064d8:	69f8      	ldr	r0, [r7, #28]
 80064da:	f000 f893 	bl	8006604 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80064de:	2301      	movs	r3, #1
 80064e0:	61bb      	str	r3, [r7, #24]
 80064e2:	e002      	b.n	80064ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80064e4:	f04f 33ff 	mov.w	r3, #4294967295
 80064e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80064ea:	69bb      	ldr	r3, [r7, #24]
	}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3720      	adds	r7, #32
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b088      	sub	sp, #32
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	607a      	str	r2, [r7, #4]
 8006500:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006504:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800650c:	3b01      	subs	r3, #1
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	4413      	add	r3, r2
 8006512:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	f023 0307 	bic.w	r3, r3, #7
 800651a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	f003 0307 	and.w	r3, r3, #7
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00b      	beq.n	800653e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8006526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800652a:	f383 8811 	msr	BASEPRI, r3
 800652e:	f3bf 8f6f 	isb	sy
 8006532:	f3bf 8f4f 	dsb	sy
 8006536:	617b      	str	r3, [r7, #20]
}
 8006538:	bf00      	nop
 800653a:	bf00      	nop
 800653c:	e7fd      	b.n	800653a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d01f      	beq.n	8006584 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006544:	2300      	movs	r3, #0
 8006546:	61fb      	str	r3, [r7, #28]
 8006548:	e012      	b.n	8006570 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800654a:	68ba      	ldr	r2, [r7, #8]
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	4413      	add	r3, r2
 8006550:	7819      	ldrb	r1, [r3, #0]
 8006552:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	4413      	add	r3, r2
 8006558:	3334      	adds	r3, #52	@ 0x34
 800655a:	460a      	mov	r2, r1
 800655c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800655e:	68ba      	ldr	r2, [r7, #8]
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	4413      	add	r3, r2
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d006      	beq.n	8006578 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	3301      	adds	r3, #1
 800656e:	61fb      	str	r3, [r7, #28]
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	2b0f      	cmp	r3, #15
 8006574:	d9e9      	bls.n	800654a <prvInitialiseNewTask+0x56>
 8006576:	e000      	b.n	800657a <prvInitialiseNewTask+0x86>
			{
				break;
 8006578:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800657a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800657c:	2200      	movs	r2, #0
 800657e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006582:	e003      	b.n	800658c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006586:	2200      	movs	r2, #0
 8006588:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800658c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800658e:	2b06      	cmp	r3, #6
 8006590:	d901      	bls.n	8006596 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006592:	2306      	movs	r3, #6
 8006594:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006598:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800659a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800659c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800659e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80065a0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80065a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065a4:	2200      	movs	r2, #0
 80065a6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80065a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065aa:	3304      	adds	r3, #4
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7ff f892 	bl	80056d6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80065b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b4:	3318      	adds	r3, #24
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7ff f88d 	bl	80056d6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80065bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065c0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065c4:	f1c3 0207 	rsb	r2, r3, #7
 80065c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80065cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065d0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80065d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d4:	2200      	movs	r2, #0
 80065d6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80065d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065da:	2200      	movs	r2, #0
 80065dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80065e0:	683a      	ldr	r2, [r7, #0]
 80065e2:	68f9      	ldr	r1, [r7, #12]
 80065e4:	69b8      	ldr	r0, [r7, #24]
 80065e6:	f000 fedd 	bl	80073a4 <pxPortInitialiseStack>
 80065ea:	4602      	mov	r2, r0
 80065ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80065f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d002      	beq.n	80065fc <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80065f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065fc:	bf00      	nop
 80065fe:	3720      	adds	r7, #32
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800660c:	f000 ffbe 	bl	800758c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006610:	4b2a      	ldr	r3, [pc, #168]	@ (80066bc <prvAddNewTaskToReadyList+0xb8>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	3301      	adds	r3, #1
 8006616:	4a29      	ldr	r2, [pc, #164]	@ (80066bc <prvAddNewTaskToReadyList+0xb8>)
 8006618:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800661a:	4b29      	ldr	r3, [pc, #164]	@ (80066c0 <prvAddNewTaskToReadyList+0xbc>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d109      	bne.n	8006636 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006622:	4a27      	ldr	r2, [pc, #156]	@ (80066c0 <prvAddNewTaskToReadyList+0xbc>)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006628:	4b24      	ldr	r3, [pc, #144]	@ (80066bc <prvAddNewTaskToReadyList+0xb8>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d110      	bne.n	8006652 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006630:	f000 fbd4 	bl	8006ddc <prvInitialiseTaskLists>
 8006634:	e00d      	b.n	8006652 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006636:	4b23      	ldr	r3, [pc, #140]	@ (80066c4 <prvAddNewTaskToReadyList+0xc0>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d109      	bne.n	8006652 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800663e:	4b20      	ldr	r3, [pc, #128]	@ (80066c0 <prvAddNewTaskToReadyList+0xbc>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006648:	429a      	cmp	r2, r3
 800664a:	d802      	bhi.n	8006652 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800664c:	4a1c      	ldr	r2, [pc, #112]	@ (80066c0 <prvAddNewTaskToReadyList+0xbc>)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006652:	4b1d      	ldr	r3, [pc, #116]	@ (80066c8 <prvAddNewTaskToReadyList+0xc4>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	3301      	adds	r3, #1
 8006658:	4a1b      	ldr	r2, [pc, #108]	@ (80066c8 <prvAddNewTaskToReadyList+0xc4>)
 800665a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006660:	2201      	movs	r2, #1
 8006662:	409a      	lsls	r2, r3
 8006664:	4b19      	ldr	r3, [pc, #100]	@ (80066cc <prvAddNewTaskToReadyList+0xc8>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4313      	orrs	r3, r2
 800666a:	4a18      	ldr	r2, [pc, #96]	@ (80066cc <prvAddNewTaskToReadyList+0xc8>)
 800666c:	6013      	str	r3, [r2, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006672:	4613      	mov	r3, r2
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	4413      	add	r3, r2
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	4a15      	ldr	r2, [pc, #84]	@ (80066d0 <prvAddNewTaskToReadyList+0xcc>)
 800667c:	441a      	add	r2, r3
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	3304      	adds	r3, #4
 8006682:	4619      	mov	r1, r3
 8006684:	4610      	mov	r0, r2
 8006686:	f7ff f832 	bl	80056ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800668a:	f000 ffaf 	bl	80075ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800668e:	4b0d      	ldr	r3, [pc, #52]	@ (80066c4 <prvAddNewTaskToReadyList+0xc0>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00e      	beq.n	80066b4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006696:	4b0a      	ldr	r3, [pc, #40]	@ (80066c0 <prvAddNewTaskToReadyList+0xbc>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d207      	bcs.n	80066b4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80066a4:	4b0b      	ldr	r3, [pc, #44]	@ (80066d4 <prvAddNewTaskToReadyList+0xd0>)
 80066a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066aa:	601a      	str	r2, [r3, #0]
 80066ac:	f3bf 8f4f 	dsb	sy
 80066b0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066b4:	bf00      	nop
 80066b6:	3708      	adds	r7, #8
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	20000534 	.word	0x20000534
 80066c0:	20000434 	.word	0x20000434
 80066c4:	20000540 	.word	0x20000540
 80066c8:	20000550 	.word	0x20000550
 80066cc:	2000053c 	.word	0x2000053c
 80066d0:	20000438 	.word	0x20000438
 80066d4:	e000ed04 	.word	0xe000ed04

080066d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80066e0:	2300      	movs	r3, #0
 80066e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d018      	beq.n	800671c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80066ea:	4b14      	ldr	r3, [pc, #80]	@ (800673c <vTaskDelay+0x64>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d00b      	beq.n	800670a <vTaskDelay+0x32>
	__asm volatile
 80066f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f6:	f383 8811 	msr	BASEPRI, r3
 80066fa:	f3bf 8f6f 	isb	sy
 80066fe:	f3bf 8f4f 	dsb	sy
 8006702:	60bb      	str	r3, [r7, #8]
}
 8006704:	bf00      	nop
 8006706:	bf00      	nop
 8006708:	e7fd      	b.n	8006706 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800670a:	f000 f87d 	bl	8006808 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800670e:	2100      	movs	r1, #0
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 fde1 	bl	80072d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006716:	f000 f885 	bl	8006824 <xTaskResumeAll>
 800671a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d107      	bne.n	8006732 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006722:	4b07      	ldr	r3, [pc, #28]	@ (8006740 <vTaskDelay+0x68>)
 8006724:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006728:	601a      	str	r2, [r3, #0]
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006732:	bf00      	nop
 8006734:	3710      	adds	r7, #16
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	2000055c 	.word	0x2000055c
 8006740:	e000ed04 	.word	0xe000ed04

08006744 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b08a      	sub	sp, #40	@ 0x28
 8006748:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800674a:	2300      	movs	r3, #0
 800674c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800674e:	2300      	movs	r3, #0
 8006750:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006752:	463a      	mov	r2, r7
 8006754:	1d39      	adds	r1, r7, #4
 8006756:	f107 0308 	add.w	r3, r7, #8
 800675a:	4618      	mov	r0, r3
 800675c:	f7fa fd9c 	bl	8001298 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006760:	6839      	ldr	r1, [r7, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	68ba      	ldr	r2, [r7, #8]
 8006766:	9202      	str	r2, [sp, #8]
 8006768:	9301      	str	r3, [sp, #4]
 800676a:	2300      	movs	r3, #0
 800676c:	9300      	str	r3, [sp, #0]
 800676e:	2300      	movs	r3, #0
 8006770:	460a      	mov	r2, r1
 8006772:	491f      	ldr	r1, [pc, #124]	@ (80067f0 <vTaskStartScheduler+0xac>)
 8006774:	481f      	ldr	r0, [pc, #124]	@ (80067f4 <vTaskStartScheduler+0xb0>)
 8006776:	f7ff fe18 	bl	80063aa <xTaskCreateStatic>
 800677a:	4603      	mov	r3, r0
 800677c:	4a1e      	ldr	r2, [pc, #120]	@ (80067f8 <vTaskStartScheduler+0xb4>)
 800677e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006780:	4b1d      	ldr	r3, [pc, #116]	@ (80067f8 <vTaskStartScheduler+0xb4>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d002      	beq.n	800678e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006788:	2301      	movs	r3, #1
 800678a:	617b      	str	r3, [r7, #20]
 800678c:	e001      	b.n	8006792 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800678e:	2300      	movs	r3, #0
 8006790:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d116      	bne.n	80067c6 <vTaskStartScheduler+0x82>
	__asm volatile
 8006798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800679c:	f383 8811 	msr	BASEPRI, r3
 80067a0:	f3bf 8f6f 	isb	sy
 80067a4:	f3bf 8f4f 	dsb	sy
 80067a8:	613b      	str	r3, [r7, #16]
}
 80067aa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80067ac:	4b13      	ldr	r3, [pc, #76]	@ (80067fc <vTaskStartScheduler+0xb8>)
 80067ae:	f04f 32ff 	mov.w	r2, #4294967295
 80067b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80067b4:	4b12      	ldr	r3, [pc, #72]	@ (8006800 <vTaskStartScheduler+0xbc>)
 80067b6:	2201      	movs	r2, #1
 80067b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80067ba:	4b12      	ldr	r3, [pc, #72]	@ (8006804 <vTaskStartScheduler+0xc0>)
 80067bc:	2200      	movs	r2, #0
 80067be:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80067c0:	f000 fe72 	bl	80074a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80067c4:	e00f      	b.n	80067e6 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067cc:	d10b      	bne.n	80067e6 <vTaskStartScheduler+0xa2>
	__asm volatile
 80067ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d2:	f383 8811 	msr	BASEPRI, r3
 80067d6:	f3bf 8f6f 	isb	sy
 80067da:	f3bf 8f4f 	dsb	sy
 80067de:	60fb      	str	r3, [r7, #12]
}
 80067e0:	bf00      	nop
 80067e2:	bf00      	nop
 80067e4:	e7fd      	b.n	80067e2 <vTaskStartScheduler+0x9e>
}
 80067e6:	bf00      	nop
 80067e8:	3718      	adds	r7, #24
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	08007c70 	.word	0x08007c70
 80067f4:	08006dad 	.word	0x08006dad
 80067f8:	20000558 	.word	0x20000558
 80067fc:	20000554 	.word	0x20000554
 8006800:	20000540 	.word	0x20000540
 8006804:	20000538 	.word	0x20000538

08006808 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006808:	b480      	push	{r7}
 800680a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800680c:	4b04      	ldr	r3, [pc, #16]	@ (8006820 <vTaskSuspendAll+0x18>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	3301      	adds	r3, #1
 8006812:	4a03      	ldr	r2, [pc, #12]	@ (8006820 <vTaskSuspendAll+0x18>)
 8006814:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006816:	bf00      	nop
 8006818:	46bd      	mov	sp, r7
 800681a:	bc80      	pop	{r7}
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	2000055c 	.word	0x2000055c

08006824 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800682a:	2300      	movs	r3, #0
 800682c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800682e:	2300      	movs	r3, #0
 8006830:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006832:	4b42      	ldr	r3, [pc, #264]	@ (800693c <xTaskResumeAll+0x118>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d10b      	bne.n	8006852 <xTaskResumeAll+0x2e>
	__asm volatile
 800683a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800683e:	f383 8811 	msr	BASEPRI, r3
 8006842:	f3bf 8f6f 	isb	sy
 8006846:	f3bf 8f4f 	dsb	sy
 800684a:	603b      	str	r3, [r7, #0]
}
 800684c:	bf00      	nop
 800684e:	bf00      	nop
 8006850:	e7fd      	b.n	800684e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006852:	f000 fe9b 	bl	800758c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006856:	4b39      	ldr	r3, [pc, #228]	@ (800693c <xTaskResumeAll+0x118>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	3b01      	subs	r3, #1
 800685c:	4a37      	ldr	r2, [pc, #220]	@ (800693c <xTaskResumeAll+0x118>)
 800685e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006860:	4b36      	ldr	r3, [pc, #216]	@ (800693c <xTaskResumeAll+0x118>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d161      	bne.n	800692c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006868:	4b35      	ldr	r3, [pc, #212]	@ (8006940 <xTaskResumeAll+0x11c>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d05d      	beq.n	800692c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006870:	e02e      	b.n	80068d0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006872:	4b34      	ldr	r3, [pc, #208]	@ (8006944 <xTaskResumeAll+0x120>)
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	3318      	adds	r3, #24
 800687e:	4618      	mov	r0, r3
 8006880:	f7fe ff90 	bl	80057a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	3304      	adds	r3, #4
 8006888:	4618      	mov	r0, r3
 800688a:	f7fe ff8b 	bl	80057a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006892:	2201      	movs	r2, #1
 8006894:	409a      	lsls	r2, r3
 8006896:	4b2c      	ldr	r3, [pc, #176]	@ (8006948 <xTaskResumeAll+0x124>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4313      	orrs	r3, r2
 800689c:	4a2a      	ldr	r2, [pc, #168]	@ (8006948 <xTaskResumeAll+0x124>)
 800689e:	6013      	str	r3, [r2, #0]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068a4:	4613      	mov	r3, r2
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	4413      	add	r3, r2
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	4a27      	ldr	r2, [pc, #156]	@ (800694c <xTaskResumeAll+0x128>)
 80068ae:	441a      	add	r2, r3
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	3304      	adds	r3, #4
 80068b4:	4619      	mov	r1, r3
 80068b6:	4610      	mov	r0, r2
 80068b8:	f7fe ff19 	bl	80056ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068c0:	4b23      	ldr	r3, [pc, #140]	@ (8006950 <xTaskResumeAll+0x12c>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d302      	bcc.n	80068d0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80068ca:	4b22      	ldr	r3, [pc, #136]	@ (8006954 <xTaskResumeAll+0x130>)
 80068cc:	2201      	movs	r2, #1
 80068ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068d0:	4b1c      	ldr	r3, [pc, #112]	@ (8006944 <xTaskResumeAll+0x120>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d1cc      	bne.n	8006872 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d001      	beq.n	80068e2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80068de:	f000 fb1b 	bl	8006f18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80068e2:	4b1d      	ldr	r3, [pc, #116]	@ (8006958 <xTaskResumeAll+0x134>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d010      	beq.n	8006910 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80068ee:	f000 f837 	bl	8006960 <xTaskIncrementTick>
 80068f2:	4603      	mov	r3, r0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d002      	beq.n	80068fe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80068f8:	4b16      	ldr	r3, [pc, #88]	@ (8006954 <xTaskResumeAll+0x130>)
 80068fa:	2201      	movs	r2, #1
 80068fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	3b01      	subs	r3, #1
 8006902:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d1f1      	bne.n	80068ee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800690a:	4b13      	ldr	r3, [pc, #76]	@ (8006958 <xTaskResumeAll+0x134>)
 800690c:	2200      	movs	r2, #0
 800690e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006910:	4b10      	ldr	r3, [pc, #64]	@ (8006954 <xTaskResumeAll+0x130>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d009      	beq.n	800692c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006918:	2301      	movs	r3, #1
 800691a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800691c:	4b0f      	ldr	r3, [pc, #60]	@ (800695c <xTaskResumeAll+0x138>)
 800691e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006922:	601a      	str	r2, [r3, #0]
 8006924:	f3bf 8f4f 	dsb	sy
 8006928:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800692c:	f000 fe5e 	bl	80075ec <vPortExitCritical>

	return xAlreadyYielded;
 8006930:	68bb      	ldr	r3, [r7, #8]
}
 8006932:	4618      	mov	r0, r3
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	2000055c 	.word	0x2000055c
 8006940:	20000534 	.word	0x20000534
 8006944:	200004f4 	.word	0x200004f4
 8006948:	2000053c 	.word	0x2000053c
 800694c:	20000438 	.word	0x20000438
 8006950:	20000434 	.word	0x20000434
 8006954:	20000548 	.word	0x20000548
 8006958:	20000544 	.word	0x20000544
 800695c:	e000ed04 	.word	0xe000ed04

08006960 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b086      	sub	sp, #24
 8006964:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006966:	2300      	movs	r3, #0
 8006968:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800696a:	4b4f      	ldr	r3, [pc, #316]	@ (8006aa8 <xTaskIncrementTick+0x148>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	f040 808f 	bne.w	8006a92 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006974:	4b4d      	ldr	r3, [pc, #308]	@ (8006aac <xTaskIncrementTick+0x14c>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	3301      	adds	r3, #1
 800697a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800697c:	4a4b      	ldr	r2, [pc, #300]	@ (8006aac <xTaskIncrementTick+0x14c>)
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d121      	bne.n	80069cc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006988:	4b49      	ldr	r3, [pc, #292]	@ (8006ab0 <xTaskIncrementTick+0x150>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00b      	beq.n	80069aa <xTaskIncrementTick+0x4a>
	__asm volatile
 8006992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006996:	f383 8811 	msr	BASEPRI, r3
 800699a:	f3bf 8f6f 	isb	sy
 800699e:	f3bf 8f4f 	dsb	sy
 80069a2:	603b      	str	r3, [r7, #0]
}
 80069a4:	bf00      	nop
 80069a6:	bf00      	nop
 80069a8:	e7fd      	b.n	80069a6 <xTaskIncrementTick+0x46>
 80069aa:	4b41      	ldr	r3, [pc, #260]	@ (8006ab0 <xTaskIncrementTick+0x150>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	60fb      	str	r3, [r7, #12]
 80069b0:	4b40      	ldr	r3, [pc, #256]	@ (8006ab4 <xTaskIncrementTick+0x154>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a3e      	ldr	r2, [pc, #248]	@ (8006ab0 <xTaskIncrementTick+0x150>)
 80069b6:	6013      	str	r3, [r2, #0]
 80069b8:	4a3e      	ldr	r2, [pc, #248]	@ (8006ab4 <xTaskIncrementTick+0x154>)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6013      	str	r3, [r2, #0]
 80069be:	4b3e      	ldr	r3, [pc, #248]	@ (8006ab8 <xTaskIncrementTick+0x158>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	3301      	adds	r3, #1
 80069c4:	4a3c      	ldr	r2, [pc, #240]	@ (8006ab8 <xTaskIncrementTick+0x158>)
 80069c6:	6013      	str	r3, [r2, #0]
 80069c8:	f000 faa6 	bl	8006f18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80069cc:	4b3b      	ldr	r3, [pc, #236]	@ (8006abc <xTaskIncrementTick+0x15c>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	693a      	ldr	r2, [r7, #16]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d348      	bcc.n	8006a68 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069d6:	4b36      	ldr	r3, [pc, #216]	@ (8006ab0 <xTaskIncrementTick+0x150>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d104      	bne.n	80069ea <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069e0:	4b36      	ldr	r3, [pc, #216]	@ (8006abc <xTaskIncrementTick+0x15c>)
 80069e2:	f04f 32ff 	mov.w	r2, #4294967295
 80069e6:	601a      	str	r2, [r3, #0]
					break;
 80069e8:	e03e      	b.n	8006a68 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069ea:	4b31      	ldr	r3, [pc, #196]	@ (8006ab0 <xTaskIncrementTick+0x150>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80069fa:	693a      	ldr	r2, [r7, #16]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d203      	bcs.n	8006a0a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006a02:	4a2e      	ldr	r2, [pc, #184]	@ (8006abc <xTaskIncrementTick+0x15c>)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006a08:	e02e      	b.n	8006a68 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	3304      	adds	r3, #4
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7fe fec8 	bl	80057a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d004      	beq.n	8006a26 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	3318      	adds	r3, #24
 8006a20:	4618      	mov	r0, r3
 8006a22:	f7fe febf 	bl	80057a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	409a      	lsls	r2, r3
 8006a2e:	4b24      	ldr	r3, [pc, #144]	@ (8006ac0 <xTaskIncrementTick+0x160>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	4a22      	ldr	r2, [pc, #136]	@ (8006ac0 <xTaskIncrementTick+0x160>)
 8006a36:	6013      	str	r3, [r2, #0]
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a3c:	4613      	mov	r3, r2
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	4413      	add	r3, r2
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	4a1f      	ldr	r2, [pc, #124]	@ (8006ac4 <xTaskIncrementTick+0x164>)
 8006a46:	441a      	add	r2, r3
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	3304      	adds	r3, #4
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	4610      	mov	r0, r2
 8006a50:	f7fe fe4d 	bl	80056ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a58:	4b1b      	ldr	r3, [pc, #108]	@ (8006ac8 <xTaskIncrementTick+0x168>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d3b9      	bcc.n	80069d6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006a62:	2301      	movs	r3, #1
 8006a64:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a66:	e7b6      	b.n	80069d6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a68:	4b17      	ldr	r3, [pc, #92]	@ (8006ac8 <xTaskIncrementTick+0x168>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a6e:	4915      	ldr	r1, [pc, #84]	@ (8006ac4 <xTaskIncrementTick+0x164>)
 8006a70:	4613      	mov	r3, r2
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	4413      	add	r3, r2
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	440b      	add	r3, r1
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d901      	bls.n	8006a84 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006a80:	2301      	movs	r3, #1
 8006a82:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006a84:	4b11      	ldr	r3, [pc, #68]	@ (8006acc <xTaskIncrementTick+0x16c>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d007      	beq.n	8006a9c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	617b      	str	r3, [r7, #20]
 8006a90:	e004      	b.n	8006a9c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006a92:	4b0f      	ldr	r3, [pc, #60]	@ (8006ad0 <xTaskIncrementTick+0x170>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	3301      	adds	r3, #1
 8006a98:	4a0d      	ldr	r2, [pc, #52]	@ (8006ad0 <xTaskIncrementTick+0x170>)
 8006a9a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006a9c:	697b      	ldr	r3, [r7, #20]
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3718      	adds	r7, #24
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	2000055c 	.word	0x2000055c
 8006aac:	20000538 	.word	0x20000538
 8006ab0:	200004ec 	.word	0x200004ec
 8006ab4:	200004f0 	.word	0x200004f0
 8006ab8:	2000054c 	.word	0x2000054c
 8006abc:	20000554 	.word	0x20000554
 8006ac0:	2000053c 	.word	0x2000053c
 8006ac4:	20000438 	.word	0x20000438
 8006ac8:	20000434 	.word	0x20000434
 8006acc:	20000548 	.word	0x20000548
 8006ad0:	20000544 	.word	0x20000544

08006ad4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b087      	sub	sp, #28
 8006ad8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006ada:	4b27      	ldr	r3, [pc, #156]	@ (8006b78 <vTaskSwitchContext+0xa4>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d003      	beq.n	8006aea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006ae2:	4b26      	ldr	r3, [pc, #152]	@ (8006b7c <vTaskSwitchContext+0xa8>)
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006ae8:	e040      	b.n	8006b6c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006aea:	4b24      	ldr	r3, [pc, #144]	@ (8006b7c <vTaskSwitchContext+0xa8>)
 8006aec:	2200      	movs	r2, #0
 8006aee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006af0:	4b23      	ldr	r3, [pc, #140]	@ (8006b80 <vTaskSwitchContext+0xac>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	fab3 f383 	clz	r3, r3
 8006afc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006afe:	7afb      	ldrb	r3, [r7, #11]
 8006b00:	f1c3 031f 	rsb	r3, r3, #31
 8006b04:	617b      	str	r3, [r7, #20]
 8006b06:	491f      	ldr	r1, [pc, #124]	@ (8006b84 <vTaskSwitchContext+0xb0>)
 8006b08:	697a      	ldr	r2, [r7, #20]
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	4413      	add	r3, r2
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	440b      	add	r3, r1
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d10b      	bne.n	8006b32 <vTaskSwitchContext+0x5e>
	__asm volatile
 8006b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b1e:	f383 8811 	msr	BASEPRI, r3
 8006b22:	f3bf 8f6f 	isb	sy
 8006b26:	f3bf 8f4f 	dsb	sy
 8006b2a:	607b      	str	r3, [r7, #4]
}
 8006b2c:	bf00      	nop
 8006b2e:	bf00      	nop
 8006b30:	e7fd      	b.n	8006b2e <vTaskSwitchContext+0x5a>
 8006b32:	697a      	ldr	r2, [r7, #20]
 8006b34:	4613      	mov	r3, r2
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	4413      	add	r3, r2
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	4a11      	ldr	r2, [pc, #68]	@ (8006b84 <vTaskSwitchContext+0xb0>)
 8006b3e:	4413      	add	r3, r2
 8006b40:	613b      	str	r3, [r7, #16]
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	685a      	ldr	r2, [r3, #4]
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	605a      	str	r2, [r3, #4]
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	685a      	ldr	r2, [r3, #4]
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	3308      	adds	r3, #8
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d104      	bne.n	8006b62 <vTaskSwitchContext+0x8e>
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	685a      	ldr	r2, [r3, #4]
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	605a      	str	r2, [r3, #4]
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	68db      	ldr	r3, [r3, #12]
 8006b68:	4a07      	ldr	r2, [pc, #28]	@ (8006b88 <vTaskSwitchContext+0xb4>)
 8006b6a:	6013      	str	r3, [r2, #0]
}
 8006b6c:	bf00      	nop
 8006b6e:	371c      	adds	r7, #28
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bc80      	pop	{r7}
 8006b74:	4770      	bx	lr
 8006b76:	bf00      	nop
 8006b78:	2000055c 	.word	0x2000055c
 8006b7c:	20000548 	.word	0x20000548
 8006b80:	2000053c 	.word	0x2000053c
 8006b84:	20000438 	.word	0x20000438
 8006b88:	20000434 	.word	0x20000434

08006b8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10b      	bne.n	8006bb4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba0:	f383 8811 	msr	BASEPRI, r3
 8006ba4:	f3bf 8f6f 	isb	sy
 8006ba8:	f3bf 8f4f 	dsb	sy
 8006bac:	60fb      	str	r3, [r7, #12]
}
 8006bae:	bf00      	nop
 8006bb0:	bf00      	nop
 8006bb2:	e7fd      	b.n	8006bb0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006bb4:	4b07      	ldr	r3, [pc, #28]	@ (8006bd4 <vTaskPlaceOnEventList+0x48>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	3318      	adds	r3, #24
 8006bba:	4619      	mov	r1, r3
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f7fe fdb9 	bl	8005734 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006bc2:	2101      	movs	r1, #1
 8006bc4:	6838      	ldr	r0, [r7, #0]
 8006bc6:	f000 fb87 	bl	80072d8 <prvAddCurrentTaskToDelayedList>
}
 8006bca:	bf00      	nop
 8006bcc:	3710      	adds	r7, #16
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	20000434 	.word	0x20000434

08006bd8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b086      	sub	sp, #24
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d10b      	bne.n	8006c06 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bf2:	f383 8811 	msr	BASEPRI, r3
 8006bf6:	f3bf 8f6f 	isb	sy
 8006bfa:	f3bf 8f4f 	dsb	sy
 8006bfe:	60fb      	str	r3, [r7, #12]
}
 8006c00:	bf00      	nop
 8006c02:	bf00      	nop
 8006c04:	e7fd      	b.n	8006c02 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	3318      	adds	r3, #24
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f7fe fdca 	bl	80057a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c10:	4b1d      	ldr	r3, [pc, #116]	@ (8006c88 <xTaskRemoveFromEventList+0xb0>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d11c      	bne.n	8006c52 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	3304      	adds	r3, #4
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f7fe fdc1 	bl	80057a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c26:	2201      	movs	r2, #1
 8006c28:	409a      	lsls	r2, r3
 8006c2a:	4b18      	ldr	r3, [pc, #96]	@ (8006c8c <xTaskRemoveFromEventList+0xb4>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	4a16      	ldr	r2, [pc, #88]	@ (8006c8c <xTaskRemoveFromEventList+0xb4>)
 8006c32:	6013      	str	r3, [r2, #0]
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c38:	4613      	mov	r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4413      	add	r3, r2
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	4a13      	ldr	r2, [pc, #76]	@ (8006c90 <xTaskRemoveFromEventList+0xb8>)
 8006c42:	441a      	add	r2, r3
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	3304      	adds	r3, #4
 8006c48:	4619      	mov	r1, r3
 8006c4a:	4610      	mov	r0, r2
 8006c4c:	f7fe fd4f 	bl	80056ee <vListInsertEnd>
 8006c50:	e005      	b.n	8006c5e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	3318      	adds	r3, #24
 8006c56:	4619      	mov	r1, r3
 8006c58:	480e      	ldr	r0, [pc, #56]	@ (8006c94 <xTaskRemoveFromEventList+0xbc>)
 8006c5a:	f7fe fd48 	bl	80056ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c62:	4b0d      	ldr	r3, [pc, #52]	@ (8006c98 <xTaskRemoveFromEventList+0xc0>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d905      	bls.n	8006c78 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006c70:	4b0a      	ldr	r3, [pc, #40]	@ (8006c9c <xTaskRemoveFromEventList+0xc4>)
 8006c72:	2201      	movs	r2, #1
 8006c74:	601a      	str	r2, [r3, #0]
 8006c76:	e001      	b.n	8006c7c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006c7c:	697b      	ldr	r3, [r7, #20]
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3718      	adds	r7, #24
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	2000055c 	.word	0x2000055c
 8006c8c:	2000053c 	.word	0x2000053c
 8006c90:	20000438 	.word	0x20000438
 8006c94:	200004f4 	.word	0x200004f4
 8006c98:	20000434 	.word	0x20000434
 8006c9c:	20000548 	.word	0x20000548

08006ca0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006ca8:	4b06      	ldr	r3, [pc, #24]	@ (8006cc4 <vTaskInternalSetTimeOutState+0x24>)
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006cb0:	4b05      	ldr	r3, [pc, #20]	@ (8006cc8 <vTaskInternalSetTimeOutState+0x28>)
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	605a      	str	r2, [r3, #4]
}
 8006cb8:	bf00      	nop
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bc80      	pop	{r7}
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop
 8006cc4:	2000054c 	.word	0x2000054c
 8006cc8:	20000538 	.word	0x20000538

08006ccc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b088      	sub	sp, #32
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d10b      	bne.n	8006cf4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ce0:	f383 8811 	msr	BASEPRI, r3
 8006ce4:	f3bf 8f6f 	isb	sy
 8006ce8:	f3bf 8f4f 	dsb	sy
 8006cec:	613b      	str	r3, [r7, #16]
}
 8006cee:	bf00      	nop
 8006cf0:	bf00      	nop
 8006cf2:	e7fd      	b.n	8006cf0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d10b      	bne.n	8006d12 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cfe:	f383 8811 	msr	BASEPRI, r3
 8006d02:	f3bf 8f6f 	isb	sy
 8006d06:	f3bf 8f4f 	dsb	sy
 8006d0a:	60fb      	str	r3, [r7, #12]
}
 8006d0c:	bf00      	nop
 8006d0e:	bf00      	nop
 8006d10:	e7fd      	b.n	8006d0e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006d12:	f000 fc3b 	bl	800758c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006d16:	4b1d      	ldr	r3, [pc, #116]	@ (8006d8c <xTaskCheckForTimeOut+0xc0>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	69ba      	ldr	r2, [r7, #24]
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d2e:	d102      	bne.n	8006d36 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006d30:	2300      	movs	r3, #0
 8006d32:	61fb      	str	r3, [r7, #28]
 8006d34:	e023      	b.n	8006d7e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	4b15      	ldr	r3, [pc, #84]	@ (8006d90 <xTaskCheckForTimeOut+0xc4>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d007      	beq.n	8006d52 <xTaskCheckForTimeOut+0x86>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	69ba      	ldr	r2, [r7, #24]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d302      	bcc.n	8006d52 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	61fb      	str	r3, [r7, #28]
 8006d50:	e015      	b.n	8006d7e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	697a      	ldr	r2, [r7, #20]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d20b      	bcs.n	8006d74 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	1ad2      	subs	r2, r2, r3
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f7ff ff99 	bl	8006ca0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	61fb      	str	r3, [r7, #28]
 8006d72:	e004      	b.n	8006d7e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	2200      	movs	r2, #0
 8006d78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006d7e:	f000 fc35 	bl	80075ec <vPortExitCritical>

	return xReturn;
 8006d82:	69fb      	ldr	r3, [r7, #28]
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3720      	adds	r7, #32
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	20000538 	.word	0x20000538
 8006d90:	2000054c 	.word	0x2000054c

08006d94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006d94:	b480      	push	{r7}
 8006d96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006d98:	4b03      	ldr	r3, [pc, #12]	@ (8006da8 <vTaskMissedYield+0x14>)
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	601a      	str	r2, [r3, #0]
}
 8006d9e:	bf00      	nop
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bc80      	pop	{r7}
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop
 8006da8:	20000548 	.word	0x20000548

08006dac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006db4:	f000 f852 	bl	8006e5c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006db8:	4b06      	ldr	r3, [pc, #24]	@ (8006dd4 <prvIdleTask+0x28>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d9f9      	bls.n	8006db4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006dc0:	4b05      	ldr	r3, [pc, #20]	@ (8006dd8 <prvIdleTask+0x2c>)
 8006dc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006dc6:	601a      	str	r2, [r3, #0]
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006dd0:	e7f0      	b.n	8006db4 <prvIdleTask+0x8>
 8006dd2:	bf00      	nop
 8006dd4:	20000438 	.word	0x20000438
 8006dd8:	e000ed04 	.word	0xe000ed04

08006ddc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006de2:	2300      	movs	r3, #0
 8006de4:	607b      	str	r3, [r7, #4]
 8006de6:	e00c      	b.n	8006e02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	4613      	mov	r3, r2
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	4413      	add	r3, r2
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	4a12      	ldr	r2, [pc, #72]	@ (8006e3c <prvInitialiseTaskLists+0x60>)
 8006df4:	4413      	add	r3, r2
 8006df6:	4618      	mov	r0, r3
 8006df8:	f7fe fc4e 	bl	8005698 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	3301      	adds	r3, #1
 8006e00:	607b      	str	r3, [r7, #4]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2b06      	cmp	r3, #6
 8006e06:	d9ef      	bls.n	8006de8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006e08:	480d      	ldr	r0, [pc, #52]	@ (8006e40 <prvInitialiseTaskLists+0x64>)
 8006e0a:	f7fe fc45 	bl	8005698 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006e0e:	480d      	ldr	r0, [pc, #52]	@ (8006e44 <prvInitialiseTaskLists+0x68>)
 8006e10:	f7fe fc42 	bl	8005698 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006e14:	480c      	ldr	r0, [pc, #48]	@ (8006e48 <prvInitialiseTaskLists+0x6c>)
 8006e16:	f7fe fc3f 	bl	8005698 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006e1a:	480c      	ldr	r0, [pc, #48]	@ (8006e4c <prvInitialiseTaskLists+0x70>)
 8006e1c:	f7fe fc3c 	bl	8005698 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006e20:	480b      	ldr	r0, [pc, #44]	@ (8006e50 <prvInitialiseTaskLists+0x74>)
 8006e22:	f7fe fc39 	bl	8005698 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006e26:	4b0b      	ldr	r3, [pc, #44]	@ (8006e54 <prvInitialiseTaskLists+0x78>)
 8006e28:	4a05      	ldr	r2, [pc, #20]	@ (8006e40 <prvInitialiseTaskLists+0x64>)
 8006e2a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8006e58 <prvInitialiseTaskLists+0x7c>)
 8006e2e:	4a05      	ldr	r2, [pc, #20]	@ (8006e44 <prvInitialiseTaskLists+0x68>)
 8006e30:	601a      	str	r2, [r3, #0]
}
 8006e32:	bf00      	nop
 8006e34:	3708      	adds	r7, #8
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	20000438 	.word	0x20000438
 8006e40:	200004c4 	.word	0x200004c4
 8006e44:	200004d8 	.word	0x200004d8
 8006e48:	200004f4 	.word	0x200004f4
 8006e4c:	20000508 	.word	0x20000508
 8006e50:	20000520 	.word	0x20000520
 8006e54:	200004ec 	.word	0x200004ec
 8006e58:	200004f0 	.word	0x200004f0

08006e5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e62:	e019      	b.n	8006e98 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006e64:	f000 fb92 	bl	800758c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e68:	4b10      	ldr	r3, [pc, #64]	@ (8006eac <prvCheckTasksWaitingTermination+0x50>)
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	3304      	adds	r3, #4
 8006e74:	4618      	mov	r0, r3
 8006e76:	f7fe fc95 	bl	80057a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8006eb0 <prvCheckTasksWaitingTermination+0x54>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	3b01      	subs	r3, #1
 8006e80:	4a0b      	ldr	r2, [pc, #44]	@ (8006eb0 <prvCheckTasksWaitingTermination+0x54>)
 8006e82:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006e84:	4b0b      	ldr	r3, [pc, #44]	@ (8006eb4 <prvCheckTasksWaitingTermination+0x58>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	3b01      	subs	r3, #1
 8006e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8006eb4 <prvCheckTasksWaitingTermination+0x58>)
 8006e8c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006e8e:	f000 fbad 	bl	80075ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 f810 	bl	8006eb8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e98:	4b06      	ldr	r3, [pc, #24]	@ (8006eb4 <prvCheckTasksWaitingTermination+0x58>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d1e1      	bne.n	8006e64 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ea0:	bf00      	nop
 8006ea2:	bf00      	nop
 8006ea4:	3708      	adds	r7, #8
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	20000508 	.word	0x20000508
 8006eb0:	20000534 	.word	0x20000534
 8006eb4:	2000051c 	.word	0x2000051c

08006eb8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d108      	bne.n	8006edc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f000 fd2c 	bl	800792c <vPortFree>
				vPortFree( pxTCB );
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 fd29 	bl	800792c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006eda:	e019      	b.n	8006f10 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d103      	bne.n	8006eee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 fd20 	bl	800792c <vPortFree>
	}
 8006eec:	e010      	b.n	8006f10 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006ef4:	2b02      	cmp	r3, #2
 8006ef6:	d00b      	beq.n	8006f10 <prvDeleteTCB+0x58>
	__asm volatile
 8006ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006efc:	f383 8811 	msr	BASEPRI, r3
 8006f00:	f3bf 8f6f 	isb	sy
 8006f04:	f3bf 8f4f 	dsb	sy
 8006f08:	60fb      	str	r3, [r7, #12]
}
 8006f0a:	bf00      	nop
 8006f0c:	bf00      	nop
 8006f0e:	e7fd      	b.n	8006f0c <prvDeleteTCB+0x54>
	}
 8006f10:	bf00      	nop
 8006f12:	3710      	adds	r7, #16
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8006f50 <prvResetNextTaskUnblockTime+0x38>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d104      	bne.n	8006f32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006f28:	4b0a      	ldr	r3, [pc, #40]	@ (8006f54 <prvResetNextTaskUnblockTime+0x3c>)
 8006f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006f30:	e008      	b.n	8006f44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f32:	4b07      	ldr	r3, [pc, #28]	@ (8006f50 <prvResetNextTaskUnblockTime+0x38>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	4a04      	ldr	r2, [pc, #16]	@ (8006f54 <prvResetNextTaskUnblockTime+0x3c>)
 8006f42:	6013      	str	r3, [r2, #0]
}
 8006f44:	bf00      	nop
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bc80      	pop	{r7}
 8006f4c:	4770      	bx	lr
 8006f4e:	bf00      	nop
 8006f50:	200004ec 	.word	0x200004ec
 8006f54:	20000554 	.word	0x20000554

08006f58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8006f8c <xTaskGetSchedulerState+0x34>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d102      	bne.n	8006f6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006f66:	2301      	movs	r3, #1
 8006f68:	607b      	str	r3, [r7, #4]
 8006f6a:	e008      	b.n	8006f7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f6c:	4b08      	ldr	r3, [pc, #32]	@ (8006f90 <xTaskGetSchedulerState+0x38>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d102      	bne.n	8006f7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006f74:	2302      	movs	r3, #2
 8006f76:	607b      	str	r3, [r7, #4]
 8006f78:	e001      	b.n	8006f7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006f7e:	687b      	ldr	r3, [r7, #4]
	}
 8006f80:	4618      	mov	r0, r3
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bc80      	pop	{r7}
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	20000540 	.word	0x20000540
 8006f90:	2000055c 	.word	0x2000055c

08006f94 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d05e      	beq.n	8007068 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fae:	4b31      	ldr	r3, [pc, #196]	@ (8007074 <xTaskPriorityInherit+0xe0>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d24e      	bcs.n	8007056 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	699b      	ldr	r3, [r3, #24]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	db06      	blt.n	8006fce <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fc0:	4b2c      	ldr	r3, [pc, #176]	@ (8007074 <xTaskPriorityInherit+0xe0>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fc6:	f1c3 0207 	rsb	r2, r3, #7
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	6959      	ldr	r1, [r3, #20]
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	4413      	add	r3, r2
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	4a26      	ldr	r2, [pc, #152]	@ (8007078 <xTaskPriorityInherit+0xe4>)
 8006fe0:	4413      	add	r3, r2
 8006fe2:	4299      	cmp	r1, r3
 8006fe4:	d12f      	bne.n	8007046 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	3304      	adds	r3, #4
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7fe fbda 	bl	80057a4 <uxListRemove>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d10a      	bne.n	800700c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8007000:	43da      	mvns	r2, r3
 8007002:	4b1e      	ldr	r3, [pc, #120]	@ (800707c <xTaskPriorityInherit+0xe8>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4013      	ands	r3, r2
 8007008:	4a1c      	ldr	r2, [pc, #112]	@ (800707c <xTaskPriorityInherit+0xe8>)
 800700a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800700c:	4b19      	ldr	r3, [pc, #100]	@ (8007074 <xTaskPriorityInherit+0xe0>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800701a:	2201      	movs	r2, #1
 800701c:	409a      	lsls	r2, r3
 800701e:	4b17      	ldr	r3, [pc, #92]	@ (800707c <xTaskPriorityInherit+0xe8>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4313      	orrs	r3, r2
 8007024:	4a15      	ldr	r2, [pc, #84]	@ (800707c <xTaskPriorityInherit+0xe8>)
 8007026:	6013      	str	r3, [r2, #0]
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800702c:	4613      	mov	r3, r2
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	4413      	add	r3, r2
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	4a10      	ldr	r2, [pc, #64]	@ (8007078 <xTaskPriorityInherit+0xe4>)
 8007036:	441a      	add	r2, r3
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	3304      	adds	r3, #4
 800703c:	4619      	mov	r1, r3
 800703e:	4610      	mov	r0, r2
 8007040:	f7fe fb55 	bl	80056ee <vListInsertEnd>
 8007044:	e004      	b.n	8007050 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007046:	4b0b      	ldr	r3, [pc, #44]	@ (8007074 <xTaskPriorityInherit+0xe0>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007050:	2301      	movs	r3, #1
 8007052:	60fb      	str	r3, [r7, #12]
 8007054:	e008      	b.n	8007068 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800705a:	4b06      	ldr	r3, [pc, #24]	@ (8007074 <xTaskPriorityInherit+0xe0>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007060:	429a      	cmp	r2, r3
 8007062:	d201      	bcs.n	8007068 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007064:	2301      	movs	r3, #1
 8007066:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007068:	68fb      	ldr	r3, [r7, #12]
	}
 800706a:	4618      	mov	r0, r3
 800706c:	3710      	adds	r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	20000434 	.word	0x20000434
 8007078:	20000438 	.word	0x20000438
 800707c:	2000053c 	.word	0x2000053c

08007080 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007080:	b580      	push	{r7, lr}
 8007082:	b086      	sub	sp, #24
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800708c:	2300      	movs	r3, #0
 800708e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d070      	beq.n	8007178 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007096:	4b3b      	ldr	r3, [pc, #236]	@ (8007184 <xTaskPriorityDisinherit+0x104>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	693a      	ldr	r2, [r7, #16]
 800709c:	429a      	cmp	r2, r3
 800709e:	d00b      	beq.n	80070b8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80070a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070a4:	f383 8811 	msr	BASEPRI, r3
 80070a8:	f3bf 8f6f 	isb	sy
 80070ac:	f3bf 8f4f 	dsb	sy
 80070b0:	60fb      	str	r3, [r7, #12]
}
 80070b2:	bf00      	nop
 80070b4:	bf00      	nop
 80070b6:	e7fd      	b.n	80070b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d10b      	bne.n	80070d8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80070c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070c4:	f383 8811 	msr	BASEPRI, r3
 80070c8:	f3bf 8f6f 	isb	sy
 80070cc:	f3bf 8f4f 	dsb	sy
 80070d0:	60bb      	str	r3, [r7, #8]
}
 80070d2:	bf00      	nop
 80070d4:	bf00      	nop
 80070d6:	e7fd      	b.n	80070d4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070dc:	1e5a      	subs	r2, r3, #1
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d044      	beq.n	8007178 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d140      	bne.n	8007178 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	3304      	adds	r3, #4
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7fe fb52 	bl	80057a4 <uxListRemove>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d115      	bne.n	8007132 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800710a:	491f      	ldr	r1, [pc, #124]	@ (8007188 <xTaskPriorityDisinherit+0x108>)
 800710c:	4613      	mov	r3, r2
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	4413      	add	r3, r2
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	440b      	add	r3, r1
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d10a      	bne.n	8007132 <xTaskPriorityDisinherit+0xb2>
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007120:	2201      	movs	r2, #1
 8007122:	fa02 f303 	lsl.w	r3, r2, r3
 8007126:	43da      	mvns	r2, r3
 8007128:	4b18      	ldr	r3, [pc, #96]	@ (800718c <xTaskPriorityDisinherit+0x10c>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4013      	ands	r3, r2
 800712e:	4a17      	ldr	r2, [pc, #92]	@ (800718c <xTaskPriorityDisinherit+0x10c>)
 8007130:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800713e:	f1c3 0207 	rsb	r2, r3, #7
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800714a:	2201      	movs	r2, #1
 800714c:	409a      	lsls	r2, r3
 800714e:	4b0f      	ldr	r3, [pc, #60]	@ (800718c <xTaskPriorityDisinherit+0x10c>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4313      	orrs	r3, r2
 8007154:	4a0d      	ldr	r2, [pc, #52]	@ (800718c <xTaskPriorityDisinherit+0x10c>)
 8007156:	6013      	str	r3, [r2, #0]
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800715c:	4613      	mov	r3, r2
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	4413      	add	r3, r2
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	4a08      	ldr	r2, [pc, #32]	@ (8007188 <xTaskPriorityDisinherit+0x108>)
 8007166:	441a      	add	r2, r3
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	3304      	adds	r3, #4
 800716c:	4619      	mov	r1, r3
 800716e:	4610      	mov	r0, r2
 8007170:	f7fe fabd 	bl	80056ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007174:	2301      	movs	r3, #1
 8007176:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007178:	697b      	ldr	r3, [r7, #20]
	}
 800717a:	4618      	mov	r0, r3
 800717c:	3718      	adds	r7, #24
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	20000434 	.word	0x20000434
 8007188:	20000438 	.word	0x20000438
 800718c:	2000053c 	.word	0x2000053c

08007190 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007190:	b580      	push	{r7, lr}
 8007192:	b088      	sub	sp, #32
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800719e:	2301      	movs	r3, #1
 80071a0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d079      	beq.n	800729c <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d10b      	bne.n	80071c8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80071b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071b4:	f383 8811 	msr	BASEPRI, r3
 80071b8:	f3bf 8f6f 	isb	sy
 80071bc:	f3bf 8f4f 	dsb	sy
 80071c0:	60fb      	str	r3, [r7, #12]
}
 80071c2:	bf00      	nop
 80071c4:	bf00      	nop
 80071c6:	e7fd      	b.n	80071c4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071cc:	683a      	ldr	r2, [r7, #0]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d902      	bls.n	80071d8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	61fb      	str	r3, [r7, #28]
 80071d6:	e002      	b.n	80071de <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071dc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e2:	69fa      	ldr	r2, [r7, #28]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d059      	beq.n	800729c <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071ec:	697a      	ldr	r2, [r7, #20]
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d154      	bne.n	800729c <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80071f2:	4b2c      	ldr	r3, [pc, #176]	@ (80072a4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	69ba      	ldr	r2, [r7, #24]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d10b      	bne.n	8007214 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80071fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007200:	f383 8811 	msr	BASEPRI, r3
 8007204:	f3bf 8f6f 	isb	sy
 8007208:	f3bf 8f4f 	dsb	sy
 800720c:	60bb      	str	r3, [r7, #8]
}
 800720e:	bf00      	nop
 8007210:	bf00      	nop
 8007212:	e7fd      	b.n	8007210 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007218:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	69fa      	ldr	r2, [r7, #28]
 800721e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	699b      	ldr	r3, [r3, #24]
 8007224:	2b00      	cmp	r3, #0
 8007226:	db04      	blt.n	8007232 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	f1c3 0207 	rsb	r2, r3, #7
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	6959      	ldr	r1, [r3, #20]
 8007236:	693a      	ldr	r2, [r7, #16]
 8007238:	4613      	mov	r3, r2
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	4413      	add	r3, r2
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	4a19      	ldr	r2, [pc, #100]	@ (80072a8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007242:	4413      	add	r3, r2
 8007244:	4299      	cmp	r1, r3
 8007246:	d129      	bne.n	800729c <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	3304      	adds	r3, #4
 800724c:	4618      	mov	r0, r3
 800724e:	f7fe faa9 	bl	80057a4 <uxListRemove>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d10a      	bne.n	800726e <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007258:	69bb      	ldr	r3, [r7, #24]
 800725a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800725c:	2201      	movs	r2, #1
 800725e:	fa02 f303 	lsl.w	r3, r2, r3
 8007262:	43da      	mvns	r2, r3
 8007264:	4b11      	ldr	r3, [pc, #68]	@ (80072ac <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4013      	ands	r3, r2
 800726a:	4a10      	ldr	r2, [pc, #64]	@ (80072ac <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800726c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007272:	2201      	movs	r2, #1
 8007274:	409a      	lsls	r2, r3
 8007276:	4b0d      	ldr	r3, [pc, #52]	@ (80072ac <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4313      	orrs	r3, r2
 800727c:	4a0b      	ldr	r2, [pc, #44]	@ (80072ac <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800727e:	6013      	str	r3, [r2, #0]
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007284:	4613      	mov	r3, r2
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	4413      	add	r3, r2
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	4a06      	ldr	r2, [pc, #24]	@ (80072a8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800728e:	441a      	add	r2, r3
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	3304      	adds	r3, #4
 8007294:	4619      	mov	r1, r3
 8007296:	4610      	mov	r0, r2
 8007298:	f7fe fa29 	bl	80056ee <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800729c:	bf00      	nop
 800729e:	3720      	adds	r7, #32
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	20000434 	.word	0x20000434
 80072a8:	20000438 	.word	0x20000438
 80072ac:	2000053c 	.word	0x2000053c

080072b0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80072b0:	b480      	push	{r7}
 80072b2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80072b4:	4b07      	ldr	r3, [pc, #28]	@ (80072d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d004      	beq.n	80072c6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80072bc:	4b05      	ldr	r3, [pc, #20]	@ (80072d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80072c2:	3201      	adds	r2, #1
 80072c4:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80072c6:	4b03      	ldr	r3, [pc, #12]	@ (80072d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80072c8:	681b      	ldr	r3, [r3, #0]
	}
 80072ca:	4618      	mov	r0, r3
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bc80      	pop	{r7}
 80072d0:	4770      	bx	lr
 80072d2:	bf00      	nop
 80072d4:	20000434 	.word	0x20000434

080072d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80072e2:	4b29      	ldr	r3, [pc, #164]	@ (8007388 <prvAddCurrentTaskToDelayedList+0xb0>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072e8:	4b28      	ldr	r3, [pc, #160]	@ (800738c <prvAddCurrentTaskToDelayedList+0xb4>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	3304      	adds	r3, #4
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7fe fa58 	bl	80057a4 <uxListRemove>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d10b      	bne.n	8007312 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80072fa:	4b24      	ldr	r3, [pc, #144]	@ (800738c <prvAddCurrentTaskToDelayedList+0xb4>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007300:	2201      	movs	r2, #1
 8007302:	fa02 f303 	lsl.w	r3, r2, r3
 8007306:	43da      	mvns	r2, r3
 8007308:	4b21      	ldr	r3, [pc, #132]	@ (8007390 <prvAddCurrentTaskToDelayedList+0xb8>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4013      	ands	r3, r2
 800730e:	4a20      	ldr	r2, [pc, #128]	@ (8007390 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007310:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007318:	d10a      	bne.n	8007330 <prvAddCurrentTaskToDelayedList+0x58>
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d007      	beq.n	8007330 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007320:	4b1a      	ldr	r3, [pc, #104]	@ (800738c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	3304      	adds	r3, #4
 8007326:	4619      	mov	r1, r3
 8007328:	481a      	ldr	r0, [pc, #104]	@ (8007394 <prvAddCurrentTaskToDelayedList+0xbc>)
 800732a:	f7fe f9e0 	bl	80056ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800732e:	e026      	b.n	800737e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4413      	add	r3, r2
 8007336:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007338:	4b14      	ldr	r3, [pc, #80]	@ (800738c <prvAddCurrentTaskToDelayedList+0xb4>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007340:	68ba      	ldr	r2, [r7, #8]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	429a      	cmp	r2, r3
 8007346:	d209      	bcs.n	800735c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007348:	4b13      	ldr	r3, [pc, #76]	@ (8007398 <prvAddCurrentTaskToDelayedList+0xc0>)
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	4b0f      	ldr	r3, [pc, #60]	@ (800738c <prvAddCurrentTaskToDelayedList+0xb4>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	3304      	adds	r3, #4
 8007352:	4619      	mov	r1, r3
 8007354:	4610      	mov	r0, r2
 8007356:	f7fe f9ed 	bl	8005734 <vListInsert>
}
 800735a:	e010      	b.n	800737e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800735c:	4b0f      	ldr	r3, [pc, #60]	@ (800739c <prvAddCurrentTaskToDelayedList+0xc4>)
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	4b0a      	ldr	r3, [pc, #40]	@ (800738c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	3304      	adds	r3, #4
 8007366:	4619      	mov	r1, r3
 8007368:	4610      	mov	r0, r2
 800736a:	f7fe f9e3 	bl	8005734 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800736e:	4b0c      	ldr	r3, [pc, #48]	@ (80073a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	68ba      	ldr	r2, [r7, #8]
 8007374:	429a      	cmp	r2, r3
 8007376:	d202      	bcs.n	800737e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007378:	4a09      	ldr	r2, [pc, #36]	@ (80073a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	6013      	str	r3, [r2, #0]
}
 800737e:	bf00      	nop
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	20000538 	.word	0x20000538
 800738c:	20000434 	.word	0x20000434
 8007390:	2000053c 	.word	0x2000053c
 8007394:	20000520 	.word	0x20000520
 8007398:	200004f0 	.word	0x200004f0
 800739c:	200004ec 	.word	0x200004ec
 80073a0:	20000554 	.word	0x20000554

080073a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80073a4:	b480      	push	{r7}
 80073a6:	b085      	sub	sp, #20
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	3b04      	subs	r3, #4
 80073b4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80073bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	3b04      	subs	r3, #4
 80073c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	f023 0201 	bic.w	r2, r3, #1
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	3b04      	subs	r3, #4
 80073d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80073d4:	4a08      	ldr	r2, [pc, #32]	@ (80073f8 <pxPortInitialiseStack+0x54>)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	3b14      	subs	r3, #20
 80073de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	3b20      	subs	r3, #32
 80073ea:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80073ec:	68fb      	ldr	r3, [r7, #12]
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3714      	adds	r7, #20
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bc80      	pop	{r7}
 80073f6:	4770      	bx	lr
 80073f8:	080073fd 	.word	0x080073fd

080073fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007402:	2300      	movs	r3, #0
 8007404:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007406:	4b12      	ldr	r3, [pc, #72]	@ (8007450 <prvTaskExitError+0x54>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800740e:	d00b      	beq.n	8007428 <prvTaskExitError+0x2c>
	__asm volatile
 8007410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007414:	f383 8811 	msr	BASEPRI, r3
 8007418:	f3bf 8f6f 	isb	sy
 800741c:	f3bf 8f4f 	dsb	sy
 8007420:	60fb      	str	r3, [r7, #12]
}
 8007422:	bf00      	nop
 8007424:	bf00      	nop
 8007426:	e7fd      	b.n	8007424 <prvTaskExitError+0x28>
	__asm volatile
 8007428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800742c:	f383 8811 	msr	BASEPRI, r3
 8007430:	f3bf 8f6f 	isb	sy
 8007434:	f3bf 8f4f 	dsb	sy
 8007438:	60bb      	str	r3, [r7, #8]
}
 800743a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800743c:	bf00      	nop
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d0fc      	beq.n	800743e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007444:	bf00      	nop
 8007446:	bf00      	nop
 8007448:	3714      	adds	r7, #20
 800744a:	46bd      	mov	sp, r7
 800744c:	bc80      	pop	{r7}
 800744e:	4770      	bx	lr
 8007450:	20000014 	.word	0x20000014
	...

08007460 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007460:	4b07      	ldr	r3, [pc, #28]	@ (8007480 <pxCurrentTCBConst2>)
 8007462:	6819      	ldr	r1, [r3, #0]
 8007464:	6808      	ldr	r0, [r1, #0]
 8007466:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800746a:	f380 8809 	msr	PSP, r0
 800746e:	f3bf 8f6f 	isb	sy
 8007472:	f04f 0000 	mov.w	r0, #0
 8007476:	f380 8811 	msr	BASEPRI, r0
 800747a:	f04e 0e0d 	orr.w	lr, lr, #13
 800747e:	4770      	bx	lr

08007480 <pxCurrentTCBConst2>:
 8007480:	20000434 	.word	0x20000434
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007484:	bf00      	nop
 8007486:	bf00      	nop

08007488 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007488:	4806      	ldr	r0, [pc, #24]	@ (80074a4 <prvPortStartFirstTask+0x1c>)
 800748a:	6800      	ldr	r0, [r0, #0]
 800748c:	6800      	ldr	r0, [r0, #0]
 800748e:	f380 8808 	msr	MSP, r0
 8007492:	b662      	cpsie	i
 8007494:	b661      	cpsie	f
 8007496:	f3bf 8f4f 	dsb	sy
 800749a:	f3bf 8f6f 	isb	sy
 800749e:	df00      	svc	0
 80074a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80074a2:	bf00      	nop
 80074a4:	e000ed08 	.word	0xe000ed08

080074a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80074ae:	4b32      	ldr	r3, [pc, #200]	@ (8007578 <xPortStartScheduler+0xd0>)
 80074b0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	22ff      	movs	r2, #255	@ 0xff
 80074be:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80074c8:	78fb      	ldrb	r3, [r7, #3]
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80074d0:	b2da      	uxtb	r2, r3
 80074d2:	4b2a      	ldr	r3, [pc, #168]	@ (800757c <xPortStartScheduler+0xd4>)
 80074d4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80074d6:	4b2a      	ldr	r3, [pc, #168]	@ (8007580 <xPortStartScheduler+0xd8>)
 80074d8:	2207      	movs	r2, #7
 80074da:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074dc:	e009      	b.n	80074f2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80074de:	4b28      	ldr	r3, [pc, #160]	@ (8007580 <xPortStartScheduler+0xd8>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	3b01      	subs	r3, #1
 80074e4:	4a26      	ldr	r2, [pc, #152]	@ (8007580 <xPortStartScheduler+0xd8>)
 80074e6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80074e8:	78fb      	ldrb	r3, [r7, #3]
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	005b      	lsls	r3, r3, #1
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074f2:	78fb      	ldrb	r3, [r7, #3]
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074fa:	2b80      	cmp	r3, #128	@ 0x80
 80074fc:	d0ef      	beq.n	80074de <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80074fe:	4b20      	ldr	r3, [pc, #128]	@ (8007580 <xPortStartScheduler+0xd8>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f1c3 0307 	rsb	r3, r3, #7
 8007506:	2b04      	cmp	r3, #4
 8007508:	d00b      	beq.n	8007522 <xPortStartScheduler+0x7a>
	__asm volatile
 800750a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800750e:	f383 8811 	msr	BASEPRI, r3
 8007512:	f3bf 8f6f 	isb	sy
 8007516:	f3bf 8f4f 	dsb	sy
 800751a:	60bb      	str	r3, [r7, #8]
}
 800751c:	bf00      	nop
 800751e:	bf00      	nop
 8007520:	e7fd      	b.n	800751e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007522:	4b17      	ldr	r3, [pc, #92]	@ (8007580 <xPortStartScheduler+0xd8>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	021b      	lsls	r3, r3, #8
 8007528:	4a15      	ldr	r2, [pc, #84]	@ (8007580 <xPortStartScheduler+0xd8>)
 800752a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800752c:	4b14      	ldr	r3, [pc, #80]	@ (8007580 <xPortStartScheduler+0xd8>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007534:	4a12      	ldr	r2, [pc, #72]	@ (8007580 <xPortStartScheduler+0xd8>)
 8007536:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	b2da      	uxtb	r2, r3
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007540:	4b10      	ldr	r3, [pc, #64]	@ (8007584 <xPortStartScheduler+0xdc>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a0f      	ldr	r2, [pc, #60]	@ (8007584 <xPortStartScheduler+0xdc>)
 8007546:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800754a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800754c:	4b0d      	ldr	r3, [pc, #52]	@ (8007584 <xPortStartScheduler+0xdc>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a0c      	ldr	r2, [pc, #48]	@ (8007584 <xPortStartScheduler+0xdc>)
 8007552:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007556:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007558:	f000 f8b8 	bl	80076cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800755c:	4b0a      	ldr	r3, [pc, #40]	@ (8007588 <xPortStartScheduler+0xe0>)
 800755e:	2200      	movs	r2, #0
 8007560:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007562:	f7ff ff91 	bl	8007488 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007566:	f7ff fab5 	bl	8006ad4 <vTaskSwitchContext>
	prvTaskExitError();
 800756a:	f7ff ff47 	bl	80073fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3710      	adds	r7, #16
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}
 8007578:	e000e400 	.word	0xe000e400
 800757c:	20000560 	.word	0x20000560
 8007580:	20000564 	.word	0x20000564
 8007584:	e000ed20 	.word	0xe000ed20
 8007588:	20000014 	.word	0x20000014

0800758c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
	__asm volatile
 8007592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007596:	f383 8811 	msr	BASEPRI, r3
 800759a:	f3bf 8f6f 	isb	sy
 800759e:	f3bf 8f4f 	dsb	sy
 80075a2:	607b      	str	r3, [r7, #4]
}
 80075a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80075a6:	4b0f      	ldr	r3, [pc, #60]	@ (80075e4 <vPortEnterCritical+0x58>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	3301      	adds	r3, #1
 80075ac:	4a0d      	ldr	r2, [pc, #52]	@ (80075e4 <vPortEnterCritical+0x58>)
 80075ae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80075b0:	4b0c      	ldr	r3, [pc, #48]	@ (80075e4 <vPortEnterCritical+0x58>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d110      	bne.n	80075da <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80075b8:	4b0b      	ldr	r3, [pc, #44]	@ (80075e8 <vPortEnterCritical+0x5c>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d00b      	beq.n	80075da <vPortEnterCritical+0x4e>
	__asm volatile
 80075c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075c6:	f383 8811 	msr	BASEPRI, r3
 80075ca:	f3bf 8f6f 	isb	sy
 80075ce:	f3bf 8f4f 	dsb	sy
 80075d2:	603b      	str	r3, [r7, #0]
}
 80075d4:	bf00      	nop
 80075d6:	bf00      	nop
 80075d8:	e7fd      	b.n	80075d6 <vPortEnterCritical+0x4a>
	}
}
 80075da:	bf00      	nop
 80075dc:	370c      	adds	r7, #12
 80075de:	46bd      	mov	sp, r7
 80075e0:	bc80      	pop	{r7}
 80075e2:	4770      	bx	lr
 80075e4:	20000014 	.word	0x20000014
 80075e8:	e000ed04 	.word	0xe000ed04

080075ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80075ec:	b480      	push	{r7}
 80075ee:	b083      	sub	sp, #12
 80075f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80075f2:	4b12      	ldr	r3, [pc, #72]	@ (800763c <vPortExitCritical+0x50>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d10b      	bne.n	8007612 <vPortExitCritical+0x26>
	__asm volatile
 80075fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075fe:	f383 8811 	msr	BASEPRI, r3
 8007602:	f3bf 8f6f 	isb	sy
 8007606:	f3bf 8f4f 	dsb	sy
 800760a:	607b      	str	r3, [r7, #4]
}
 800760c:	bf00      	nop
 800760e:	bf00      	nop
 8007610:	e7fd      	b.n	800760e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007612:	4b0a      	ldr	r3, [pc, #40]	@ (800763c <vPortExitCritical+0x50>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	3b01      	subs	r3, #1
 8007618:	4a08      	ldr	r2, [pc, #32]	@ (800763c <vPortExitCritical+0x50>)
 800761a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800761c:	4b07      	ldr	r3, [pc, #28]	@ (800763c <vPortExitCritical+0x50>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d105      	bne.n	8007630 <vPortExitCritical+0x44>
 8007624:	2300      	movs	r3, #0
 8007626:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	f383 8811 	msr	BASEPRI, r3
}
 800762e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007630:	bf00      	nop
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	bc80      	pop	{r7}
 8007638:	4770      	bx	lr
 800763a:	bf00      	nop
 800763c:	20000014 	.word	0x20000014

08007640 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007640:	f3ef 8009 	mrs	r0, PSP
 8007644:	f3bf 8f6f 	isb	sy
 8007648:	4b0d      	ldr	r3, [pc, #52]	@ (8007680 <pxCurrentTCBConst>)
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007650:	6010      	str	r0, [r2, #0]
 8007652:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007656:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800765a:	f380 8811 	msr	BASEPRI, r0
 800765e:	f7ff fa39 	bl	8006ad4 <vTaskSwitchContext>
 8007662:	f04f 0000 	mov.w	r0, #0
 8007666:	f380 8811 	msr	BASEPRI, r0
 800766a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800766e:	6819      	ldr	r1, [r3, #0]
 8007670:	6808      	ldr	r0, [r1, #0]
 8007672:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007676:	f380 8809 	msr	PSP, r0
 800767a:	f3bf 8f6f 	isb	sy
 800767e:	4770      	bx	lr

08007680 <pxCurrentTCBConst>:
 8007680:	20000434 	.word	0x20000434
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007684:	bf00      	nop
 8007686:	bf00      	nop

08007688 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
	__asm volatile
 800768e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007692:	f383 8811 	msr	BASEPRI, r3
 8007696:	f3bf 8f6f 	isb	sy
 800769a:	f3bf 8f4f 	dsb	sy
 800769e:	607b      	str	r3, [r7, #4]
}
 80076a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80076a2:	f7ff f95d 	bl	8006960 <xTaskIncrementTick>
 80076a6:	4603      	mov	r3, r0
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d003      	beq.n	80076b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80076ac:	4b06      	ldr	r3, [pc, #24]	@ (80076c8 <xPortSysTickHandler+0x40>)
 80076ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076b2:	601a      	str	r2, [r3, #0]
 80076b4:	2300      	movs	r3, #0
 80076b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	f383 8811 	msr	BASEPRI, r3
}
 80076be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80076c0:	bf00      	nop
 80076c2:	3708      	adds	r7, #8
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	e000ed04 	.word	0xe000ed04

080076cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80076cc:	b480      	push	{r7}
 80076ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80076d0:	4b0a      	ldr	r3, [pc, #40]	@ (80076fc <vPortSetupTimerInterrupt+0x30>)
 80076d2:	2200      	movs	r2, #0
 80076d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80076d6:	4b0a      	ldr	r3, [pc, #40]	@ (8007700 <vPortSetupTimerInterrupt+0x34>)
 80076d8:	2200      	movs	r2, #0
 80076da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80076dc:	4b09      	ldr	r3, [pc, #36]	@ (8007704 <vPortSetupTimerInterrupt+0x38>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a09      	ldr	r2, [pc, #36]	@ (8007708 <vPortSetupTimerInterrupt+0x3c>)
 80076e2:	fba2 2303 	umull	r2, r3, r2, r3
 80076e6:	099b      	lsrs	r3, r3, #6
 80076e8:	4a08      	ldr	r2, [pc, #32]	@ (800770c <vPortSetupTimerInterrupt+0x40>)
 80076ea:	3b01      	subs	r3, #1
 80076ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80076ee:	4b03      	ldr	r3, [pc, #12]	@ (80076fc <vPortSetupTimerInterrupt+0x30>)
 80076f0:	2207      	movs	r2, #7
 80076f2:	601a      	str	r2, [r3, #0]
}
 80076f4:	bf00      	nop
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bc80      	pop	{r7}
 80076fa:	4770      	bx	lr
 80076fc:	e000e010 	.word	0xe000e010
 8007700:	e000e018 	.word	0xe000e018
 8007704:	20000008 	.word	0x20000008
 8007708:	10624dd3 	.word	0x10624dd3
 800770c:	e000e014 	.word	0xe000e014

08007710 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007716:	f3ef 8305 	mrs	r3, IPSR
 800771a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2b0f      	cmp	r3, #15
 8007720:	d915      	bls.n	800774e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007722:	4a17      	ldr	r2, [pc, #92]	@ (8007780 <vPortValidateInterruptPriority+0x70>)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	4413      	add	r3, r2
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800772c:	4b15      	ldr	r3, [pc, #84]	@ (8007784 <vPortValidateInterruptPriority+0x74>)
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	7afa      	ldrb	r2, [r7, #11]
 8007732:	429a      	cmp	r2, r3
 8007734:	d20b      	bcs.n	800774e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800773a:	f383 8811 	msr	BASEPRI, r3
 800773e:	f3bf 8f6f 	isb	sy
 8007742:	f3bf 8f4f 	dsb	sy
 8007746:	607b      	str	r3, [r7, #4]
}
 8007748:	bf00      	nop
 800774a:	bf00      	nop
 800774c:	e7fd      	b.n	800774a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800774e:	4b0e      	ldr	r3, [pc, #56]	@ (8007788 <vPortValidateInterruptPriority+0x78>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007756:	4b0d      	ldr	r3, [pc, #52]	@ (800778c <vPortValidateInterruptPriority+0x7c>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	429a      	cmp	r2, r3
 800775c:	d90b      	bls.n	8007776 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800775e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007762:	f383 8811 	msr	BASEPRI, r3
 8007766:	f3bf 8f6f 	isb	sy
 800776a:	f3bf 8f4f 	dsb	sy
 800776e:	603b      	str	r3, [r7, #0]
}
 8007770:	bf00      	nop
 8007772:	bf00      	nop
 8007774:	e7fd      	b.n	8007772 <vPortValidateInterruptPriority+0x62>
	}
 8007776:	bf00      	nop
 8007778:	3714      	adds	r7, #20
 800777a:	46bd      	mov	sp, r7
 800777c:	bc80      	pop	{r7}
 800777e:	4770      	bx	lr
 8007780:	e000e3f0 	.word	0xe000e3f0
 8007784:	20000560 	.word	0x20000560
 8007788:	e000ed0c 	.word	0xe000ed0c
 800778c:	20000564 	.word	0x20000564

08007790 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b08a      	sub	sp, #40	@ 0x28
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007798:	2300      	movs	r3, #0
 800779a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800779c:	f7ff f834 	bl	8006808 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80077a0:	4b5c      	ldr	r3, [pc, #368]	@ (8007914 <pvPortMalloc+0x184>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d101      	bne.n	80077ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80077a8:	f000 f924 	bl	80079f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80077ac:	4b5a      	ldr	r3, [pc, #360]	@ (8007918 <pvPortMalloc+0x188>)
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	4013      	ands	r3, r2
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f040 8095 	bne.w	80078e4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d01e      	beq.n	80077fe <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80077c0:	2208      	movs	r2, #8
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4413      	add	r3, r2
 80077c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f003 0307 	and.w	r3, r3, #7
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d015      	beq.n	80077fe <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f023 0307 	bic.w	r3, r3, #7
 80077d8:	3308      	adds	r3, #8
 80077da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f003 0307 	and.w	r3, r3, #7
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00b      	beq.n	80077fe <pvPortMalloc+0x6e>
	__asm volatile
 80077e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ea:	f383 8811 	msr	BASEPRI, r3
 80077ee:	f3bf 8f6f 	isb	sy
 80077f2:	f3bf 8f4f 	dsb	sy
 80077f6:	617b      	str	r3, [r7, #20]
}
 80077f8:	bf00      	nop
 80077fa:	bf00      	nop
 80077fc:	e7fd      	b.n	80077fa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d06f      	beq.n	80078e4 <pvPortMalloc+0x154>
 8007804:	4b45      	ldr	r3, [pc, #276]	@ (800791c <pvPortMalloc+0x18c>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	429a      	cmp	r2, r3
 800780c:	d86a      	bhi.n	80078e4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800780e:	4b44      	ldr	r3, [pc, #272]	@ (8007920 <pvPortMalloc+0x190>)
 8007810:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007812:	4b43      	ldr	r3, [pc, #268]	@ (8007920 <pvPortMalloc+0x190>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007818:	e004      	b.n	8007824 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800781a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800781c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800781e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	429a      	cmp	r2, r3
 800782c:	d903      	bls.n	8007836 <pvPortMalloc+0xa6>
 800782e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d1f1      	bne.n	800781a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007836:	4b37      	ldr	r3, [pc, #220]	@ (8007914 <pvPortMalloc+0x184>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800783c:	429a      	cmp	r2, r3
 800783e:	d051      	beq.n	80078e4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007840:	6a3b      	ldr	r3, [r7, #32]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2208      	movs	r2, #8
 8007846:	4413      	add	r3, r2
 8007848:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800784a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	6a3b      	ldr	r3, [r7, #32]
 8007850:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007854:	685a      	ldr	r2, [r3, #4]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	1ad2      	subs	r2, r2, r3
 800785a:	2308      	movs	r3, #8
 800785c:	005b      	lsls	r3, r3, #1
 800785e:	429a      	cmp	r2, r3
 8007860:	d920      	bls.n	80078a4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007862:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4413      	add	r3, r2
 8007868:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800786a:	69bb      	ldr	r3, [r7, #24]
 800786c:	f003 0307 	and.w	r3, r3, #7
 8007870:	2b00      	cmp	r3, #0
 8007872:	d00b      	beq.n	800788c <pvPortMalloc+0xfc>
	__asm volatile
 8007874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007878:	f383 8811 	msr	BASEPRI, r3
 800787c:	f3bf 8f6f 	isb	sy
 8007880:	f3bf 8f4f 	dsb	sy
 8007884:	613b      	str	r3, [r7, #16]
}
 8007886:	bf00      	nop
 8007888:	bf00      	nop
 800788a:	e7fd      	b.n	8007888 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800788c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800788e:	685a      	ldr	r2, [r3, #4]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	1ad2      	subs	r2, r2, r3
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800789e:	69b8      	ldr	r0, [r7, #24]
 80078a0:	f000 f90a 	bl	8007ab8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80078a4:	4b1d      	ldr	r3, [pc, #116]	@ (800791c <pvPortMalloc+0x18c>)
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	1ad3      	subs	r3, r2, r3
 80078ae:	4a1b      	ldr	r2, [pc, #108]	@ (800791c <pvPortMalloc+0x18c>)
 80078b0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80078b2:	4b1a      	ldr	r3, [pc, #104]	@ (800791c <pvPortMalloc+0x18c>)
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	4b1b      	ldr	r3, [pc, #108]	@ (8007924 <pvPortMalloc+0x194>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d203      	bcs.n	80078c6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80078be:	4b17      	ldr	r3, [pc, #92]	@ (800791c <pvPortMalloc+0x18c>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a18      	ldr	r2, [pc, #96]	@ (8007924 <pvPortMalloc+0x194>)
 80078c4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80078c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c8:	685a      	ldr	r2, [r3, #4]
 80078ca:	4b13      	ldr	r3, [pc, #76]	@ (8007918 <pvPortMalloc+0x188>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	431a      	orrs	r2, r3
 80078d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80078d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d6:	2200      	movs	r2, #0
 80078d8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80078da:	4b13      	ldr	r3, [pc, #76]	@ (8007928 <pvPortMalloc+0x198>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	3301      	adds	r3, #1
 80078e0:	4a11      	ldr	r2, [pc, #68]	@ (8007928 <pvPortMalloc+0x198>)
 80078e2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80078e4:	f7fe ff9e 	bl	8006824 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	f003 0307 	and.w	r3, r3, #7
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00b      	beq.n	800790a <pvPortMalloc+0x17a>
	__asm volatile
 80078f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078f6:	f383 8811 	msr	BASEPRI, r3
 80078fa:	f3bf 8f6f 	isb	sy
 80078fe:	f3bf 8f4f 	dsb	sy
 8007902:	60fb      	str	r3, [r7, #12]
}
 8007904:	bf00      	nop
 8007906:	bf00      	nop
 8007908:	e7fd      	b.n	8007906 <pvPortMalloc+0x176>
	return pvReturn;
 800790a:	69fb      	ldr	r3, [r7, #28]
}
 800790c:	4618      	mov	r0, r3
 800790e:	3728      	adds	r7, #40	@ 0x28
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}
 8007914:	20001170 	.word	0x20001170
 8007918:	20001184 	.word	0x20001184
 800791c:	20001174 	.word	0x20001174
 8007920:	20001168 	.word	0x20001168
 8007924:	20001178 	.word	0x20001178
 8007928:	2000117c 	.word	0x2000117c

0800792c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b086      	sub	sp, #24
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d04f      	beq.n	80079de <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800793e:	2308      	movs	r3, #8
 8007940:	425b      	negs	r3, r3
 8007942:	697a      	ldr	r2, [r7, #20]
 8007944:	4413      	add	r3, r2
 8007946:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	685a      	ldr	r2, [r3, #4]
 8007950:	4b25      	ldr	r3, [pc, #148]	@ (80079e8 <vPortFree+0xbc>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4013      	ands	r3, r2
 8007956:	2b00      	cmp	r3, #0
 8007958:	d10b      	bne.n	8007972 <vPortFree+0x46>
	__asm volatile
 800795a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800795e:	f383 8811 	msr	BASEPRI, r3
 8007962:	f3bf 8f6f 	isb	sy
 8007966:	f3bf 8f4f 	dsb	sy
 800796a:	60fb      	str	r3, [r7, #12]
}
 800796c:	bf00      	nop
 800796e:	bf00      	nop
 8007970:	e7fd      	b.n	800796e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00b      	beq.n	8007992 <vPortFree+0x66>
	__asm volatile
 800797a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800797e:	f383 8811 	msr	BASEPRI, r3
 8007982:	f3bf 8f6f 	isb	sy
 8007986:	f3bf 8f4f 	dsb	sy
 800798a:	60bb      	str	r3, [r7, #8]
}
 800798c:	bf00      	nop
 800798e:	bf00      	nop
 8007990:	e7fd      	b.n	800798e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	685a      	ldr	r2, [r3, #4]
 8007996:	4b14      	ldr	r3, [pc, #80]	@ (80079e8 <vPortFree+0xbc>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4013      	ands	r3, r2
 800799c:	2b00      	cmp	r3, #0
 800799e:	d01e      	beq.n	80079de <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d11a      	bne.n	80079de <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	685a      	ldr	r2, [r3, #4]
 80079ac:	4b0e      	ldr	r3, [pc, #56]	@ (80079e8 <vPortFree+0xbc>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	43db      	mvns	r3, r3
 80079b2:	401a      	ands	r2, r3
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80079b8:	f7fe ff26 	bl	8006808 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	685a      	ldr	r2, [r3, #4]
 80079c0:	4b0a      	ldr	r3, [pc, #40]	@ (80079ec <vPortFree+0xc0>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4413      	add	r3, r2
 80079c6:	4a09      	ldr	r2, [pc, #36]	@ (80079ec <vPortFree+0xc0>)
 80079c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80079ca:	6938      	ldr	r0, [r7, #16]
 80079cc:	f000 f874 	bl	8007ab8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80079d0:	4b07      	ldr	r3, [pc, #28]	@ (80079f0 <vPortFree+0xc4>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	3301      	adds	r3, #1
 80079d6:	4a06      	ldr	r2, [pc, #24]	@ (80079f0 <vPortFree+0xc4>)
 80079d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80079da:	f7fe ff23 	bl	8006824 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80079de:	bf00      	nop
 80079e0:	3718      	adds	r7, #24
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	20001184 	.word	0x20001184
 80079ec:	20001174 	.word	0x20001174
 80079f0:	20001180 	.word	0x20001180

080079f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80079fa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80079fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007a00:	4b27      	ldr	r3, [pc, #156]	@ (8007aa0 <prvHeapInit+0xac>)
 8007a02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f003 0307 	and.w	r3, r3, #7
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00c      	beq.n	8007a28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	3307      	adds	r3, #7
 8007a12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f023 0307 	bic.w	r3, r3, #7
 8007a1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	4a1f      	ldr	r2, [pc, #124]	@ (8007aa0 <prvHeapInit+0xac>)
 8007a24:	4413      	add	r3, r2
 8007a26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a2c:	4a1d      	ldr	r2, [pc, #116]	@ (8007aa4 <prvHeapInit+0xb0>)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007a32:	4b1c      	ldr	r3, [pc, #112]	@ (8007aa4 <prvHeapInit+0xb0>)
 8007a34:	2200      	movs	r2, #0
 8007a36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	68ba      	ldr	r2, [r7, #8]
 8007a3c:	4413      	add	r3, r2
 8007a3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007a40:	2208      	movs	r2, #8
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	1a9b      	subs	r3, r3, r2
 8007a46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f023 0307 	bic.w	r3, r3, #7
 8007a4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	4a15      	ldr	r2, [pc, #84]	@ (8007aa8 <prvHeapInit+0xb4>)
 8007a54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007a56:	4b14      	ldr	r3, [pc, #80]	@ (8007aa8 <prvHeapInit+0xb4>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007a5e:	4b12      	ldr	r3, [pc, #72]	@ (8007aa8 <prvHeapInit+0xb4>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	2200      	movs	r2, #0
 8007a64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	1ad2      	subs	r2, r2, r3
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007a74:	4b0c      	ldr	r3, [pc, #48]	@ (8007aa8 <prvHeapInit+0xb4>)
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	4a0a      	ldr	r2, [pc, #40]	@ (8007aac <prvHeapInit+0xb8>)
 8007a82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	4a09      	ldr	r2, [pc, #36]	@ (8007ab0 <prvHeapInit+0xbc>)
 8007a8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007a8c:	4b09      	ldr	r3, [pc, #36]	@ (8007ab4 <prvHeapInit+0xc0>)
 8007a8e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007a92:	601a      	str	r2, [r3, #0]
}
 8007a94:	bf00      	nop
 8007a96:	3714      	adds	r7, #20
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bc80      	pop	{r7}
 8007a9c:	4770      	bx	lr
 8007a9e:	bf00      	nop
 8007aa0:	20000568 	.word	0x20000568
 8007aa4:	20001168 	.word	0x20001168
 8007aa8:	20001170 	.word	0x20001170
 8007aac:	20001178 	.word	0x20001178
 8007ab0:	20001174 	.word	0x20001174
 8007ab4:	20001184 	.word	0x20001184

08007ab8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b085      	sub	sp, #20
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ac0:	4b27      	ldr	r3, [pc, #156]	@ (8007b60 <prvInsertBlockIntoFreeList+0xa8>)
 8007ac2:	60fb      	str	r3, [r7, #12]
 8007ac4:	e002      	b.n	8007acc <prvInsertBlockIntoFreeList+0x14>
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	60fb      	str	r3, [r7, #12]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d8f7      	bhi.n	8007ac6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	68ba      	ldr	r2, [r7, #8]
 8007ae0:	4413      	add	r3, r2
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d108      	bne.n	8007afa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	685a      	ldr	r2, [r3, #4]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	441a      	add	r2, r3
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	68ba      	ldr	r2, [r7, #8]
 8007b04:	441a      	add	r2, r3
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d118      	bne.n	8007b40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	4b14      	ldr	r3, [pc, #80]	@ (8007b64 <prvInsertBlockIntoFreeList+0xac>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d00d      	beq.n	8007b36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	685a      	ldr	r2, [r3, #4]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	441a      	add	r2, r3
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	601a      	str	r2, [r3, #0]
 8007b34:	e008      	b.n	8007b48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007b36:	4b0b      	ldr	r3, [pc, #44]	@ (8007b64 <prvInsertBlockIntoFreeList+0xac>)
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	601a      	str	r2, [r3, #0]
 8007b3e:	e003      	b.n	8007b48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d002      	beq.n	8007b56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b56:	bf00      	nop
 8007b58:	3714      	adds	r7, #20
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bc80      	pop	{r7}
 8007b5e:	4770      	bx	lr
 8007b60:	20001168 	.word	0x20001168
 8007b64:	20001170 	.word	0x20001170

08007b68 <memset>:
 8007b68:	4603      	mov	r3, r0
 8007b6a:	4402      	add	r2, r0
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d100      	bne.n	8007b72 <memset+0xa>
 8007b70:	4770      	bx	lr
 8007b72:	f803 1b01 	strb.w	r1, [r3], #1
 8007b76:	e7f9      	b.n	8007b6c <memset+0x4>

08007b78 <__libc_init_array>:
 8007b78:	b570      	push	{r4, r5, r6, lr}
 8007b7a:	2600      	movs	r6, #0
 8007b7c:	4d0c      	ldr	r5, [pc, #48]	@ (8007bb0 <__libc_init_array+0x38>)
 8007b7e:	4c0d      	ldr	r4, [pc, #52]	@ (8007bb4 <__libc_init_array+0x3c>)
 8007b80:	1b64      	subs	r4, r4, r5
 8007b82:	10a4      	asrs	r4, r4, #2
 8007b84:	42a6      	cmp	r6, r4
 8007b86:	d109      	bne.n	8007b9c <__libc_init_array+0x24>
 8007b88:	f000 f828 	bl	8007bdc <_init>
 8007b8c:	2600      	movs	r6, #0
 8007b8e:	4d0a      	ldr	r5, [pc, #40]	@ (8007bb8 <__libc_init_array+0x40>)
 8007b90:	4c0a      	ldr	r4, [pc, #40]	@ (8007bbc <__libc_init_array+0x44>)
 8007b92:	1b64      	subs	r4, r4, r5
 8007b94:	10a4      	asrs	r4, r4, #2
 8007b96:	42a6      	cmp	r6, r4
 8007b98:	d105      	bne.n	8007ba6 <__libc_init_array+0x2e>
 8007b9a:	bd70      	pop	{r4, r5, r6, pc}
 8007b9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ba0:	4798      	blx	r3
 8007ba2:	3601      	adds	r6, #1
 8007ba4:	e7ee      	b.n	8007b84 <__libc_init_array+0xc>
 8007ba6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007baa:	4798      	blx	r3
 8007bac:	3601      	adds	r6, #1
 8007bae:	e7f2      	b.n	8007b96 <__libc_init_array+0x1e>
 8007bb0:	08007cc0 	.word	0x08007cc0
 8007bb4:	08007cc0 	.word	0x08007cc0
 8007bb8:	08007cc0 	.word	0x08007cc0
 8007bbc:	08007cc4 	.word	0x08007cc4

08007bc0 <memcpy>:
 8007bc0:	440a      	add	r2, r1
 8007bc2:	4291      	cmp	r1, r2
 8007bc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007bc8:	d100      	bne.n	8007bcc <memcpy+0xc>
 8007bca:	4770      	bx	lr
 8007bcc:	b510      	push	{r4, lr}
 8007bce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bd2:	4291      	cmp	r1, r2
 8007bd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bd8:	d1f9      	bne.n	8007bce <memcpy+0xe>
 8007bda:	bd10      	pop	{r4, pc}

08007bdc <_init>:
 8007bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bde:	bf00      	nop
 8007be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007be2:	bc08      	pop	{r3}
 8007be4:	469e      	mov	lr, r3
 8007be6:	4770      	bx	lr

08007be8 <_fini>:
 8007be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bea:	bf00      	nop
 8007bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bee:	bc08      	pop	{r3}
 8007bf0:	469e      	mov	lr, r3
 8007bf2:	4770      	bx	lr
